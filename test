
package com.example.final_masjid;

import static java.lang.String.format;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.res.AssetManager;
import android.database.Cursor;
import android.graphics.Color;
import android.net.Uri;
import android.os.Bundle;
import android.os.CountDownTimer;
import android.os.Handler;
import android.provider.MediaStore;
import android.text.TextUtils;
import android.text.format.DateFormat;
import android.util.Log;
import android.view.View;
import android.view.WindowManager;
import android.view.animation.AccelerateDecelerateInterpolator;
import android.view.animation.AlphaAnimation;
import android.view.animation.Animation;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import androidx.activity.result.ActivityResult;
import androidx.activity.result.ActivityResultCallback;
import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.contract.ActivityResultContracts;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.DateTimeException;
import java.time.Duration;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.chrono.HijrahChronology;
import java.time.chrono.HijrahDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.time.temporal.ChronoField;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

import jxl.Cell;
import jxl.Sheet;
import jxl.Workbook;
import jxl.read.biff.BiffException;

public class MainActivity extends AppCompatActivity {

    Button btnFajrPlus;
    Button btnFajrMinus;
    Button btnZuharPlus;
    Button btnZuharMinus;
    Button btnAsrPlus;
    Button btnAsrMinus;
    Button btnMaghribPlus;
    Button btnMaghribMinus;
    Button btnIshaPlus;
    Button btnIshaMinus;

    Button btnRefresh, btnLoad, btnNotice, btnFridayPlus, btnFridayMinus;

    boolean isPrayerButtonsVisible = true;
    String path, OriginalFile;

    private boolean hasExecuted = false;



    // To create flip clock
//    CustomDigitView hoursView;
//    CustomDigitView minutesView;
//    CustomDigitView secondsView;

    // Stores the additional minutes for prayertimes
    String adjustedFajrTime;

    // Example for Zuhar
    String adjustedZuharTime;

    // Repeat the process for other prayer times...

    // Example for Asr
    String adjustedAsrTime;

    // Example for Maghrib
    String adjustedMaghribTime;

    // Example for Isha
    String adjustedIshaTime;

    private int fajrAdjustment = 0;
    private int zuharAdjustment = 0;
    private int asrAdjustment = 0;
    private int maghribAdjustment = 0;
    private int ishaAdjustment = 0;


    // Update UI with the adjusted prayer times
    LocalTime NextFajrTime = null, NextZuharTime = null, NextAsrTime = null, NextMaghribTime = null, NextIshaTime = null;

    // Convert 5 minutes into a LocalTime object
    LocalTime fiveMinutes = LocalTime.of(0, 5); // Represents 00:05
//    LocalTime fiveMinutesMinus = LocalTime.of(0, -5); // Represents 00:05


    private int additionalFajrMinutes = 0, additionalZuharMinutes = 0, additionalAsrMinutes = 0, additionalMaghribMinutes = 0, additionalIshaMinutes = 0;
    private final int MAX_ADDITIONAL_MINUTES = 150; // Maximum number of minutes that can be added/deducted

    //    LocalTime fajrTime, zuharTime, asrTime, MaghribTime, ishaTime;
    private static final int FILE_CHOOSER_REQUEST_CODE = 1;

    // For clicking on the buttons:
    int fajrCounter = 0, zuharCounter = 0, asrCounter = 0, maghribCounter = 0, ishaCounter = 0;

    boolean nextFajrCheck = false;
    boolean nextZuharCheck = false;
    boolean nextAsrCheck = false;
    boolean nextMaghribCheck = false;
    boolean nextIshaCheck = false;


    LocalTime fajrTime24 = null;
    LocalTime zuharTime24 = null;
    LocalTime asrTime24 = null;
    LocalTime MaghribTime24 = null;
    LocalTime ishaTime24 = null;

    LocalTime addedFajrTime24 = null;
    LocalTime addedZuharTime24 = null;
    LocalTime addedAsrTime24 = null;
    LocalTime addedMaghribTime24 = null;
    LocalTime AddedFajrTime24 = null;

    LocalTime nextFajr24 = null;
    LocalTime nextZuhar24 = null;
    LocalTime nextAsr24 = null;
    LocalTime nextMaghrib24 = null;
    LocalTime nextIsha24 = null;

    LocalTime nextFajrTime24 = null;
    LocalTime nextZuharTime24 = null;
    LocalTime nextAsrTime24 = null;
    LocalTime nextMaghribTime24 = null;
    LocalTime nextIshaTime24 = null;

    LocalTime deductedFajrTime24 = null;
    LocalTime deductedZuharTime24 = null;
    LocalTime deductedAsrTime24 = null;
    LocalTime deductedMaghribTime24 = null;
    LocalTime deductedIshaTime24 = null;

    boolean  isFajrDeductButtonPressed = false, isZuharDeductButtonPressed = false,
            isAsrDeductButtonPressed = false, isMaghribDeductButtonPressed = false,
            isIshaDeductButtonPressed = false;

    boolean isFajrAddMinutesPressed = false, isZuharAddMinutesPressed = false,
            isAsrAddMinutesPressed = false, isMaghribAddMinutesPressed = false,
            isIshaAddMinutesPressed = false;

    boolean
            isFajrSubtractMinutesPressed = false,
            isZuharSubtractMinutesPressed = false,     isAsrSubtractMinutesPressed = false,
            isMaghribSubtractMinutesPressed = false,
            isIshaSubtractMinutesPressed = false, isZuharbtnFajrPlusPressed = false, isAsrbtnFajrPlusPressed = false,
            isMaghbtnFajrPlusPressed = false, isIshabtnFajrPlusPressed = false;

    int fajrAdd = 0, zuharAdd = 0, asrAdd = 0, maghribAdd = 0, ishaAdd = 0;
    int fajrMinus = 0, zuharMinus = 0, asrMinus = 0, maghribMinus = 0, ishaMinus = 0;

    int zuharDeductionCount = 0, zuharAdditionCount = 0;


    boolean isFajrDeducted = false, isZuharDeducted = false, isAsrDeducted = false, isMaghribDeducted = false,
            isIshaDeducted = false;
    boolean isFajrAddition = false, isZuharAddition = false, isAsrAddition = false,
            isMaghribAddition = false, isIshaAddition = false;


    // Define a boolean flag to track whether the code has been executed
    private boolean isCodeExecuted = false;
    boolean btnReset = false;

    TextView TextViewDate;

    String filePath = "";
    AlertDialog dialog;
    EditText editText, selectedTimeTextView;

    String fajrOriginal = "";
    String zuharOriginal = "";
    String asrOriginal = "";
    String maghribOriginal = "";
    String ishaOriginal = "";

    TextView Fajr, Zuhar, Asr, Maghrib, Isha, Namaz, nextnamaz, NoticeText, fridaytextview, fajrLable, zuharLable, asrLable, maghribLable, ishaLable,
            BoxFajr, BoxZuhar, BoxAsr, BoxMaghrib, BoxIsha;
    String fajr24 = "5:00", zuhar24 = "2:00", asr24 = "5:00", maghrib24 = "7:00", isha24 = "9:00", friday24 = "", friday = "", countdowndt = "", Notice = "", fridayCheck = "", Midnight = "00:00:00";
    LocalTime fajrAdded = LocalTime.parse("05:15");
    LocalTime zuharAdded = LocalTime.parse("12:15");
    LocalTime asrAdded = LocalTime.parse("04:00");
    LocalTime maghribAdded = LocalTime.parse("06:15");
    LocalTime ishaAdded = LocalTime.parse("07:00");


    LocalTime fajrDeduct = LocalTime.parse("00:00");
    LocalTime zuharDeduct = LocalTime.parse("00:00");
    LocalTime asrDeduct = LocalTime.parse("00:00");
    LocalTime maghribDeduct = LocalTime.parse("00:00");
    LocalTime ishaDeduct = LocalTime.parse("00:00");



    private TextView countdowntxt;
    final Handler handler = new Handler();
    private Runnable runnable;
    final String DATE_FORMAT = "dd/MM/yyyy";
    String dateformat = "dd/MM/yyyy HH:mm";
    Date d = new Date();

    private boolean FridayCheck = false;
    private boolean LoadCheck = false;
    String LoadPath;
    Button Noticebutton, loadbutton, Refreshbtn, SettingsButton;
    Intent MyIntent;
    boolean datecheck = true;
    boolean Refresh = true;
    String nextFajr = "";
    String nextZuhar = "";
    String nextAsr = "";
    String nextMaghrib = "";
    String nextIsha = "";
    String fajrtxt = "";
    String zuhartxt = "";
    String asrtxt = "";
    String Maghribtxt = "";
    String ishatxt = "";
    TextView FajrColor, ZuharColor, AsrColor, MaghribColor, IshaColor;
    private TextView counterText;
    private BroadcastReceiver minuteUpdateReceiver;
    private int counter;
    private MasjidLooperClass looperThread = new MasjidLooperClass();

    private Button btnLoadButton;
    private File mFile;

    private ActivityResultLauncher<Intent> filePickerLauncher;
    TextView islamicDateTextView;
    ImageView moonImageView;


    // days offset
    int dayOffset = 0;
    TextView btnHijriMinus, btnHijriPlus, IBANBox, scrollingBox;


    private Map<String, String> prayerTimes = new HashMap<>();
    private Map<String, String> nextDayPrayerTimes = new HashMap<>();

    private PrayerTimeManager prayerTimeManager;
    private String savedMaghreb24;

    SharedPreferences sharedPreferences;

    private LocalTime addedTime = LocalTime.now(); // Initialize with the current time
    private String nextPrayer;

    private static final int REQUEST_SET_TIME_PERMISSION = 123;

    private static final String PREF_NAME = "PrayerTimePrefs";

    private boolean isInitialized = false;

    private LocalTime modifiedFajrTime = LocalTime.parse("00:00", DateTimeFormatter.ofPattern("H:mm"));
    private int fajrAdditionMinutes = 0;

    private LocalTime modifiedZuharTime = LocalTime.parse("00:00", DateTimeFormatter.ofPattern("H:mm"));
    private int zuharAdditionMinutes = 0;

    private LocalTime modifiedAsrTime = LocalTime.parse("00:00", DateTimeFormatter.ofPattern("H:mm"));
    private int asrAdditionMinutes = 0;
    private LocalTime modifiedMaghribTime = LocalTime.parse("00:00", DateTimeFormatter.ofPattern("H:mm"));
    private int maghribAdditionMinutes = 0;

    private LocalTime modifiedIshaTime = LocalTime.parse("00:00", DateTimeFormatter.ofPattern("H:mm"));
    private int ishaAdditionMinutes = 0;
    // Initialize addition and subtraction variables for each prayer
    private int fajrSubtractionMinutes = 0;

    private int zuharSubtractionMinutes = 0;

    private int asrSubtractionMinutes = 0;

    private int maghribSubtractionMinutes = 0;

    private int ishaSubtractionMinutes = 0;

//    private BackgroundTask backgroundTask;

    int fajrButtonClickCount = 0, zuharButtonClickCount = 0, asrButtonClickCount = 0, maghribButtonClickCount = 0, ishaButtonClickCount = 0;


    // Replace these placeholder keys with your actual SharedPreferences keys
    private static final String FAJR_KEY = "fajr_time";
    private static final String ZUHAR_KEY = "zuhar_time";
    private static final String ASR_KEY = "asr_time";
    private static final String MAGHRIB_KEY = "maghrib_time";
    private static final String ISHA_KEY = "isha_time";

    // Add these lines in your class to initialize SharedPreferences
    private static final String PREFS_NAME = "PrayerTimesPrefs";
    private SharedPreferences prefs;

    private static final String PREFS_KEY = "your_prefs_key"; // Replace "your_prefs_key" with the actual key you want to use
    private Date lastModifiedDate; // Assuming 'lastModifiedDate' is a Date type variable

    // Define a flag to track whether CalculateTimings() is already scheduled
    private boolean isCalculateTimingsScheduled = false;

    // Define a constant for the delay (1 second)
    private static final long DELAY_MILLIS = 900;

    String nextDayFajr, nextDayZuhar, nextDayAsr, nextDayMaghrib, nextDayIsha;

    private long lastScrollTime = 0;
    private static final long SCROLL_INTERVAL = 1000; // 1 second

    private long lastPrayerTimeUpdate = 0;
    private static final long PRAYER_TIME_UPDATE_INTERVAL = 1000; // 1 second



    // ===================================================== ON CREATE =====================================================

    @SuppressLint("WrongViewCast")
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);



        // ========================== RESTART APP ----------------
        MidnightRestartReceiver restartReceiver = new MidnightRestartReceiver();
//        restartReceiver.setMidnightAlarm(getApplicationContext());



//        // Initialize the BackgroundTask with the current MainActivity
//        backgroundTask = new BackgroundTask(this);
//
//        // Start the background task when the activity is created
//        backgroundTask.startBackgroundTask();
//
////        // Start the background task when needed
////        backgroundTask.startBackgroundTask();


        setContentView(R.layout.activity_main);
        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);

        islamicDateTextView = findViewById(R.id.Noticeid);
        moonImageView = findViewById(R.id.moonImageView);


// Determine the moon phase
        int dayOfMonth = 1; // Replace with the actual day of the month
        int phase = calculateMoonPhase(dayOfMonth);

// Get the resource ID based on the moon phase
        String resourceName = "moon" + phase;
        int resourceId = getResources().getIdentifier(resourceName, "drawable", getPackageName());


        // For Hijri Dates to remain updated on next date.

        // Retrieve the day offset value from SharedPreferences
        sharedPreferences = getSharedPreferences("MyPrefs", MODE_PRIVATE);
        int defaultDayOffset = 0; // Provide a default value if the key is not found
        // Retrieve the stored dayOffset value, defaulting to 0 if not found
        dayOffset = sharedPreferences.getInt("dayOffset", defaultDayOffset);


        btnHijriPlus = findViewById(R.id.btnHijriPlus);
        btnHijriMinus = findViewById(R.id.btnHijriMinus);

        IBANBox = findViewById(R.id.txtIBAN);
        scrollingBox = findViewById(R.id.scrollingBox);


//        counterText = (TextView) findViewById(R.id.counter_text);
//        looperThread.start();
        btnFajrPlus = findViewById(R.id.btnFajrPlus);
        btnFajrMinus = findViewById(R.id.btnFajrMinus);
        btnZuharPlus = findViewById(R.id.btnZuharPlus);
        btnZuharMinus = findViewById(R.id.btnZuharMinus);
        btnAsrPlus = findViewById(R.id.btnAsrPlus);
        btnAsrMinus = findViewById(R.id.btnAsrMinus);
        btnMaghribPlus = findViewById(R.id.btnMaghribPlus);
        btnMaghribMinus = findViewById(R.id.btnMaghribMinus);
        btnIshaPlus = findViewById(R.id.btnIshaPlus);
        btnIshaMinus = findViewById(R.id.btnIshaMinus);

        btnRefresh = findViewById(R.id.btnRefresh);
        btnLoad = findViewById(R.id.btnLoad);
        btnNotice = findViewById(R.id.btnNotice);

        btnFridayPlus = findViewById(R.id.btnFridayPlus);
        btnFridayMinus = findViewById(R.id.btnFridayMinus);


        // Declare textViews
        FajrColor = (TextView) findViewById(R.id.fajr);
        ZuharColor = (TextView) findViewById(R.id.zuhar);
        AsrColor = (TextView) findViewById(R.id.asr);
        MaghribColor = (TextView) findViewById(R.id.maghrib);
        IshaColor = (TextView) findViewById(R.id.isha);

        NoticeText = findViewById(R.id.Noticeid);
        fridaytextview = findViewById(R.id.friday);
        Namaz = findViewById(R.id.namazid);
        nextnamaz = findViewById(R.id.next_namaz);
        countdowntxt = findViewById(R.id.countdown);
        Noticebutton = findViewById(R.id.btnNotice);
        SettingsButton = findViewById(R.id.Settings);
        Refreshbtn = findViewById(R.id.btnRefresh);

        fajrLable = findViewById(R.id.fajrLabel);
        zuharLable = findViewById(R.id.zuharLabel);
        asrLable = findViewById(R.id.asrLabel);
        maghribLable = findViewById(R.id.maghribLabel);
        ishaLable = findViewById(R.id.ishaLabel);
        BoxFajr = findViewById(R.id.BoxFajr);
        BoxZuhar = findViewById(R.id.BoxZuhar);
        BoxAsr = findViewById(R.id.BoxAsr);
        BoxMaghrib = findViewById(R.id.BoxMaghrib);
        BoxIsha = findViewById(R.id.BoxIsha);

        Fajr = findViewById(R.id.fajr);
        Zuhar = findViewById(R.id.zuhar);
        Asr = findViewById(R.id.asr);
        Maghrib = findViewById(R.id.maghrib);
        Isha = findViewById(R.id.isha);



        UI();

//         Set up click listeners for your buttons // buttons to call
        setUpButtonListeners();



        // Manage Databse & Display UI
        GetTime();
        CalculateTimings();
        startUpdatingClockEverySecond();
        NextDayPrayerTimes();

//        AddMinutes();



//        ==============================================================================

        // Inside onCreate or constructor call prefs
        prefs = getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);

        // *************************************** Call Methods to start *************************

        // Load default prayer times
//        GetTime();

        // Call your method to run once
        runCodeOnce();

        hidePrayerButtons(); // hide by default
        updateIslamicDate();


//        AddMinutes();
        fridaytextview.setText("1:25");
//        FridayTextColor();
        // ******************************** Start the UI to update ********************************
        // Update prayer times
        // **************************** Start Scrolling text Animation ********************************
        scrollIt();





        // For TextView Date
        TextViewDate = findViewById(R.id.textClock);
        TextView dayofweek = findViewById(R.id.DayOfWeek);

        // Run every often to update the Day Label next to Date
        runnable = new Runnable() {
//            @SuppressLint("SetText")
            @Override
            public void run() {
                handler.postDelayed(this, (1000  * 10 * 2));



                NextDayPrayerTimes();

            }
        };
        handler.postDelayed(runnable, 1000);

        // Method to retrieve modified prayer times from SharedPreferences










        // *****************************************************

        // Run every often to update the Day Label next to Date
        runnable = new Runnable() {
            @Override
            public void run() {
                handler.postDelayed(this, (1000 * 6 * 10 * 60));

//                LocalTime midnight = LocalTime.of(23, 54, 00);  // Adjusted to 5 seconds before midnight
//                LocalTime currentTime = LocalTime.now();
//
//                if (currentTime.isAfter(midnight.minusMinutes(5)) && currentTime.isBefore(midnight)) {
//                    // Run the GetTime() method because it's close to midnight
//                    GetTime();
//                    Log.d("--- GetTime() ----", "GetTime() main Method MIDNIGHT Logic ");
//
//                }


//                else {
//                    // Proceed with updating prayer times for the next day
////                    NextDayPrayerTimes();
//                    Log.d("---Runnable Logic  ", "GetTime() isn't running: ");
//
//                }



//                AddMinutes();
                GetTime();
                updateIslamicDate();


                // Get today's day.
                Calendar calendar = Calendar.getInstance();
                int dayOfWeek = calendar.get(Calendar.DAY_OF_WEEK);

                TextView dayofweek = findViewById(R.id.DayOfWeek);

                switch (dayOfWeek) {
                    case Calendar.SUNDAY:
                        dayofweek.setText("Sunday");
                        break;
                    case Calendar.MONDAY:
                        dayofweek.setText("Monday");
                        break;
                    case Calendar.TUESDAY:
                        dayofweek.setText("Tuesday");
                        break;
                    case Calendar.WEDNESDAY:
                        dayofweek.setText("Wednesday");
                        break;
                    case Calendar.THURSDAY:
                        dayofweek.setText("Thursday");
                        break;
                    case Calendar.FRIDAY:
                        dayofweek.setText("Friday");
                        break;
                    case Calendar.SATURDAY:
                        dayofweek.setText("Saturday");
                        break;
                    default:
                        dayofweek.setText("Friday");
                        break;
                }

            }
        };
        handler.postDelayed(runnable, 1000);


        // Set the initial file to be timing.xls
        mFile = new File(getExternalFilesDir(null), "timing.xls");
//        if (!mFile.exists()) {
//            try {
//                mFile.createNewFile();
//            } catch (IOException e) {
//                e.printStackTrace();
//            }
//        }

        // Get references to the load and replace buttons
        OriginalFile = "timings.xls"; // Load Original File
        btnRefresh = findViewById(R.id.btnRefresh);
        btnRefresh.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                OriginalFile = "timings.xls"; // Load Original File

//                fajrAdded = null;
//                zuharAdded = null;
//                asrAdded = null;
//                maghribAdded = null;
//                ishaAdded = null;

//                GetTime(OriginalFile);


                // Reset the day offset to 0
                dayOffset = 0;

                // Clear the day offset value in SharedPreferences
                SharedPreferences.Editor editor = sharedPreferences.edit();
                editor.remove("dayOffset");
                editor.apply();

                // Create a DateTimeFormatter instance
//                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("H:mm");
//                // Store the prayer time strings in variables
//                String fajrTimeString = fajrOriginal;
//                String zuharTimeString = zuharOriginal;
//                String asrTimeString = asrOriginal;
//                String ishaTimeString = ishaOriginal;
//                String maghribTimeString = maghribOriginal;


                // Parse the prayer time strings to LocalTime objects and assign them to the corresponding added variables
//                LocalTime parsedFajrTime = LocalTime.parse(fajrTimeString, formatter);
//                fajrAdded = parsedFajrTime;
//
//                LocalTime parsedDhuhrTime = LocalTime.parse(zuharTimeString, formatter);
//                zuharAdded = parsedDhuhrTime;
//
//                LocalTime parsedAsrTime = LocalTime.parse(asrTimeString, formatter);
//                asrAdded = parsedAsrTime;
//
//                LocalTime parsedIshaTime = LocalTime.parse(ishaTimeString, formatter);
//                ishaAdded = parsedIshaTime;
//
//                LocalTime parsedMaghrib = LocalTime.parse(maghribTimeString, formatter);
//                maghribAdded = parsedMaghrib;


//                formattedFajrTime = fajrOriginal;
//                formattedZuharTime = zuharOriginal;
//                formattedAsrTime = asrOriginal;
//                formattedIshaTime = ishaOriginal;
//                formattedMaghribTime = maghribOriginal;

                fajrAdditionMinutes = 0;
                zuharAdditionMinutes = 0;
                asrAdditionMinutes = 0;
                maghribAdditionMinutes = 0;
                ishaAdditionMinutes = 0;


                nextFajrCheck = false;
                nextZuharCheck = false;
                nextAsrCheck = false;
                nextMaghribCheck = false;
                nextIshaCheck = false;


                nextFajr = "";
                nextZuhar = "";
                nextAsr = "";
                nextMaghrib = "";
                nextIsha = "";

                fajr24 = "";
                zuhar24 = "";
                asr24 = "";
                maghrib24 = "";
                isha24 = "";


                isha24 = applyAdjustments(ishaOriginal, 0);
                maghrib24 = applyAdjustments(maghribOriginal, 0);
                asr24 = applyAdjustments(asrOriginal, 0);
                zuhar24 = applyAdjustments(zuharOriginal, 0);
                fajr24 = applyAdjustments(fajrOriginal, 0);

                fajrAdded = LocalTime.parse(fajrOriginal, DateTimeFormatter.ofPattern("H:mm"));
                zuharAdded = LocalTime.parse(zuharOriginal, DateTimeFormatter.ofPattern("H:mm"));
                asrAdded = LocalTime.parse(asrOriginal, DateTimeFormatter.ofPattern("H:mm"));
                maghribAdded = LocalTime.parse(maghribOriginal, DateTimeFormatter.ofPattern("H:mm"));
                ishaAdded = LocalTime.parse(ishaOriginal, DateTimeFormatter.ofPattern("H:mm"));

                GetTime();

                dFajr(fajr24);
                dZuhar(zuhar24);
                dAsr(asr24);
                dMaghrib(maghrib24);
                dIsha(isha24);

                // Update the UI with GetTime() Default values
//                NextDayPrayerTimes();
                updateIslamicDate();

                btnReset = true;

            }

        });

        btnLoadButton = findViewById(R.id.btnLoad);

        // Set click listener for the button

        // Set click listener for the button
        btnLoadButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                // Get the file path from the user
                Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
                intent.setType("application/vnd.ms-excel");
                startActivityForResult(Intent.createChooser(intent, "Select an Excel file"), 1);
                if (filePath == null) {
                    filePath = "test.xls";
                    GetTime(filePath);
                    AddMinutes();
                }
                // OLD CODE
//                // Show a file picker dialog to let the user choose a file
//                Intent intent = new Intent(Intent.ACTION_OPEN_DOCUMENT);
//                intent.addCategory(Intent.CATEGORY_OPENABLE);
//                intent.setType("application/vnd.ms-excel"); // Limit selection to Excel files
//
//                // Use the ActivityResultLauncher to handle the result of the file picker
//                filePickerLauncher.launch(intent);
            }
        });



// Initialize the file picker launcher in your onCreate or onStart method
        filePickerLauncher = registerForActivityResult(
                new ActivityResultContracts.StartActivityForResult(),
                new ActivityResultCallback<ActivityResult>() {
                    @Override
                    public void onActivityResult(ActivityResult result) {
                        if (result.getResultCode() == Activity.RESULT_OK) {
                            Intent data = result.getData();
                            if (data != null) {
                                Uri fileUri = data.getData();
                                filePath = getPathFromUri(fileUri); // Get the file path from the URI
                                if (filePath != null) {
                                    // Replace the original file inside getTime() method
                                    GetTime(filePath);

                                    AddMinutes();

//                                    GetTime();
                                }
                            }
                        }
                    }
                }
        );






        //        btnFajrPlus.setVisibility(View.INVISIBLE);
        //        btnFajrMinus.setVisibility(View.INVISIBLE);


//      --------------------------  this is example of stand alone button that works  -------------------------------------------
        // ********************************************************************************************************************
            // -----------------------------------------------------------------------------------------------------
//        // Fajr Plus button
//        btnFajrPlus.setOnClickListener(new View.OnClickListener() {
//            @Override
//            public void onClick(View v) {
//                // Increment the user modification variable
//                fajrAdditionMinutes += 5;
//                // Set the flag to indicate button press
//                isFajrAddMinutesPressed = true;
//
//
//                // Calculate the modified Fajr time by adding user modifications
//                LocalTime baseFajrTime = LocalTime.parse(fajr24, DateTimeFormatter.ofPattern("H:mm"));
//                fajrAdded = baseFajrTime.plusMinutes(fajrAdditionMinutes);
//
//                // Save the adjusted times to SharedPreferences or perform other necessary actions
//                savePrayerTime("fajr24", fajr24);  // Save the original time if needed
//                savePrayerTime("fajrAdded", fajrAdded.format(DateTimeFormatter.ofPattern("H:mm")));
//
//                // Store the formatted time in a variable
//                formattedFajrTime = fajrAdded.format(DateTimeFormatter.ofPattern("H:mm"));
//
//                // Update the TextView with the new value in the "H:mm" format
//                Fajr.setText(formattedFajrTime);
//            }
//        });
//
//// Fajr Minus button
//        btnFajrMinus.setOnClickListener(new View.OnClickListener() {
//            @Override
//            public void onClick(View v) {
//                // Decrement the user modification variable
////                if (fajrAdditionMinutes >= 5)
//                {
//                    fajrAdditionMinutes -= 5;
//                    // Set the flag to indicate button press
//                    isFajrAddMinutesPressed = true;
//
//
//                    // Calculate the modified Fajr time by adding user modifications
//                    LocalTime baseFajrTime = LocalTime.parse(fajr24, DateTimeFormatter.ofPattern("H:mm"));
//                    fajrAdded = baseFajrTime.plusMinutes(fajrAdditionMinutes);
//
//                    // Save the adjusted times to SharedPreferences or perform other necessary actions
//                    savePrayerTime("fajr24", fajr24);  // Save the original time if needed
//                    savePrayerTime("fajrAdded", fajrAdded.format(DateTimeFormatter.ofPattern("H:mm")));
//
//                    // Store the formatted time in a variable
//                    formattedFajrTime = fajrAdded.format(DateTimeFormatter.ofPattern("H:mm"));
//
//                    // Update the TextView with the new value in the "H:mm" format
//                    Fajr.setText(formattedFajrTime);
//                }
//            }
//        });

        // ***********************************************************************************************

                                                // Logic ends
//
//                            // Fajr Plus button
//                        btnFajrPlus.setOnClickListener(new View.OnClickListener() {
//                            @Override
//                            public void onClick(View v) {
//
//
//                                DateTimeFormatter FajrInputFormat = DateTimeFormatter.ofPattern("H:mm", Locale.ENGLISH); // Assuming the prayer times are in AM/PM format
//                                // Convert prayer times to LocalTime objects
//                                LocalTime fajrTime = LocalTime.parse(fajr24.trim(), FajrInputFormat);
//                                // Add 12 hours to each prayer time except fajr To avoid time Format ERROR
//                                fajrTime = fajrTime.plusHours(0);
//
//                                // Increment the user modification variable
//                                fajrAdditionMinutes = fajrAdditionMinutes + 5;
//                                // Set the flag to indicate button press
//                                isFajrAddMinutesPressed = true;
//
//
//                                // Calculate the modified Fajr time by adding user modifications
//                                LocalTime baseFajrTime = LocalTime.parse(fajr24, DateTimeFormatter.ofPattern("H:mm"));
//                                fajrAdded = baseFajrTime.plusMinutes(fajrAdditionMinutes);
//                                fajr24 = fajrAdded.format(DateTimeFormatter.ofPattern("H:mm"));
//
//                                // Update fajrNext directly based on fajrAdditionMinutes
//                                LocalTime basenextFajrTime =  LocalTime.parse(nextFajr, DateTimeFormatter.ofPattern("H:mm"));
//                                basenextFajrTime = (basenextFajrTime.plusMinutes(fajrAdditionMinutes));
//                                // Convert the LocalTime object to a formatted string
//                                String modifiedFajrTime = basenextFajrTime.format(DateTimeFormatter.ofPattern("H:mm"));
//
//                                nextFajr = modifiedFajrTime;
//
//                                // Save the adjusted times to SharedPreferences or perform other necessary actions
//                    //            savePrayerTime("fajr24", fajr24);  // Save the original time if needed
//                                savePrayerTime("fajrAdded", fajrAdded.format(DateTimeFormatter.ofPattern("H:mm")));
//
//                                // Store the formatted time in a variable
//                    //            formattedFajrTime = fajrAdded.format(DateTimeFormatter.ofPattern("H:mm"));
//                                // Update the TextView with the new value in the "H:mm" format
//                    //            Fajr.setText(formattedFajrTime);
//                                AddMinutes();
//
//                            }
//                        });
//
//                    // Fajr Minus button
//                        btnFajrMinus.setOnClickListener(new View.OnClickListener() {
//                            @Override
//                            public void onClick(View v) {
//                                // Decrement the user modification variable
//                    //                if (fajrAdditionMinutes >= 5)
//                                {
//                                    fajrAdditionMinutes = fajrAdditionMinutes - 5;
//                                    // Set the flag to indicate button press
//                                    isFajrAddMinutesPressed = true;
//
//                                    // Calculate the modified Fajr time by adding user modifications
//                                    LocalTime baseFajrTime = LocalTime.parse(fajr24, DateTimeFormatter.ofPattern("H:mm"));
//                                    fajrAdded = baseFajrTime.plusMinutes(fajrAdditionMinutes);
//                                    fajr24 = fajrAdded.format(DateTimeFormatter.ofPattern("H:mm"));
//
//
//
//                                    // Save the adjusted times to SharedPreferences or perform other necessary actions
//                    //                savePrayerTime("fajr24", fajr24);  // Save the original time if needed
//                                    savePrayerTime("fajrAdded", fajrAdded.format(DateTimeFormatter.ofPattern("H:mm")));
//
//                                    // Update fajrNext directly based on fajrAdditionMinutes
//                                    LocalTime basenextFajrTime =  LocalTime.parse(nextFajr, DateTimeFormatter.ofPattern("H:mm"));
//    //                                basenextFajrTime = (basenextFajrTime.plusMinutes(fajrAdditionMinutes));
//                                    nextFajr = String.valueOf(basenextFajrTime.plusMinutes(fajrAdditionMinutes));
//
//                                    // Store the formatted time in a variable
//                    //                formattedFajrTime = fajrAdded.format(DateTimeFormatter.ofPattern("H:mm"));
//                                    AddMinutes();
//
//                                    // Update the TextView with the new value in the "H:mm" format
//                    //                Fajr.setText(formattedFajrTime);
//                                }
//                            }
//                        });



        // STAND ALONG BUTTONS CODE =============== 5 February 2024 -==================

//// Fajr Plus button
//        btnFajrPlus.setOnClickListener(new View.OnClickListener() {
//            @Override
//            public void onClick(View v) {
//                // Increment the click count
//                fajrButtonClickCount++;
//
//                // Update fajrAdditionMinutes based on the click count (add only 5 minutes)
//                fajrAdditionMinutes = 5 * fajrButtonClickCount;
//
//                // Set the flag to indicate button press
//                isFajrAddMinutesPressed = true;
//
//                // Calculate the modified Fajr time by adding 5 minutes
//                LocalTime baseFajrTime = LocalTime.parse(fajr24, DateTimeFormatter.ofPattern("H:mm"));
//                fajrAdded = baseFajrTime.plusMinutes(5);
//                fajr24 = fajrAdded.format(DateTimeFormatter.ofPattern("H:mm"));
//
//                // Update fajrNext directly based on fajrAdditionMinutes
//                LocalTime basenextFajrTime = LocalTime.parse(nextFajr, DateTimeFormatter.ofPattern("H:mm"));
//                nextFajr = String.valueOf(basenextFajrTime.plusMinutes(5));
//
//                // Store the formatted time in a variable
//                AddMinutes();
//            }
//        });
//
//// Fajr Minus button
//        btnFajrMinus.setOnClickListener(new View.OnClickListener() {
//            @Override
//            public void onClick(View v) {
//                // Increment the click count
//                fajrButtonClickCount++;
//
//                // Update fajrSubtractionMinutes based on the click count (subtract only 5 minutes)
//                fajrSubtractionMinutes = 5 * fajrButtonClickCount;
//
//                // Set the flag to indicate button press
//                isFajrAddMinutesPressed = true;
//
//                // Calculate the modified Fajr time by subtracting 5 minutes
//                LocalTime baseFajrTime = LocalTime.parse(fajr24, DateTimeFormatter.ofPattern("H:mm"));
//                fajrAdded = baseFajrTime.minusMinutes(5);
//                fajr24 = fajrAdded.format(DateTimeFormatter.ofPattern("H:mm"));
//
//                // Update fajrNext directly based on fajrSubtractionMinutes
//                LocalTime basenextFajrTime = LocalTime.parse(nextFajr, DateTimeFormatter.ofPattern("H:mm"));
//                nextFajr = String.valueOf(basenextFajrTime.minusMinutes(5));
//
//                // Store the formatted time in a variable
//                AddMinutes();
//            }
//        });
//        // Zuhar Plus button
//                btnZuharPlus.setOnClickListener(new View.OnClickListener() {
//                    @Override
//                    public void onClick(View v) {
//                        // Increment the click count
//                        zuharButtonClickCount++;
//
//                        // Update zuharAdditionMinutes based on the click count (add only 5 minutes)
//                        zuharAdditionMinutes = 5 * zuharButtonClickCount;
//
//                        // Set the flag to indicate button press
//                        isZuharAddMinutesPressed = true;
//
//                        // Calculate the modified Zuhar time by adding 5 minutes
//                        LocalTime baseZuharTime = LocalTime.parse(zuhar24, DateTimeFormatter.ofPattern("H:mm"));
//                        zuharAdded = baseZuharTime.plusMinutes(5);
//                        zuhar24 = zuharAdded.format(DateTimeFormatter.ofPattern("H:mm"));
//
//                        // Update zuharNext directly based on zuharAdditionMinutes
//                        LocalTime basenextZuharTime = LocalTime.parse(nextZuhar, DateTimeFormatter.ofPattern("H:mm"));
//                        nextZuhar = String.valueOf(basenextZuharTime.plusMinutes(5));
//
//                        // Store the formatted time in a variable
//                        AddMinutes();
//                    }
//                });
//
//        // Zuhar Minus button
//                btnZuharMinus.setOnClickListener(new View.OnClickListener() {
//                    @Override
//                    public void onClick(View v) {
//                        // Increment the click count
//                        zuharButtonClickCount++;
//
//                        // Set the flag to indicate button press
//                        isZuharAddMinutesPressed = true;
//
//                        // Update zuharSubtractionMinutes based on the click count (subtract only 5 minutes)
//                        zuharSubtractionMinutes = 5 * zuharButtonClickCount;
//
//                        // Calculate the modified Zuhar time by subtracting 5 minutes
//                        LocalTime baseZuharTime = LocalTime.parse(zuhar24, DateTimeFormatter.ofPattern("H:mm"));
//                        zuharAdded = baseZuharTime.minusMinutes(5);
//                        zuhar24 = zuharAdded.format(DateTimeFormatter.ofPattern("H:mm"));
//
//                        // Update zuharNext directly based on zuharSubtractionMinutes
//                        LocalTime basenextZuharTime = LocalTime.parse(nextZuhar, DateTimeFormatter.ofPattern("H:mm"));
//                        nextZuhar = String.valueOf(basenextZuharTime.minusMinutes(5));
//
//                        // Store the formatted time in a variable
//                        AddMinutes();
//                    }
//                });
//        // Asr Plus button
//        btnAsrPlus.setOnClickListener(new View.OnClickListener() {
//            @Override
//            public void onClick(View v) {
//                // Increment the click count
//                asrButtonClickCount++;
//
//                // Update asrAdditionMinutes based on the click count (add only 5 minutes)
//                asrAdditionMinutes = 5 * asrButtonClickCount;
//
//                // Set the flag to indicate button press
//                isAsrAddMinutesPressed = true;
//
//                // Calculate the modified Asr time by adding 5 minutes
//                LocalTime baseAsrTime = LocalTime.parse(asr24, DateTimeFormatter.ofPattern("H:mm"));
//                asrAdded = baseAsrTime.plusMinutes(5);
//                asr24 = asrAdded.format(DateTimeFormatter.ofPattern("H:mm"));
//
//                // Update asrNext directly based on asrAdditionMinutes
//                LocalTime basenextAsrTime = LocalTime.parse(nextAsr, DateTimeFormatter.ofPattern("H:mm"));
//                nextAsr = String.valueOf(basenextAsrTime.plusMinutes(5));
//
//                // Store the formatted time in a variable
//                AddMinutes();
//            }
//        });
//
//// Asr Minus button
//        btnAsrMinus.setOnClickListener(new View.OnClickListener() {
//            @Override
//            public void onClick(View v) {
//                // Increment the click count
//                asrButtonClickCount++;
//                // Set the flag to indicate button press
//                isAsrAddMinutesPressed = true;
//
//                // Update asrSubtractionMinutes based on the click count (subtract only 5 minutes)
//                asrSubtractionMinutes = 5 * asrButtonClickCount;
//
//                // Calculate the modified Asr time by subtracting 5 minutes
//                LocalTime baseAsrTime = LocalTime.parse(asr24, DateTimeFormatter.ofPattern("H:mm"));
//                asrAdded = baseAsrTime.minusMinutes(5);
//                asr24 = asrAdded.format(DateTimeFormatter.ofPattern("H:mm"));
//
//                // Update asrNext directly based on asrSubtractionMinutes
//                LocalTime basenextAsrTime = LocalTime.parse(nextAsr, DateTimeFormatter.ofPattern("H:mm"));
//                nextAsr = String.valueOf(basenextAsrTime.minusMinutes(5));
//
//                // Store the formatted time in a variable
//                AddMinutes();
//            }
//        });
//
//// Similar code for Maghrib and Isha
//// ...
//
//// Maghrib Plus button
//        btnMaghribPlus.setOnClickListener(new View.OnClickListener() {
//            @Override
//            public void onClick(View v) {
//                // Increment the click count
//                maghribButtonClickCount++;
//
//                // Update maghribAdditionMinutes based on the click count (add only 1 minute)
//                maghribAdditionMinutes = 1 * maghribButtonClickCount;
//
//                // Set the flag to indicate button press
//                isMaghribAddMinutesPressed = true;
//
//
//                try {
//
//
//                    String currentValue = maghrib24.toString();
//
//                    // Parse the value as a LocalTime object with the "H:mm" format
//                    LocalTime time = LocalTime.parse(currentValue, DateTimeFormatter.ofPattern("H:mm"));
//
//                    // Add 5 minutes
//                    time = time.plusMinutes(1);
//
//                    maghrib24 = time.format(DateTimeFormatter.ofPattern("H:mm"));
//
//                    nextMaghrib24 = LocalTime.parse(nextMaghrib, DateTimeFormatter.ofPattern("H:mm"));
//                    nextMaghribTime24 = nextMaghrib24.plusMinutes(1);
//                    nextMaghrib = nextMaghribTime24.format(DateTimeFormatter.ofPattern("H:mm"));
//
//
//
//
//
////                    // original code
//                // Calculate the modified Maghrib time by adding 5 minutes
//                LocalTime baseMaghribTime = LocalTime.parse(maghrib24, DateTimeFormatter.ofPattern("H:mm"));
//                maghribAdded = baseMaghribTime.plusMinutes(1);
////                maghrib24 = maghribAdded.format(DateTimeFormatter.ofPattern("H:mm"));
//
//                // Update maghribNext directly based on maghribAdditionMinutes
////                LocalTime basenextMaghribTime = LocalTime.parse(nextMaghrib, DateTimeFormatter.ofPattern("H:mm"));
////                nextMaghrib = String.valueOf(basenextMaghribTime.plusMinutes(1));
//
//                // Update the TextView with the new value in the "H:mm" format
//                Maghrib.setText(maghrib24);
//                // Store the formatted time in a variable
//                AddMinutes();
//
//                } catch (DateTimeParseException e) {
//                    // Handle the parse exception if the current value is not in a valid time format
//                    e.printStackTrace();
//                    // Display an error message or perform appropriate error handling
//                }
//            }
//
//        });
//
//// Maghrib Minus button
//        btnMaghribMinus.setOnClickListener(new View.OnClickListener() {
//            @Override
//            public void onClick(View v) {
//                // Increment the click count
//                maghribButtonClickCount--;
//
//                // Update maghribSubtractionMinutes based on the click count (subtract only 1 minute)
//                maghribSubtractionMinutes = 1 * maghribButtonClickCount;
//
//                try {
//
//
//                    String currentValue = maghrib24.toString();
//
//                    // Parse the value as a LocalTime object with the "H:mm" format
//                    LocalTime time = LocalTime.parse(currentValue, DateTimeFormatter.ofPattern("H:mm"));
//
//                    // Add 5 minutes
//                    time = time.minusMinutes(1);
//
//                    maghrib24 = time.format(DateTimeFormatter.ofPattern("H:mm"));
//
//                    nextMaghrib24 = LocalTime.parse(nextMaghrib, DateTimeFormatter.ofPattern("H:mm"));
//                    nextMaghribTime24 = nextMaghrib24.plusMinutes(1);
//                    nextMaghrib = nextMaghribTime24.format(DateTimeFormatter.ofPattern("H:mm"));
//
//
//
////                    // original code
//
//                    // Calculate the modified Maghrib time by subtracting 5 minutes
//                    LocalTime baseMaghribTime = LocalTime.parse(maghrib24, DateTimeFormatter.ofPattern("H:mm"));
//                    maghribAdded = baseMaghribTime.minusMinutes(1);
////                    maghrib24 = maghribAdded.format(DateTimeFormatter.ofPattern("H:mm"));
//
//                    // Update maghribNext directly based on maghribSubtractionMinutes
////                    LocalTime basenextMaghribTime = LocalTime.parse(nextMaghrib, DateTimeFormatter.ofPattern("H:mm"));
////                    nextMaghrib = String.valueOf(basenextMaghribTime.minusMinutes(1));
//
//                    isMaghribAddMinutesPressed = true;
//
//                    // Store the formatted time in a variable
//                    AddMinutes();
//
//                } catch (DateTimeParseException e) {
//                    // Handle the parse exception if the current value is not in a valid time format
//                    e.printStackTrace();
//                    // Display an error message or perform appropriate error handling
//                }
//            }
//        });
//
//// Isha Plus button
//        btnIshaPlus.setOnClickListener(new View.OnClickListener() {
//            @Override
//            public void onClick(View v) {
//                // Increment the click count
//                ishaButtonClickCount++;
//
//                // Update ishaAdditionMinutes based on the click count (add only 5 minutes)
//                ishaAdditionMinutes = 5 * ishaButtonClickCount;
//
//                // Set the flag to indicate button press
//                isIshaAddMinutesPressed = true;
//
//                // Calculate the modified Isha time by adding 5 minutes
//                LocalTime baseIshaTime = LocalTime.parse(isha24, DateTimeFormatter.ofPattern("H:mm"));
//                ishaAdded = baseIshaTime.plusMinutes(5);
//                isha24 = ishaAdded.format(DateTimeFormatter.ofPattern("H:mm"));
//
//                // Update ishaNext directly based on ishaAdditionMinutes
//                LocalTime basenextIshaTime = LocalTime.parse(nextIsha, DateTimeFormatter.ofPattern("H:mm"));
//                nextIsha = String.valueOf(basenextIshaTime.plusMinutes(5));
//
//                // Store the formatted time in a variable
//                AddMinutes();
//            }
//        });
//
//// Isha Minus button
//        btnIshaMinus.setOnClickListener(new View.OnClickListener() {
//            @Override
//            public void onClick(View v) {
//                // Increment the click count
//                ishaButtonClickCount++;
//
//                // Update ishaSubtractionMinutes based on the click count (subtract only 5 minutes)
//                ishaSubtractionMinutes = 5 * ishaButtonClickCount;
//                // Set the flag to indicate button press
//                isIshaAddMinutesPressed = true;
//
//                // Calculate the modified Isha time by subtracting 5 minutes
//                LocalTime baseIshaTime = LocalTime.parse(isha24, DateTimeFormatter.ofPattern("H:mm"));
//                ishaAdded = baseIshaTime.minusMinutes(5);
//                isha24 = ishaAdded.format(DateTimeFormatter.ofPattern("H:mm"));
//
//                // Update ishaNext directly based on ishaSubtractionMinutes
//                LocalTime basenextIshaTime = LocalTime.parse(nextIsha, DateTimeFormatter.ofPattern("H:mm"));
//                nextIsha = String.valueOf(basenextIshaTime.minusMinutes(5));
//
//                // Store the formatted time in a variable
//                AddMinutes();
//            }
//        });
//



//        ================================================== Individual buttons Eed ==========================================


        TextView fridayTextView = findViewById(R.id.friday);
        Button btnFridayPlus = findViewById(R.id.btnFridayPlus);
        Button btnFridayMinus = findViewById(R.id.btnFridayMinus);

        btnFridayPlus.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                // Get the current value from the TextView
                String currentValue = fridayTextView.getText().toString();

                try {
                    // Parse the value as a LocalTime object with the "H:mm" format
                    LocalTime time = LocalTime.parse(currentValue, DateTimeFormatter.ofPattern("H:mm"));

                    // Add 5 minutes
                    time = time.plusMinutes(5);

                    // Update the TextView with the new value in the "H:mm" format
                    fridayTextView.setText(time.format(DateTimeFormatter.ofPattern("H:mm")));
                } catch (DateTimeParseException e) {
                    // Handle the parse exception if the current value is not in a valid time format
                    e.printStackTrace();
                    // Display an error message or perform appropriate error handling
                }
            }
        });

        btnFridayMinus.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                // Get the current value from the TextView
                String currentValue = fridayTextView.getText().toString();

                try {
                    // Parse the value as a LocalTime object with the "H:mm" format
                    LocalTime time = LocalTime.parse(currentValue, DateTimeFormatter.ofPattern("H:mm"));

                    // Add 5 minutes
                    time = time.minusMinutes(5);

                    // Update the TextView with the new value in the "H:mm" format
                    fridayTextView.setText(time.format(DateTimeFormatter.ofPattern("H:mm")));
                } catch (DateTimeParseException e) {
                    // Handle the parse exception if the current value is not in a valid time format
                    e.printStackTrace();
                    // Display an error message or perform appropriate error handling
                }
            }
        });


        // Hide and Unhide buttons
        SettingsButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (isPrayerButtonsVisible) {
                    hidePrayerButtons();
                } else {
                    showPrayerButtons();
                }
            }
        });


        // Set click listeners for the plus and minus buttons
        btnHijriPlus.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                // Increment the day offset by 1
                dayOffset++;
                updateIslamicDate();
//                updateMoonPhaseBasedOnHijriDate();

            }
        });

        btnHijriMinus.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                // Decrement the day offset by 1
                dayOffset--;
                updateIslamicDate();
//                updateMoonPhaseBasedOnHijriDate();

            }
        });


        // *((((((((((((((((((((((((((((((((((((((  new method 13 jan 2024 ))))))))))))))))))))))))))))))))))))))))))))))))))))))))



// ========================================================  End of Buttons section =================================================


        // ===================================== New Buttons 4th Jan 2024   --------------------------------
//        btnFajrPlus.setOnClickListener(createButtonClickListener(fajr24, 5, fajrAdded, fajr24, nextFajr, this::dFajr, fajrCounter, true));
//        btnFajrMinus.setOnClickListener(createButtonClickListener(fajr24, 5, fajrAdded, fajr24, nextFajr, this::dFajr, fajrCounter, false));
//
//        // Example usage for Zuhar
//        btnZuharPlus.setOnClickListener(createButtonClickListener(zuhar24, 5, zuharAdded, zuhar24, nextZuhar, this::dZuhar, zuharCounter, true));
//        btnZuharMinus.setOnClickListener(createButtonClickListener(zuhar24, 5, zuharAdded, zuhar24, nextZuhar, this::dZuhar, zuharCounter, false));
//
//        // Example usage for Asr
//        btnAsrPlus.setOnClickListener(createButtonClickListener(asr24, 5, asrAdded, asr24, nextAsr, this::dAsr, asrCounter, true));
//        btnAsrMinus.setOnClickListener(createButtonClickListener(asr24, 5, asrAdded, asr24, nextAsr, this::dAsr, asrCounter, false));
//
//        // Example usage for Maghrib
//        btnMaghribPlus.setOnClickListener(createButtonClickListener(maghrib24, 1, maghribAdded, maghrib24, nextMaghrib, this::dMaghrib, maghribCounter, true));
//        btnMaghribMinus.setOnClickListener(createButtonClickListener(maghrib24, 1, maghribAdded, maghrib24, nextMaghrib, this::dMaghrib, maghribCounter, false));
//
//        // Example usage for Isha
//        btnIshaPlus.setOnClickListener(createButtonClickListener(isha24, 5, ishaAdded, isha24, nextIsha, this::dIsha, ishaCounter, true));
//        btnIshaMinus.setOnClickListener(createButtonClickListener(isha24, 5, ishaAdded, isha24, nextIsha, this::dIsha, ishaCounter, false));





        // ---------------------------------------------------------------- New Buttons Method --------------------------------




    } // ******************************************************** Main class ENDS - Methods bellow ***************************************************************
        // ******************************************************************************************************************************************
           // *********************************************************************************************************************************
              // ***********************************************************************************************************************










    // Method to check if it's a new day
    private boolean isNextDay() {
        LocalDate currentDate = LocalDate.now();
        return !currentDate.equals(lastModifiedDate);
    }

    private void resetModificationFlags() {
        isFajrAddMinutesPressed = false;
        isFajrSubtractMinutesPressed = false;
        isZuharAddMinutesPressed = false;
        isZuharSubtractMinutesPressed = false;
        isAsrAddMinutesPressed = false;
        isAsrSubtractMinutesPressed = false;
        isMaghribAddMinutesPressed = false;
        isMaghribSubtractMinutesPressed = false;
        isIshaAddMinutesPressed = false;
        isIshaSubtractMinutesPressed = false;
    }

    // *())))))))())))))))))))))))))))))))))((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((())))))))))))))))))
    private void scheduleCheckForMidnightMethod() {
        // Use an ExecutorService to execute the check every 5 minutes
        Executors.newSingleThreadScheduledExecutor().scheduleAtFixedRate(() -> {
            // Check for specific times between 11:50 PM and 11:59 PM
            if (!hasExecuted) {
                if (LocalTime.now().equals(LocalTime.of(23, 50)) || LocalTime.now().equals(LocalTime.of(23, 59))) {
                    // Call the method to handle the specific action
                    GetTime();

                    // Set the executed flag to true
                    hasExecuted = true;
                }
            }
        }, 0, 5, TimeUnit.MINUTES);
    }

    // --------------- write buttons bellow ---------------


    // _______________________________________________________________________ \\

// Method to declare and assign values to each button
    private void setUpButtonListeners() {

        // Set click listeners for Fajr buttons
        btnFajrPlus.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                // Handle the plus button click for Fajr
                handlePrayerTimePlusButtonClick("Fajr", 5);
                // Save the adjusted time to SharedPreferences
                savePrayerTime("fajr24", fajr24);
                Log.wtf("- Buttons -", "fajrCounter: " + fajrCounter);
                isFajrAddMinutesPressed = true;

                fajr24 = applyAdjustments(fajrOriginal, fajrAdjustment);
                dFajr(fajr24.trim()); // Update the UI immediately

            }
        });

        btnFajrMinus.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                // Handle the minus button click for Fajr
                handlePrayerTimeMinusButtonClick("Fajr", 5);
                // Save the adjusted time to SharedPreferences
                savePrayerTime("fajr24", fajr24);
                Log.wtf("- Buttons -", "fajrCounter: " + fajrCounter);
                isFajrAddMinutesPressed = true;
                // Update the UI immediately after adjusting the prayer time
                fajr24 = applyAdjustments(fajrOriginal, fajrAdjustment);
                dFajr(fajr24.trim());
                
            }
        });

        // Set click listeners for Zuhar buttons
        btnZuharPlus.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                // Handle the plus button click for Zuhar
                handlePrayerTimePlusButtonClick("Zuhar", 5);
                // Save the adjusted time to SharedPreferences
                savePrayerTime("zuhar24", zuhar24);
                isZuharAddMinutesPressed = true;
                // Update the UI immediately after adjusting the prayer time
                zuhar24 = applyAdjustments(zuharOriginal, zuharAdjustment);
                Log.wtf("- Buttons -", "zuhar24: " + zuhar24);
                dZuhar(zuhar24.trim());
                
            }
        });

        btnZuharMinus.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                // Handle the minus button click for Zuhar
                handlePrayerTimeMinusButtonClick("Zuhar", 5);
                // Save the adjusted time to SharedPreferences
                savePrayerTime("zuhar24", zuhar24);
                isZuharAddMinutesPressed = true;
                // Update the UI immediately after adjusting the prayer time
                zuhar24 = applyAdjustments(zuharOriginal, zuharAdjustment);
                Log.wtf("- Buttons -", "zuhar24: " + zuhar24);

                dZuhar(zuhar24.trim());
                

            }
        });

        // Set click listeners for Asr buttons
        btnAsrPlus.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                // Handle the plus button click for Asr
                handlePrayerTimePlusButtonClick("Asr", 5);
                // Save the adjusted time to SharedPreferences
                savePrayerTime("asr24", asr24);
                isAsrAddMinutesPressed = true;


                // Update the UI immediately after adjusting the prayer time
                asr24 = applyAdjustments(asrOriginal, asrAdjustment);
                Log.wtf("- Buttons -", "asr24: " + asr24);

                dAsr(asr24.trim());


            }
        });

        btnAsrMinus.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                // Handle the minus button click for Asr
                handlePrayerTimeMinusButtonClick("Asr", 5);
                // Save the adjusted time to SharedPreferences
                savePrayerTime("asr24", asr24);
                isAsrAddMinutesPressed = true;
                // Update the UI immediately after adjusting the prayer time
                asr24 = applyAdjustments(asrOriginal, asrAdjustment);
                Log.wtf("- Buttons -", "asr24: " + asr24);

                dAsr(asr24.trim());


            }
        });

        // Set click listeners for Isha buttons
        btnIshaPlus.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                // Handle the plus button click for Isha
                handlePrayerTimePlusButtonClick("Isha", 5);
                // Save the adjusted time to SharedPreferences
                savePrayerTime("isha24", isha24);
                isIshaAddMinutesPressed = true;
                // Update the UI immediately after adjusting the prayer time
                isha24 = applyAdjustments(ishaOriginal, ishaAdjustment);
                Log.wtf("- Buttons -", "isha24: " + isha24);

                dIsha(isha24.trim());


            }
        });

        btnIshaMinus.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                // Handle the minus button click for Isha
                handlePrayerTimeMinusButtonClick("Isha", 5);
                // Save the adjusted time to SharedPreferences
                savePrayerTime("isha24", isha24);
                isIshaAddMinutesPressed = true;
                // Update the UI immediately after adjusting the prayer time
                isha24 = applyAdjustments(ishaOriginal, ishaAdjustment);
                Log.wtf("- Buttons -", "isha24: " + isha24);

                dIsha(isha24.trim());


            }
        });


//         Set click listeners for Maghrib buttons
        btnMaghribPlus.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                try {

                    // Handle the plus button click for Maghrib
//                handlePrayerTimePlusButtonClick("Maghrib");
                isMaghribAddMinutesPressed = true;
//
//                Maghrib = findViewById(R.id.maghrib);
//                String currentValue = maghrib24.toString();

//                    // Parse the value as a LocalTime object with the "H:mm" format
//                    maghribAdded = LocalTime.parse(currentValue, DateTimeFormatter.ofPattern("H:mm"));
//
//                    // Add 5 minutes
//                    maghribAdded = maghribAdded.plusMinutes(1);
//
//                    maghrib24 = maghribAdded.format(DateTimeFormatter.ofPattern("H:mm"));
//
//                    nextMaghrib24 = LocalTime.parse(nextMaghrib, DateTimeFormatter.ofPattern("H:mm"));
//                    nextMaghribTime24 = nextMaghrib24.plusMinutes(1);
//                    nextMaghrib = nextMaghribTime24.format(DateTimeFormatter.ofPattern("H:mm"));
//
//                    // Update the TextView with the new value in the "H:mm" format
//                    Maghrib.setText(maghrib24);
                    handlePrayerTimePlusButtonClick("Maghrib", 1);

                    isMaghribAddition = true;
                    // Save the adjusted times to SharedPreferences
                    savePrayerTime("maghrib24", maghrib24);

                    // Update the UI immediately after adjusting the prayer time
                    maghrib24 = applyAdjustments(maghribOriginal, maghribAdjustment);
                    Log.wtf("- Buttons -", "maghrib24: " + maghrib24);

                    dMaghrib(maghrib24.trim());


                } catch (DateTimeParseException e) {
                    // Handle the parse exception if the current value is not in a valid time format
                    e.printStackTrace();
                    // Display an error message or perform appropriate error handling
                }
            }
        });

        btnMaghribMinus.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                // Handle the minus button click for Maghrib 5 minutes
//                handlePrayerTimeMinusButtonClick("Maghrib");
//                Maghrib = findViewById(R.id.maghrib);
//                String currentValue = maghrib24.toString();

                isMaghribAddMinutesPressed = true;

                try {
                    // Parse the value as a LocalTime object with the "H:mm" format
//                    if (isMaghribDeducted){
////                        maghribAdded;
//
//                    }
//                    maghribAdded = LocalTime.parse(currentValue, DateTimeFormatter.ofPattern("H:mm"));
//
//                    // Add 5 minutes
//                    maghribAdded = maghribAdded.minusMinutes(1);
//
//                    maghrib24 = maghribAdded.format(DateTimeFormatter.ofPattern("H:mm"));
//
//                    nextMaghrib24 = LocalTime.parse(nextMaghrib, DateTimeFormatter.ofPattern("H:mm"));
//                    nextMaghribTime24 = nextMaghrib24.minusMinutes(1);
//                    nextMaghrib = nextMaghribTime24.format(DateTimeFormatter.ofPattern("H:mm"));
//
//                    // Update the TextView with the new value in the "H:mm" format
//                    Maghrib.setText(maghrib24);
                    handlePrayerTimeMinusButtonClick("Maghrib", 1);

                    isMaghribDeducted = true;

                    // Save the adjusted times to SharedPreferences
                    savePrayerTime("maghrib24", maghrib24);
                    // Update the UI immediately after adjusting the prayer time
                    maghrib24 = applyAdjustments(maghribOriginal, maghribAdjustment);
                    Log.wtf("- Buttons -", "maghrib24: " + maghrib24);

                    dMaghrib(maghrib24.trim());


                } catch (DateTimeParseException e) {
                    // Handle the parse exception if the current value is not in a valid time format
                    e.printStackTrace();
                    // Display an error message or perform appropriate error handling
                }



            }
        });


    }




    // *************************************************** Islamic Calendar *****************************************

    @Override
    protected void onStop() {
        super.onStop();
        // Store the current day offset value in SharedPreferences
        SharedPreferences.Editor editor = sharedPreferences.edit();
        editor.putInt("dayOffset", dayOffset);
        editor.apply();
    }

    private void updateIslamicDate() {
        // Get today's date
        Calendar calendar = Calendar.getInstance();
        calendar.add(Calendar.DAY_OF_MONTH, dayOffset); // Apply the day offset
        int year = calendar.get(Calendar.YEAR);
        int month = calendar.get(Calendar.MONTH) + 1;
        int day = calendar.get(Calendar.DAY_OF_MONTH);
        DateTimeFormatter FajrinputFormat = DateTimeFormatter.ofPattern("H:mm"); // Assuming the prayer times are in 12-hour format

        // Get the current time in 24-hour format
        LocalTime currentTime = LocalTime.now(ZoneId.systemDefault());
        String currentTime24 = currentTime.format(DateTimeFormatter.ofPattern("H:mm"));

        // Split the Maghrib time and current time to extract hours and minutes
        String[] maghribParts = maghrib24.split(":");
        String[] currentTimeParts = currentTime24.split(":");

        int maghribHour = Integer.parseInt(maghribParts[0]);
        int maghribMinute = Integer.parseInt(maghribParts[1]);

        int currentHour = Integer.parseInt(currentTimeParts[0]);
        int currentMinute = Integer.parseInt(currentTimeParts[1]);

        // Get the current date and time
        LocalDate currentDate = LocalDate.now();
        LocalDateTime currentDateTime = LocalDateTime.of(currentDate, currentTime);

        // Check if it is after the Maghrib prayer time
        LocalTime maghribTime = LocalTime.parse(isha24, FajrinputFormat);
        LocalDateTime maghribDateTime = LocalDateTime.of(currentDate, maghribTime);

        if (currentDateTime.isAfter(maghribDateTime)) {
            day++;
        }

        // Check if the Gregorian date is valid
        try {
            LocalDate.of(year, month, day);
        } catch (DateTimeException e) {
            // Handle the invalid date
            Log.e("My Activity", "Invalid Gregorian date: " + year + "-" + month + "-" + day);
            return;
        }

        // Convert the Gregorian date to an Islamic date
        HijrahDate islamicDate = HijrahChronology.INSTANCE.date(LocalDate.of(year, month, day));

        // Extract the Islamic date components
        int islamicYear = islamicDate.get(ChronoField.YEAR_OF_ERA);
        int islamicMonth = islamicDate.get(ChronoField.MONTH_OF_YEAR);
        int islamicDay = islamicDate.get(ChronoField.DAY_OF_MONTH);

        // Check if the Islamic date is valid
        if (islamicDay > islamicDate.lengthOfMonth()) {
            // Adjust the Islamic date to the next valid date
            islamicDay = 1;
            islamicMonth++;

            // Check if the Islamic month is valid
            if (islamicMonth > 12) {
                islamicMonth = 1;
                islamicYear++;
            }

            // Update the Islamic date object with the adjusted values
            islamicDate = HijrahChronology.INSTANCE.date(islamicYear, islamicMonth, islamicDay);
        }

        // Define a custom array of Islamic month lengths
        int[] islamicMonthLengths = {
                30, // Muharram
                29, // Safar
                30, // Rabi' al-awwal
                29, // Rabi' al-thani
                30, // Jumada al-awwal
                29, // Jumada al-thani
                30, // Rajab
                29, // Sha'ban
                30, // Ramadan
                29, // Shawwal
                30, // Dhu al-Qi'dah
                29  // Dhu al-Hijjah
        };
        // Define a custom array of Islamic month names
        String[] islamicMonthNames = {
                "Muharram", "Safar", "Rabi' al-Awwal", "Rabi' al-Thani",
                "Jumada al-Ula", "Jumada al-Akhirah", "Rajab", "Sha'ban",
                "Ramadan", "Shawwal", "Dhu al-Qidah", "Dhu al-Hijjah"
        };


        // Get the length of the current Islamic month
        int currentIslamicMonthLength = islamicMonthLengths[islamicMonth - 1]; // Adjust for 0-based indexing

        // Format the Islamic date as a string
        String islamicDateStr = islamicDay + " " + islamicMonthNames[islamicMonth - 1] + " " + islamicYear;

        // Log the current moon phase and Hijri day offset
        Log.d("MoonPhaseView", "Current moon phase: " + islamicDay);
        Log.d("MoonPhaseView", "Hijri day offset: " + islamicDay);

        // Get the resource name based on the phase index
        String resourceName = "moon" + islamicDay;

        // Get the resource ID based on the resource name
        int resourceId = getResources().getIdentifier(resourceName, "drawable", getPackageName());

        // Set the moon phase image as the ImageView's source
        moonImageView.setImageResource(resourceId);

        // Display the Islamic date on the TextView
        islamicDateTextView.setText(islamicDateStr);
    }

    private void updateIslamicDate23Feb2024_BackupWOrking() {
        // Get today's date
        Calendar calendar = Calendar.getInstance();
        calendar.add(Calendar.DAY_OF_MONTH, dayOffset); // Apply the day offset
        int year = calendar.get(Calendar.YEAR);
        int month = calendar.get(Calendar.MONTH) + 1;
        int day = calendar.get(Calendar.DAY_OF_MONTH);
        DateTimeFormatter FajrinputFormat = DateTimeFormatter.ofPattern("H:mm"); // Assuming the prayer times are in 12-hour format


        // Get the current time in 24-hour format
        LocalTime currentTime = LocalTime.now(ZoneId.systemDefault());
        String currentTime24 = currentTime.format(DateTimeFormatter.ofPattern("H:mm"));

        // Split the Maghrib time and current time to extract hours and minutes
        String[] maghribParts = maghrib24.split(":");
        String[] currentTimeParts = currentTime24.split(":");

        int maghribHour = Integer.parseInt(maghribParts[0]);
        int maghribMinute = Integer.parseInt(maghribParts[1]);

        int currentHour = Integer.parseInt(currentTimeParts[0]);
        int currentMinute = Integer.parseInt(currentTimeParts[1]);


        // Get the current date and time
        LocalDate currentDate = LocalDate.now();
        LocalDateTime currentDateTime = LocalDateTime.of(currentDate, currentTime);

        // Check if it is after the Maghrib prayer time
        LocalTime maghribTime = LocalTime.parse(isha24, FajrinputFormat);
        LocalDateTime maghribDateTime = LocalDateTime.of(currentDate, maghribTime);

        if (currentDateTime.isAfter(maghribDateTime)) {
            day++;
        }


        // Check if the current time is after Maghrib
//        if (currentHour > maghribHour || (currentHour == maghribHour && currentMinute >= maghribMinute)) {
//            // Increment the day by 1
//            day++;
//        }

        // Check if the Gregorian date is valid
        try {
            LocalDate.of(year, month, day);
        } catch (DateTimeException e) {
            // Handle the invalid date
            Log.e("My Activity", "Invalid Gregorian date: " + year + "-" + month + "-" + day);
            return;
        }


        // Convert the Gregorian date to an Islamic date
        HijrahDate islamicDate = HijrahChronology.INSTANCE.date(LocalDate.of(year, month, day));

        // Extract the Islamic date components
        int islamicYear = islamicDate.get(ChronoField.YEAR_OF_ERA);
        int islamicMonth = islamicDate.get(ChronoField.MONTH_OF_YEAR);
        int islamicDay = islamicDate.get(ChronoField.DAY_OF_MONTH);

        // Check if the Islamic date is valid
        if (islamicDay > islamicDate.lengthOfMonth()) {
            // Adjust the Islamic date to the next valid date
            islamicDay = 1;
            islamicMonth++;

            // Check if the Islamic month is valid
            if (islamicMonth > 12) {
                islamicMonth = 1;
                islamicYear++;
            }

            // Update the Islamic date object with the adjusted values
            islamicDate = HijrahChronology.INSTANCE.date(islamicYear, islamicMonth, islamicDay);
        }

//        // Convert the Gregorian date to an Islamic date
//        HijrahDate islamicDate = HijrahChronology.INSTANCE.date(LocalDate.of(year, month, day));

//        // Extract the Islamic date components
//        int islamicYear = islamicDate.get(ChronoField.YEAR_OF_ERA);
//        int islamicMonth = islamicDate.get(ChronoField.MONTH_OF_YEAR);
//        int islamicDay = islamicDate.get(ChronoField.DAY_OF_MONTH);
//



        // Define a custom array of Islamic month lengths
//        int[] islamicMonthLengths = { 30, 29, 30, 29, 30, 29, 30, 29, 30, 29, 30, 29 };

        int[] islamicMonthLengths = {
                30, // Muharram
                29, // Safar
                30, // Rabi' al-awwal
                29, // Rabi' al-thani
                30, // Jumada al-awwal
                29, // Jumada al-thani
                30, // Rajab
                29, // Sha'ban
                30, // Ramadan
                29, // Shawwal
                30, // Dhu al-Qi'dah
                29  // Dhu al-Hijjah
        };


        // Define a custom array of Islamic month names
        String[] islamicMonthNames = {
                "Muharram", "Safar", "Rabi' al-Awwal", "Rabi' al-Thani",
                "Jumada al-Ula", "Jumada al-Akhirah", "Rajab", "Sha'ban",
                "Ramadan", "Shawwal", "Dhu al-Qidah", "Dhu al-Hijjah"
        };

//        // Get the name of the Islamic month
//        String islamicMonthName = islamicMonthNames[islamicMonth - 1]; // Adjust for 0-based indexing
//
//        // Format the Islamic date as a string
//        String islamicDateStr = islamicDay + " " + islamicMonthName + " " + islamicYear;
//
//
//

        // Log the current moon phase and Hijri day offset
        Log.d("MoonPhaseView", "Current moon phase: " + islamicDay);
        Log.d("MoonPhaseView", "Hijri day offset: " + islamicDay);


        // Get the resource name based on the phase index
        String resourceName = "moon" + islamicDay;

        // Get the resource ID based on the resource name
        int resourceId = getResources().getIdentifier(resourceName, "drawable", getPackageName());

        // Set the moon phase image as the ImageView's source
        moonImageView.setImageResource(resourceId);

        // Format the Islamic date as a string
        String islamicDateStr = islamicDay + " " + islamicMonthNames[islamicMonth - 1] + " " + islamicYear;


        // Display the Islamic date on the TextView
        islamicDateTextView.setText(islamicDateStr);


    }

    private void setMoonPhaseImage(int phaseIndex) {
        // Get the resource ID based on the moon phase
        int resourceId = getResources().getIdentifier("moon" + (phaseIndex + 1), "drawable", getPackageName());

        // Set the moon phase image as the ImageView's source
        moonImageView.setImageResource(resourceId);
    }

    // --------------------------- Islamic Date -------------------------------------------------
    private void updateIslamicDateOriginal() {
        try {
            // Get today's date
            LocalDate currentDate = LocalDate.now(ZoneId.systemDefault()).plusDays(dayOffset); // Adjust the day offset

            // Convert the Gregorian date to an Islamic date
            HijrahDate islamicDate = HijrahChronology.INSTANCE.date(currentDate);

            // Extract the Islamic date components
            int islamicYear = islamicDate.get(ChronoField.YEAR_OF_ERA);
            int islamicMonth = islamicDate.get(ChronoField.MONTH_OF_YEAR);
            int islamicDay = islamicDate.get(ChronoField.DAY_OF_MONTH);

            // Check if the Islamic date is valid
            if (islamicDay > islamicDate.lengthOfMonth()) {
                // Adjust the Islamic date to the next valid date
                islamicDay = 1;
                islamicMonth++;

                // Check if the Islamic month is valid
                if (islamicMonth > 12) {
                    islamicMonth = 1;
                    islamicYear++;
                }

                // Update the Islamic date object with the adjusted values
                islamicDate = HijrahChronology.INSTANCE.date(LocalDate.of(islamicYear, islamicMonth, islamicDay));
            }

            // Continue with the rest of the code...

            // Define a custom array of Islamic month lengths
            int[] islamicMonthLengths = { 30, 29, 30, 29, 30, 29, 30, 29, 30, 29, 30, 29 };

            // Define a custom array of Islamic month names
            String[] islamicMonthNames = {
                    "Muharram", "Safar", "Rabi' al-Awwal", "Rabi' al-Thani",
                    "Jumada al-Ula", "Jumada al-Akhirah", "Rajab", "Sha'ban",
                    "Ramadan", "Shawwal", "Dhu al-Qidah", "Dhu al-Hijjah"
            };

            // Log the current moon phase and Hijri day offset
            Log.d("MoonPhaseView", "Current moon phase: " + islamicDay);
            Log.d("MoonPhaseView", "Hijri day offset: " + islamicDay);

            // Get the resource name based on the phase index
            String resourceName = "moon" + islamicDay;

            // Get the resource ID based on the resource name
            int resourceId = getResources().getIdentifier(resourceName, "drawable", getPackageName());

            // Set the moon phase image as the ImageView's source
            moonImageView.setImageResource(resourceId);

            // Format the Islamic date as a string
            String islamicDateStr = islamicDay + " " + islamicMonthNames[islamicMonth - 1] + " " + islamicYear;

            // Display the Islamic date on the TextView
            islamicDateTextView.setText(islamicDateStr);

        } catch (DateTimeException e) {
            // Handle the invalid date
            Log.e("My Activity", "Error updating Islamic date: " + e.getMessage());
        }
    }

    private void setMoonPhaseImageOriginal(int phaseIndex) {
        // Get the resource ID based on the moon phase
        int resourceId = getResources().getIdentifier("moon" + (phaseIndex + 1), "drawable", getPackageName());

        // Set the moon phase image as the ImageView's source
        moonImageView.setImageResource(resourceId);
    }


    private int calculateMoonPhase(int dayOfMonth) {
        // Define the moon phase interval (in days)
        int interval = 30;

        // Calculate the phase index based on the day of the month
        int phaseIndex = (dayOfMonth - 1) % interval;

        return phaseIndex;
    }



    // ======================================= File Picker Dialog =======================================
    private String getPathFromUri(Uri uri) {
        // Implement the logic to convert the Uri to a file path using the ContentResolver
        // This approach is similar to the third option mentioned in the previous response
        path = null;
        try (Cursor cursor = getContentResolver().query(uri, null, null, null, null)) {
            if (cursor != null && cursor.moveToFirst()) {
                int columnIndex = cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
                path = cursor.getString(columnIndex);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return path;
    }

// ****************************************** Addition And Removal of Times ***********************
// ***************************************** O R I G I O N A L Buttons *************************
    // Method to handle the plus button click for a prayer time
//    private void handlePrayerTimePlusButtonClick(String prayerTime, int adjustmentMinutes) {
//        switch (prayerTime) {
//            case "Fajr":
//                fajrAdd += adjustmentMinutes;
//                // Update fajrAdded with the modified time
////                fajrAdded = LocalTime.parse(fajr24, DateTimeFormatter.ofPattern("H:mm")).plusMinutes(fajrAdd);
////                dFajr(fajrAdded.format(DateTimeFormatter.ofPattern("H:mm")).toString());
//
//                fajrCounter++;
////                if (fajrCounter >= 0) {
////                    fajrAdd += adjustmentMinutes;
////                }
////                if (fajrCounter == 0) {
////                    fajrAdd = 0;
////                }
//                handleAddMinutesButtonClick(prayerTime, fajr24, fajrCounter, adjustmentMinutes);
//                break;
//            case "Zuhar":
//                zuharCounter++;
////                if (zuharCounter >= 0) {
////                    zuharAdd += adjustmentMinutes;
////                }
////                if (zuharCounter == 0) {
////                    zuharAdd = 0;
////                }
//                zuharAdd += adjustmentMinutes;
////                zuharAdded = LocalTime.parse(zuhar24, DateTimeFormatter.ofPattern("H:mm")).plusMinutes(zuharAdd);
////                dZuhar(zuharAdded.format(DateTimeFormatter.ofPattern("H:mm")).toString());
//
//                handleAddMinutesButtonClick(prayerTime, zuhar24, zuharCounter, adjustmentMinutes);
//                break;
//            case "Asr":
//                asrCounter++;
////                if (asrCounter >= 0) {
////                    asrAdd += adjustmentMinutes;
////                }
////                if (asrCounter == 0) {
////                    asrAdd = 0;
////                }
//
//                asrAdd += adjustmentMinutes;
////                asrAdded = LocalTime.parse(asr24, DateTimeFormatter.ofPattern("H:mm")).plusMinutes(asrAdd);
////                dAsr(asrAdded.format(DateTimeFormatter.ofPattern("H:mm")).toString());
//
//                handleAddMinutesButtonClick(prayerTime, asr24, asrCounter, adjustmentMinutes);
//                break;
//            case "Maghrib":
////                maghribCounter++;
//////                if (maghribCounter >= 0) {
//////                    maghribAdd += adjustmentMinutes;
//////                }
//////                if (maghribCounter == 0) {
//////                    maghribAdd = 0;
//////                }
////                maghribAdd += adjustmentMinutes;
//////                maghribAdded = LocalTime.parse(maghrib24, DateTimeFormatter.ofPattern("H:mm")).plusMinutes(maghribAdd);
//////                dMaghrib(maghribAdded.format(DateTimeFormatter.ofPattern("H:mm")).toString());
////
////
////                handleAddMinutesButtonClick(prayerTime, maghrib24, maghribCounter, adjustmentMinutes);
//
//                // ----  New ---
//                LocalTime addedPrayerTimeLocal = null;
//
//
//                maghribAdd++;
//                maghribAdded = LocalTime.parse(maghrib24, DateTimeFormatter.ofPattern("H:mm")).plusMinutes(maghribAdd);
////                dMaghrib(maghribAdded.format(DateTimeFormatter.ofPattern("H:mm")).toString());
//
//                // Add 1 minute
//                addedPrayerTimeLocal = LocalTime.parse(maghrib24, DateTimeFormatter.ofPattern("H:mm")).plusMinutes(adjustmentMinutes);
//                maghrib24 = addedPrayerTimeLocal.format(DateTimeFormatter.ofPattern("H:mm"));
//
//                nextMaghrib24 = LocalTime.parse(nextMaghrib, DateTimeFormatter.ofPattern("H:mm")).plusMinutes(adjustmentMinutes);
//                nextMaghrib = nextMaghrib24.format(DateTimeFormatter.ofPattern("H:mm"));
//
//                // Assign 1 minute to the next day
//                nextMaghrib24 = LocalTime.parse(nextMaghrib, DateTimeFormatter.ofPattern("H:mm"));
//                nextMaghribTime24 = nextMaghrib24.plusMinutes(adjustmentMinutes);
//                nextMaghrib = nextMaghribTime24.format(DateTimeFormatter.ofPattern("H:mm"));
//
//
//
//
//                break;
//            case "Isha":
//
//                ishaAdd  += adjustmentMinutes;
//                ishaCounter++;
////                if (ishaCounter >= 0) {
////                    ishaAdd += adjustmentMinutes;
////                }
////                if (ishaCounter == 0) {
////                    ishaAdd = 0;
////                }
//
////                ishaAdded = LocalTime.parse(isha24, DateTimeFormatter.ofPattern("H:mm")).plusMinutes(ishaAdd);
////                dIsha(ishaAdded.format(DateTimeFormatter.ofPattern("H:mm")).toString());
//
//                handleAddMinutesButtonClick(prayerTime, isha24, ishaCounter, adjustmentMinutes);
//                break;
//        }
//
//        // Save the adjusted times to SharedPreferences
//        savePrayerTime("fajr24", fajr24);
//        savePrayerTime("zuhar24", zuhar24);
//        savePrayerTime("asr24", asr24);
//        savePrayerTime("maghrib24", maghrib24);
//        savePrayerTime("isha24", isha24);
//
//    }
//
//    // Method to handle the minus button click for a prayer time
//// Method to handle the minus button click for a prayer time
//    private void handlePrayerTimeMinusButtonClick(String prayerTime, int adjustmentMinutes) {
//
//        try {
//
//            // Declare addedPrayerTimeLocal here
//            LocalTime addedPrayerTimeLocal = null;
//
//            switch (prayerTime) {
//                case "Fajr":
//                    fajrCounter--;
//                    fajrAdd -= adjustmentMinutes;
////                fajrAdded = LocalTime.parse(fajr24, DateTimeFormatter.ofPattern("H:mm")).minusMinutes(fajrAdd);
////                dFajr(fajrAdded.format(DateTimeFormatter.ofPattern("H:mm")).toString());
//
//                    handleMinusMinutesButtonClick(prayerTime, fajr24, fajrAdd);
//
////                if (fajrCounter >= 0) {
////                    fajrAdd -= adjustmentMinutes;
////                }
////                if (fajrCounter == 0) {
////                    fajrAdd = 0;
////                }
//                    break;
//
//                case "Zuhar":
//                    zuharCounter--;
//
//                    zuharAdd -= adjustmentMinutes;
////                zuharAdded = LocalTime.parse(zuhar24, DateTimeFormatter.ofPattern("H:mm")).plusMinutes(zuharAdd);
////                dZuhar(zuharAdded.format(DateTimeFormatter.ofPattern("H:mm")).toString());
//
//                    handleMinusMinutesButtonClick(prayerTime, zuhar24, zuharAdd);
////                if (zuharCounter >= 0) {
////                    zuharAdd -= adjustmentMinutes;
////                }
////                if (zuharCounter == 0) {
////                    zuharAdd = 0;
////                }
//                    break;
//
//                case "Asr":
//                    asrCounter--;
//
//                    asrAdd -= adjustmentMinutes;
////                asrAdded = LocalTime.parse(asr24, DateTimeFormatter.ofPattern("H:mm")).minusMinutes(asrAdd);
////                dAsr(asrAdded.format(DateTimeFormatter.ofPattern("H:mm")).toString());
//
//                    handleMinusMinutesButtonClick(prayerTime, asr24, asrAdd);
////                if (asrCounter >= 0) {
////                    asrAdd -= adjustmentMinutes;
////                }
////                if (asrCounter == 0) {
////                    asrAdd = 0;
////                }
//                    break;
//
//                case "Maghrib":
//
//                    maghribCounter--;
//                    maghribAdd -= adjustmentMinutes;
//                    maghribAdded = LocalTime.parse(maghrib24, DateTimeFormatter.ofPattern("H:mm")).plusMinutes(maghribAdd);
////                dMaghrib(maghribAdded.format(DateTimeFormatter.ofPattern("H:mm")).toString());
//
//                    // Add 1 minute
//                    addedPrayerTimeLocal = LocalTime.parse(maghrib24, DateTimeFormatter.ofPattern("H:mm")).minusMinutes(adjustmentMinutes);
//                    maghrib24 = addedPrayerTimeLocal.format(DateTimeFormatter.ofPattern("H:mm"));
//
//                    nextMaghrib24 = LocalTime.parse(nextMaghrib, DateTimeFormatter.ofPattern("H:mm")).minusMinutes(adjustmentMinutes);
//                    nextMaghrib = nextMaghrib24.format(DateTimeFormatter.ofPattern("H:mm"));
//
//                    // Assign 1 minute to the next day
//                    nextMaghrib24 = LocalTime.parse(nextMaghrib, DateTimeFormatter.ofPattern("H:mm"));
//                    nextMaghribTime24 = nextMaghrib24.plusMinutes(adjustmentMinutes);
//                    nextMaghrib = nextMaghribTime24.format(DateTimeFormatter.ofPattern("H:mm"));
//
//                    break;
//
//                case "Isha":
//                    ishaCounter--;
//
//                    ishaAdd -= adjustmentMinutes;
////                ishaAdded = LocalTime.parse(isha24, DateTimeFormatter.ofPattern("H:mm")).minusMinutes(ishaAdd);
////                dIsha(ishaAdded.format(DateTimeFormatter.ofPattern("H:mm")).toString());
//
//                    handleMinusMinutesButtonClick(prayerTime, isha24, ishaAdd);
////                if (ishaCounter >= 0) {
////                    ishaAdd -= adjustmentMinutes;
////                }
////                if (ishaCounter == 0) {
////                    ishaAdd = 0;
////                }
//                    break;
//            }
//
//            // Save the adjusted times to SharedPreferences
//            savePrayerTime("fajr24", fajr24);
//            savePrayerTime("zuhar24", zuhar24);
//            savePrayerTime("asr24", asr24);
//            savePrayerTime("maghrib24", maghrib24);
//            savePrayerTime("isha24", isha24);
//
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//
//
//    }
//


    // ------------------------------------ ORIGINAL Buttons logic end


// Modify handlePrayerTimePlusButtonClick and handlePrayerTimeMinusButtonClick to apply adjustments separately

    private void handlePrayerTimePlusButtonClick(String prayerTime, int adjustmentMinutes) {
        switch (prayerTime) {
            case "Fajr":
                fajrAdjustment += adjustmentMinutes;
                break;
            case "Zuhar":
                zuharAdjustment += adjustmentMinutes;
                break;
            case "Asr":
                asrAdjustment += adjustmentMinutes;
                break;
            case "Maghrib":
                maghribAdjustment += adjustmentMinutes;
                break;
            case "Isha":
                ishaAdjustment += adjustmentMinutes;
                break;
        }
//        AddMinutes();

        // Save the adjustments to SharedPreferences
        saveAdjustments();
    }

    private void handlePrayerTimeMinusButtonClick(String prayerTime, int adjustmentMinutes) {
        switch (prayerTime) {
            case "Fajr":
                fajrAdjustment -= adjustmentMinutes;
                break;
            case "Zuhar":
                zuharAdjustment -= adjustmentMinutes;
                break;
            case "Asr":
                asrAdjustment -= adjustmentMinutes;
                break;
            case "Maghrib":
                maghribAdjustment -= adjustmentMinutes;
                break;
            case "Isha":
                ishaAdjustment -= adjustmentMinutes;
                break;
        }
//        AddMinutes();

        // Save the adjustments to SharedPreferences
        saveAdjustments();
    }
    // Helper method to apply adjustments to original times
    private String applyAdjustments(String originalTime, int adjustmentMinutes) {
        LocalTime time = LocalTime.parse(originalTime, DateTimeFormatter.ofPattern("H:mm"));
        time = time.plusMinutes(adjustmentMinutes);
        return time.format(DateTimeFormatter.ofPattern("H:mm"));
    }

    private void savePrayerTime(String prayerTimeKey, String prayerTimeValue) {
        SharedPreferences sharedPreferences = getSharedPreferences("PrayerTimes", MODE_PRIVATE);
        SharedPreferences.Editor editor = sharedPreferences.edit();
        editor.putString(prayerTimeKey, prayerTimeValue);
        editor.apply();
    }

    private void saveAdjustments() {
        SharedPreferences sharedPreferences = getSharedPreferences("PrayerAdjustments", MODE_PRIVATE);
        SharedPreferences.Editor editor = sharedPreferences.edit();
        editor.putInt("fajrAdjustment", fajrAdjustment);
        editor.putInt("zuharAdjustment", zuharAdjustment);
        editor.putInt("asrAdjustment", asrAdjustment);
        editor.putInt("maghribAdjustment", maghribAdjustment);
        editor.putInt("ishaAdjustment", ishaAdjustment);
        editor.apply();
    }


    // ============================================= Scroll IT  =======================================

    public void scrollIt() {
        long currentTime = System.currentTimeMillis();

        // Safety mechanism to ensure it doesn't run more frequently than once per second
        if (currentTime - lastScrollTime < SCROLL_INTERVAL) {
            // If less than 1 second has passed since the last execution, do nothing
            return;
        }

        lastScrollTime = currentTime;

        try {
            // Enable the marquee effect
            scrollingBox.setSelected(true);
            scrollingBox.setEllipsize(TextUtils.TruncateAt.MARQUEE);
            scrollingBox.setMarqueeRepeatLimit(-1); // Set the repeat limit to infinite (-1) or a desired number
            scrollingBox.setHorizontallyScrolling(true); // Enable horizontal scrolling

            // Optionally, you can adjust the scroll speed
            scrollingBox.setHorizontallyScrolling(true);
            scrollingBox.setSingleLine(true);
            scrollingBox.setFocusableInTouchMode(true);
            scrollingBox.setFocusable(true);
            scrollingBox.requestFocus();

            // For One message.
            // Set the text to be displayed in the scrollingBox
            String textToScroll = "Kindly donate, even if it is 5 Euros per week that will help your community a lot, please pay by cash, by QR code or by Bank transfer (please see IBAN info). Kindly help in keeping your local mosque clean and do not throw any litter throughout mosque premisses. Please share the donation link/info with others! JazakAllah Khair. It is better to do Zikr or read Quran, than chatting with others whilst in the mosque.";
            scrollingBox.setText(textToScroll);

            // FOr array messages
            //        final String[] textsToScroll =
            //            {
            //                "It has been related that: the Prophet said: Whoever builds a Masjid for (the sake of) Allah, be it small or large, " +
            //                        "then Allah will build a house for him in Paradise. Reference: Jami` at-Tirmidhi 319" +
            //                        "In-book reference: Book 2, Hadith 171, English translation : Vol. 1, Book 2, Hadith 319",
            //                "When 'Uthman b. 'Affan intended to build the mosque (of the Prophet) the people did not approve of it. They liked that " +
            //                        "it should be kept in the same state. Thereupon he said: I heard the Messenger of Allah (ﷺ) say: He who built a " +
            //                        "mosque for Allah, Allah would build a house for him like it in Paradise. Reference: Sahih Muslim 533b" +
            //                        "In-book reference: Book 5, Hadith 30 USC-MSA web (English) reference : Book 4, Hadith 1085",
            //                "Samurah reported that he wrote (a letter) to his sons: After (praising Allah and blessing the Prophet) that: The Messenger of #" +
            //                        "Allah (ﷺ) used to command us to build mosques in our localities and keep them well and clean. Grade: Sahih (Al-Albani), Reference : Sunan Abi Dawud 456" +
            //                        "In-book reference: Book 2, Hadith 66" +
            //                        "English translation: Book 2, Hadith 456",
            //                "Allah's Messenger (ﷺ) (p.b.u.h) said, Anyone who takes a bath on Friday and cleans himself as much as he can and puts oil (on his hair) or scents himself; " +
            //                        "and then proceeds for the prayer and does not force his way between two persons" +
            //                        "(assembled in the mosque for the Friday prayer), and prays as much as is written for him and " +
            //                        "remains quiet when the Imam delivers the Khutba, all his sins in between the present and the last Friday will be forgiven."+
            //                "Reference : Sahih al-Bukhari 910" +
            //                        "In-book reference\t : Book 11, Hadith 34" +
            //                        "USC-MSA web (English) reference: Vol. 2, Book 13, Hadith 33" +
            //                        "(deprecated numbering scheme)",
            // Add more texts as needed
            //        };

            // Call the animation for Throbbing...
            //        NoticeIDThrobbing();


            // Start the marquee scrolling
            scrollingBox.postDelayed(new Runnable() {
                @Override
                public void run() {
                    scrollingBox.setSelected(true);
                }
            }, 1000); // Delay in milliseconds before the scrolling starts
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void scrollItOriginal1March2024() {
        try {

// Enable the marquee effect
        scrollingBox.setSelected(true);
        scrollingBox.setEllipsize(TextUtils.TruncateAt.MARQUEE);
        scrollingBox.setMarqueeRepeatLimit(-1); // Set the repeat limit to infinite (-1) or a desired number
        scrollingBox.setHorizontallyScrolling(true); // Enable horizontal scrolling

// Optionally, you can adjust the scroll speed
        scrollingBox.setHorizontallyScrolling(true);
        scrollingBox.setSingleLine(true);
        scrollingBox.setFocusableInTouchMode(true);
        scrollingBox.setFocusable(true);
        scrollingBox.requestFocus();

        // For One message.
        // Set the text to be displayed in the scrollingBox
        String textToScroll = "Kindly donate, even if it is 5 Euros per week that will help your community a lot, please pay by cash, by QR code or by Bank transfer (please see IBAN info). Kindly help in keeping your local mosque clean and do not throw any litter throughout mosque premisses. Please share the donation link/info with others! JazakAllah Khair. It is better to do Zikr or read Quran, than chatting with others whilst in the mosque.";
        scrollingBox.setText(textToScroll);

        // FOr array messages
//        final String[] textsToScroll =
            {
//                "It has been related that: the Prophet said: Whoever builds a Masjid for (the sake of) Allah, be it small or large, " +
//                        "then Allah will build a house for him in Paradise. Reference: Jami` at-Tirmidhi 319" +
//                        "In-book reference: Book 2, Hadith 171, English translation : Vol. 1, Book 2, Hadith 319",
//                "When 'Uthman b. 'Affan intended to build the mosque (of the Prophet) the people did not approve of it. They liked that " +
//                        "it should be kept in the same state. Thereupon he said: I heard the Messenger of Allah (ﷺ) say: He who built a " +
//                        "mosque for Allah, Allah would build a house for him like it in Paradise. Reference: Sahih Muslim 533b" +
//                        "In-book reference: Book 5, Hadith 30 USC-MSA web (English) reference : Book 4, Hadith 1085",
//                "Samurah reported that he wrote (a letter) to his sons: After (praising Allah and blessing the Prophet) that: The Messenger of #" +
//                        "Allah (ﷺ) used to command us to build mosques in our localities and keep them well and clean. Grade: Sahih (Al-Albani), Reference : Sunan Abi Dawud 456" +
//                        "In-book reference: Book 2, Hadith 66" +
//                        "English translation: Book 2, Hadith 456",
//                "Allah's Messenger (ﷺ) (p.b.u.h) said, Anyone who takes a bath on Friday and cleans himself as much as he can and puts oil (on his hair) or scents himself; " +
//                        "and then proceeds for the prayer and does not force his way between two persons" +
//                        "(assembled in the mosque for the Friday prayer), and prays as much as is written for him and " +
//                        "remains quiet when the Imam delivers the Khutba, all his sins in between the present and the last Friday will be forgiven."+
//                "Reference : Sahih al-Bukhari 910" +
//                        "In-book reference\t : Book 11, Hadith 34" +
//                        "USC-MSA web (English) reference: Vol. 2, Book 13, Hadith 33" +
//                        "(deprecated numbering scheme)",



            // Add more texts as needed
        };







        // Call the animation for Throbbing...
//        NoticeIDThrobbing();


// Start the marquee scrolling
        scrollingBox.postDelayed(new Runnable() {
            @Override
            public void run() {
                scrollingBox.setSelected(true);
            }
        }, 1000); // Delay in milliseconds before the scrolling starts
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void FridayTextColor(){
        // ************************************* Friday text Colour ********************************
        final int[] colorIndex = {0};
        int[] colorArray = {
                Color.GRAY,
//                android.graphics.Color.parseColor("#ded6d5"),  // Light Grey
                Color.parseColor("#3d3938"),  // Light Grey

        };

        Calendar calendar = Calendar.getInstance();
        int dayOfWeek = calendar.get(Calendar.DAY_OF_WEEK);
        int hourOfDay = calendar.get(Calendar.HOUR_OF_DAY);

        if (dayOfWeek == Calendar.FRIDAY && hourOfDay >= 12 && hourOfDay < 14) {

            //         Update the Timeings every set time
            runnable = new Runnable() {
                @SuppressLint("SetText")
                @Override
                public void run() {
                    handler.postDelayed(this, 2000);

                    int nextColorIndex = (colorIndex[0] + 1) % colorArray.length;

                    View yourView = findViewById(R.id.friday);
                    yourView.setBackgroundColor(colorArray[colorIndex[0]]);

                    colorIndex[0] = nextColorIndex;


                }
            };
            handler.postDelayed(runnable, 0);
        }
    }
    private void NoticeIDThrobbing() {
        // Set the initial visibility of textView2 to invisible
        TextView NoticeMessage = findViewById(R.id.Noticeid); // Replace `R.id.textView2` with the actual ID of your TextView
        NoticeMessage.setVisibility(View.INVISIBLE);

// Create an AlphaAnimation for the fade in and out effect
        AlphaAnimation fadeInOutAnimation = new AlphaAnimation(0f, 2f);
        fadeInOutAnimation.setDuration(1000); // Duration for each fade in/out animation
        fadeInOutAnimation.setFillAfter(true);
        fadeInOutAnimation.setRepeatMode(Animation.REVERSE); // Reverse the animation
        fadeInOutAnimation.setRepeatCount(Animation.INFINITE); // Repeat the animation infinitely
        fadeInOutAnimation.setInterpolator(new AccelerateDecelerateInterpolator());


// Create a Handler to schedule the animation
        Handler handler = new Handler();
        handler.postDelayed(new Runnable() {
            @Override
            public void run() {
                NoticeMessage.setVisibility(View.VISIBLE);
                NoticeMessage.startAnimation(fadeInOutAnimation);
            }
        }, 1000); // Delay in milliseconds before starting the animation


    }

    private void replaceFile() {
        // Check if a file has been loaded
        if (mFile == null) {
            Toast.makeText(this, "Please load a file first", Toast.LENGTH_LONG).show();
            return;
        }

        // Read the loaded file and copy its contents to timing.xls
        try {
            FileInputStream inputStream = new FileInputStream(mFile);
            FileOutputStream outputStream = new FileOutputStream(new File(getExternalFilesDir(null), "timing.xls"));
            if (outputStream == null) {
                path = "timings.xls";

            } else {
                path = outputStream.toString();
            }

            byte[] buffer = new byte[6024];
            int length;
            while ((length = inputStream.read(buffer)) > 0) {
                outputStream.write(buffer, 0, length);
            }

            inputStream.close();
            outputStream.close();

            Toast.makeText(this, "File has been replaced", Toast.LENGTH_LONG).show();

        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }


    private void SetTimes() {

        CharSequence dt1 = DateFormat.format("EEE", d.getTime());
        Log.wtf("MY ACITVITY", "Day of the Week: " + dt1.toString());


        CharSequence currentdate = DateFormat.format("yyyy-MM-dd HH:mm:ss", d.getTime());
        Log.wtf("My Activity", "current date : " + currentdate);

        friday = "13:30";
        friday24 = currentdate.toString() + friday;
        fridayCheck = dt1.toString();

        Log.wtf("MY ACITVITY", "fridayCheck: " + fridayCheck);
        Log.wtf("MY ACITVITY", "fajr24: " + fajr24);


        if (Objects.equals(fridayCheck, "Fri")) {
            FridayCheck = true;
            Log.wtf("MY ACITVITY", "Current date DT: " + dt1.toString());
            Log.wtf("MY ACITVITY", "Friday Check matched");
        }
    }


    // ========== change friday timings  ==========

    private void ChangeFridayTiming() {
        {


        }
    }

    private void hidePrayerButtons() {


        btnFajrPlus.setVisibility(View.GONE);
        btnFajrMinus.setVisibility(View.GONE);

        btnZuharPlus.setVisibility(View.GONE);
        btnZuharMinus.setVisibility(View.GONE);
        btnAsrPlus.setVisibility(View.GONE);
        btnAsrMinus.setVisibility(View.GONE);
        btnMaghribPlus.setVisibility(View.GONE);
        btnMaghribMinus.setVisibility(View.GONE);
        btnIshaPlus.setVisibility(View.GONE);
        btnIshaMinus.setVisibility(View.GONE);

        btnFridayPlus.setVisibility(View.GONE);
        btnFridayMinus.setVisibility(View.GONE);

        btnNotice.setVisibility(View.GONE);
        btnLoad.setVisibility(View.GONE);
        btnRefresh.setVisibility(View.GONE);

//        hoursView.setVisibility(View.GONE);
//        minutesView.setVisibility(View.GONE);
//        secondsView.setVisibility(View.GONE);

        btnHijriPlus.setVisibility(View.GONE);
        btnHijriMinus.setVisibility(View.GONE);

        IBANBox.setVisibility(View.VISIBLE);
        scrollingBox.setVisibility(View.VISIBLE);




        // Set flag
        isPrayerButtonsVisible = false;
    }

    private void showPrayerButtons() {
        btnFajrPlus.setVisibility(View.VISIBLE);
        btnFajrMinus.setVisibility(View.VISIBLE);

        btnZuharPlus.setVisibility(View.VISIBLE);
        btnZuharMinus.setVisibility(View.VISIBLE);
        btnAsrPlus.setVisibility(View.VISIBLE);
        btnAsrMinus.setVisibility(View.VISIBLE);
        btnMaghribPlus.setVisibility(View.VISIBLE);
        btnMaghribMinus.setVisibility(View.VISIBLE);
        btnIshaPlus.setVisibility(View.VISIBLE);
        btnIshaMinus.setVisibility(View.VISIBLE);

        btnFridayPlus.setVisibility(View.VISIBLE);
        btnFridayMinus.setVisibility(View.VISIBLE);

//        btnNotice.setVisibility(View.VISIBLE);
        btnLoad.setVisibility(View.VISIBLE);
        btnRefresh.setVisibility(View.VISIBLE);


//        hoursView.setVisibility(View.VISIBLE);
//        minutesView.setVisibility(View.VISIBLE);
//        secondsView.setVisibility(View.VISIBLE);

        NoticeText.setVisibility(View.VISIBLE);

        btnHijriPlus.setVisibility(View.VISIBLE);
        btnHijriMinus.setVisibility(View.VISIBLE);


        // Bring them back if All other are hidden
        IBANBox.setVisibility(View.GONE);
        scrollingBox.setVisibility(View.GONE);



        // Show other prayer buttons up to Isha
        isPrayerButtonsVisible = true;
    }


    private void UI() {

        fajrLable = findViewById(R.id.fajrLabel);
        zuharLable = findViewById(R.id.zuharLabel);
        asrLable = findViewById(R.id.asrLabel);
        maghribLable = findViewById(R.id.maghribLabel);
        ishaLable = findViewById(R.id.ishaLabel);


        dialog = new AlertDialog.Builder(this).create();
        editText = new EditText(this);
        dialog.setTitle("Edit The Notice");
        dialog.setView(editText);


    }


    // refresh UI
    private void Refresh() {
        Refreshbtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                UI();
                ChangeNotice();
                ChangeFridayTiming();
//                countDownStart();
                Refresh = true;
                toastMessage("Refreshed");


            }
        });
    }

    // Change Mosque notice board message.
    private void ChangeNotice() {
        Noticebutton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                AlertDialog.Builder mydialog = new AlertDialog.Builder(MainActivity.this);
                mydialog.setTitle("Edit Notice!");

                final EditText editText = new EditText(MainActivity.this);
                mydialog.setView(editText);

                mydialog.setPositiveButton("Save", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialogInterface, int i) {
                        Notice = editText.getText().toString();
                        NoticeText.setText(Notice);
                        Toast.makeText(MainActivity.this, "Notice Changed!!", Toast.LENGTH_LONG).show();

                    }
                });
                mydialog.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialogInterface, int i) {
                        dialogInterface.cancel();
                    }
                });
                mydialog.show();

            }
        });

    }


    public void dFajr(String value) {
        Fajr = findViewById(R.id.fajr);
        Fajr.setText(value);
    }


    public void dZuhar(String value) {
        Zuhar = findViewById(R.id.zuhar);
        Zuhar.setText(value);
    }

    public void dAsr(String value) {
        Asr = findViewById(R.id.asr);
        Asr.setText(value);
    }

    public void dMaghrib(String value) {
        Maghrib = findViewById(R.id.maghrib);
        Maghrib.setText(value);
    }

    public void dIsha(String value) {
        Isha = findViewById(R.id.isha);
        Isha.setText(value);
    }

    public void Countdowntime(long time) {
        long Hours = time / (60 * 60 * 1000) % 24;
        long Minutes = time / (60 * 1000) % 60;
        long Seconds = time / 1000 % 60;
        @SuppressLint("DefaultLocale") String Hoursst = format("%02d", Hours);
        @SuppressLint("DefaultLocale") String Minutesst = format("%02d", Minutes);
        @SuppressLint("DefaultLocale") String Secondsst = format("%02d", Seconds);

        countdowndt = Hoursst + ":" + Minutesst + ":" + Secondsst;

    }

    private void toastMessage(String message) {
        Toast.makeText(this, message, Toast.LENGTH_LONG).show();
    }


    private void clearBackground() {
        BoxIsha.setBackgroundColor(Color.TRANSPARENT);
        BoxZuhar.setBackgroundColor(Color.TRANSPARENT);
        BoxAsr.setBackgroundColor(Color.TRANSPARENT);
        BoxMaghrib.setBackgroundColor(Color.TRANSPARENT);
        BoxFajr.setBackgroundColor(Color.TRANSPARENT);
    }

    // Define the CalculateTimings() method
    private Runnable calculateTimingsRunnable = new Runnable() {
        @Override
        public void run() {
            CalculateTimings(); // Call the method to update timings
            isCalculateTimingsScheduled = false; // Reset the flag
        }
    };

    //    =================================   Play Field =================================
    public void startUpdatingClockEverySecond() {
        // Create a countdown timer with a tick interval of 1 second (1000 milliseconds)
        new CountDownTimer(Long.MAX_VALUE, 1000) {
            public void onTick(long millisUntilFinished) {

                // Schedule CalculateTimings() only if it's not already scheduled
                if (!isCalculateTimingsScheduled) {
                    handler.postDelayed(calculateTimingsRunnable, DELAY_MILLIS);
                    isCalculateTimingsScheduled = true; // Set the flag
                }

//                CalculateTimings(); // Call the method to update the clock every second
            }
            public void onFinish() {
                // Timer finished (not relevant for updating the clock)
            }
        }.start();
    }

    public void startUpdatingClockEverySecondRUNONUImethod() {
        runOnUiThread(() -> {

            // Create a countdown timer with a tick interval of 1 second (1000 milliseconds)
        new CountDownTimer(Long.MAX_VALUE, 1000) {
            public void onTick(long millisUntilFinished) {

                CalculateTimings(); // Call the method to update the clock every second
            }

            public void onFinish() {
                // Timer finished (not relevant for updating the clock)
            }
        }.start();
        });
    }




    public void NextDayPrayerTimesWORKING() {
        try {
            DateTimeFormatter FajrInputFormat = DateTimeFormatter.ofPattern("H:mm", Locale.ENGLISH);
            String[] updatedPrayerTimes = {nextFajr, nextZuhar, nextAsr, nextMaghrib, nextIsha};
            DateTimeFormatter dateFormat = DateTimeFormatter.ofPattern("MM/dd/yyyy");

            ScheduledExecutorService executorService = Executors.newScheduledThreadPool(2);

            if (updatedPrayerTimes != null && updatedPrayerTimes.length == 5) {
                try {
                    LocalTime fajrTime = LocalTime.parse(fajr24.trim(), FajrInputFormat);
                    LocalTime zuharTime = LocalTime.parse(zuhar24.trim(), FajrInputFormat);
                    LocalTime asrTime = LocalTime.parse(asr24.trim(), FajrInputFormat);
                    LocalTime MaghribTime = LocalTime.parse(maghrib24.trim(), FajrInputFormat);
                    LocalTime ishaTime = LocalTime.parse(isha24.trim(), FajrInputFormat);

                    fajrTime = fajrTime.plusHours(0);
                    zuharTime = zuharTime.plusHours(12);
                    asrTime = asrTime.plusHours(12);
                    MaghribTime = MaghribTime.plusHours(12);
                    ishaTime = ishaTime.plusHours(12);

                    LocalTime[] updatedPrayerTimesArray = {
                            LocalTime.parse(updatedPrayerTimes[0].trim(), FajrInputFormat),
                            LocalTime.parse(updatedPrayerTimes[1].trim(), FajrInputFormat),
                            LocalTime.parse(updatedPrayerTimes[2].trim(), FajrInputFormat),
                            LocalTime.parse(updatedPrayerTimes[3].trim(), FajrInputFormat),
                            LocalTime.parse(updatedPrayerTimes[4].trim(), FajrInputFormat)
                    };

                    LocalDate currentDate = LocalDate.now();
                    LocalTime currentTime = LocalTime.now();
                    LocalDateTime currentDateTime = LocalDateTime.of(currentDate, currentTime);
                    long minutesElapsed = currentTime.toSecondOfDay() / 60;

                    int nextPrayerIndex = -1;
                    for (int i = 0; i < updatedPrayerTimesArray.length; i++) {
                        LocalTime nextPrayerTime = updatedPrayerTimesArray[i];

                        if (currentDateTime.toLocalTime().compareTo(updatedPrayerTimesArray[i]) <= 0 || i == updatedPrayerTimesArray.length - 1) {
                            nextPrayerIndex = i;
                            break;
                        }
                    }

                    if (nextPrayerIndex != -1) {
                        LocalTime nextPrayerTime = updatedPrayerTimesArray[nextPrayerIndex];
                        LocalDateTime nextPrayerDateTime = LocalDateTime.of(currentDate, nextPrayerTime);

                        final int finalNextPrayerIndex = nextPrayerIndex; // Create a final variable
                        if (currentDate.equals(nextPrayerDateTime.toLocalDate())) {

                            executorService.schedule(() -> {
                                String formattedFajrTime = formatPrayerTime(fajrAdded);
                                // Assuming you have a method dFajr which updates UI
                                // dFajr(formattedFajrTime);
                                nextFajr = formattedFajrTime;
                                fajrAdded = LocalTime.parse(formattedFajrTime);

                                if (finalNextPrayerIndex >= 1) {
                                    String formattedZuhrTime = formatPrayerTime(zuharAdded);
                                    // Assuming you have a method dZuhar which updates UI
                                    // dZuhar(formattedZuhrTime);
                                    nextZuhar = formattedZuhrTime;
                                    zuharAdded = LocalTime.parse(formattedZuhrTime);
                                }

                                if (finalNextPrayerIndex >= 2) {
                                    String formattedAsrTime = formatPrayerTime(asrAdded);
                                    // Assuming you have a method dAsr which updates UI
                                    // dAsr(formattedAsrTime);
                                    nextAsr = formattedAsrTime;
                                    asrAdded = LocalTime.parse(formattedAsrTime);
                                }

                                if (finalNextPrayerIndex >= 3) {
                                    String formattedMaghribTime = formatPrayerTime(maghribAdded);
                                    // Assuming you have a method dMaghrib which updates UI
                                    // dMaghrib(formattedMaghribTime);
                                    nextMaghrib = formattedMaghribTime;
                                    maghribAdded = LocalTime.parse(formattedMaghribTime);
                                }

                                if (finalNextPrayerIndex >= 4) {
                                    String formattedIshaTime = formatPrayerTime(ishaAdded);
                                    // Assuming you have a method dIsha which updates UI
                                    // dIsha(formattedIshaTime);
                                    nextIsha = formattedIshaTime;
                                    ishaAdded = LocalTime.parse(formattedIshaTime);
                                }
                            }, 15, TimeUnit.SECONDS);




                            // Switch case example:
//                            switch (nextPrayerIndex) {
//                                case 0:
//                                    executorService.schedule(() -> {
//                                        String formattedFajrTime = formatPrayerTime(fajrAdded);
//                                        // Assuming you have a method dFajr which updates UI
//                                        // dFajr(formattedFajrTime);
//                                        nextFajr = formattedFajrTime;
//                                        fajrAdded = LocalTime.parse(formattedFajrTime);
//                                    }, 15, TimeUnit.SECONDS);
//
//                                    Log.d("NextDayPrayerTimes", "nextFajr Case Running...  0");
//
//                                    break;
//                                case 1:
//                                    executorService.schedule(() -> {
//
//                                        String formattedFajrTime = formatPrayerTime(fajrAdded);
//                                        // Assuming you have a method dFajr which updates UI
//                                        // dFajr(formattedFajrTime);
//                                        nextFajr = formattedFajrTime;
//                                        fajrAdded = LocalTime.parse(formattedFajrTime);
//
//                                        String formattedZuhrTime = formatPrayerTime(zuharAdded);
//                                        // Assuming you have a method dZuhar which updates UI
//                                        // dZuhar(formattedZuhrTime);
//                                        nextZuhar = formattedZuhrTime;
//                                        zuharAdded = LocalTime.parse(formattedZuhrTime);
//                                    }, 15, TimeUnit.SECONDS);
//                                    Log.d("NextDayPrayerTimes", "nextZuhar Case Running...  1");
//
//                                    break;
//                                case 2:
//                                    executorService.schedule(() -> {
//
//                                        String formattedFajrTime = formatPrayerTime(fajrAdded);
//                                        // Assuming you have a method dFajr which updates UI
//                                        // dFajr(formattedFajrTime);
//                                        nextFajr = formattedFajrTime;
//                                        fajrAdded = LocalTime.parse(formattedFajrTime);
//
//                                        String formattedZuhrTime = formatPrayerTime(zuharAdded);
//                                        // Assuming you have a method dZuhar which updates UI
//                                        // dZuhar(formattedZuhrTime);
//                                        nextZuhar = formattedZuhrTime;
//                                        zuharAdded = LocalTime.parse(formattedZuhrTime);
//
//                                        String formattedAsrTime = formatPrayerTime(asrAdded);
//                                        // Assuming you have a method dAsr which updates UI
//                                        // dAsr(formattedAsrTime);
//                                        nextAsr = formattedAsrTime;
//                                        asrAdded = LocalTime.parse(formattedAsrTime);
//                                        String formattedMaghribTime = formatPrayerTime(maghribAdded);
//                                        // Assuming you have a method dMaghrib which updates UI
//                                        // dMaghrib(formattedMaghribTime);
//                                        nextMaghrib = formattedMaghribTime;
//                                        maghribAdded = LocalTime.parse(formattedMaghribTime);
//
//                                    }, 15, TimeUnit.SECONDS);
//                                    Log.d("NextDayPrayerTimes", "nextAsr Case Running...  2");
//
//                                    break;
//                                case 3:
//                                    executorService.schedule(() -> {
//
//                                        String formattedFajrTime = formatPrayerTime(fajrAdded);
//                                        // Assuming you have a method dFajr which updates UI
//                                        // dFajr(formattedFajrTime);
//                                        nextFajr = formattedFajrTime;
//                                        fajrAdded = LocalTime.parse(formattedFajrTime);
//
//                                        String formattedZuhrTime = formatPrayerTime(zuharAdded);
//                                        // Assuming you have a method dZuhar which updates UI
//                                        // dZuhar(formattedZuhrTime);
//                                        nextZuhar = formattedZuhrTime;
//                                        zuharAdded = LocalTime.parse(formattedZuhrTime);
//
//                                        String formattedAsrTime = formatPrayerTime(asrAdded);
//                                        // Assuming you have a method dAsr which updates UI
//                                        // dAsr(formattedAsrTime);
//                                        nextAsr = formattedAsrTime;
//                                        asrAdded = LocalTime.parse(formattedAsrTime);
//                                        String formattedMaghribTime = formatPrayerTime(maghribAdded);
//                                        // Assuming you have a method dMaghrib which updates UI
//                                        // dMaghrib(formattedMaghribTime);
//                                        nextMaghrib = formattedMaghribTime;
//                                        maghribAdded = LocalTime.parse(formattedMaghribTime);
//
//                                    }, 30, TimeUnit.SECONDS);
//
//                                    Log.d("NextDayPrayerTimes", "nextMaghrib Case Running...  3");
//
//                                    break;
//                                case 4:
//                                    executorService.schedule(() -> {
//
//                                        String formattedFajrTime = formatPrayerTime(fajrAdded);
//                                        // Assuming you have a method dFajr which updates UI
//                                        // dFajr(formattedFajrTime);
//                                        nextFajr = formattedFajrTime;
//                                        fajrAdded = LocalTime.parse(formattedFajrTime);
//
//                                        String formattedZuhrTime = formatPrayerTime(zuharAdded);
//                                        // Assuming you have a method dZuhar which updates UI
//                                        // dZuhar(formattedZuhrTime);
//                                        nextZuhar = formattedZuhrTime;
//                                        zuharAdded = LocalTime.parse(formattedZuhrTime);
//
//                                        String formattedAsrTime = formatPrayerTime(asrAdded);
//                                        // Assuming you have a method dAsr which updates UI
//                                        // dAsr(formattedAsrTime);
//                                        nextAsr = formattedAsrTime;
//                                        asrAdded = LocalTime.parse(formattedAsrTime);
//                                        String formattedMaghribTime = formatPrayerTime(maghribAdded);
//                                        // Assuming you have a method dMaghrib which updates UI
//                                        // dMaghrib(formattedMaghribTime);
//                                        nextMaghrib = formattedMaghribTime;
//                                        maghribAdded = LocalTime.parse(formattedMaghribTime);
//
//                                        String formattedIshaTime = formatPrayerTime(ishaAdded);
//                                        // Assuming you have a method dIsha which updates UI
//                                        // dIsha(formattedIshaTime);
//                                        nextIsha = formattedIshaTime;
//                                        ishaAdded = LocalTime.parse(formattedIshaTime);
//                                    }, 15, TimeUnit.SECONDS);
//                                    Log.d("NextDayPrayerTimes", "nextIsha Case Running...  4");
//                                    break;
//                            }
                        }
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }



    // Next Day's Prayer Times After Maghrib is passed


    public void NextDayPrayerTimesOriginal27Feb2024() {
        // Run every often to update the Day Label next to Date

        try {


            DateTimeFormatter FajrInputFormat = DateTimeFormatter.ofPattern("H:mm"); // Assuming the prayer times are in 12-hour format


            LocalTime fajrTime = LocalTime.parse(fajr24, FajrInputFormat);
            LocalTime zuharTime = LocalTime.parse(zuhar24.trim(), FajrInputFormat);
            LocalTime asrTime = LocalTime.parse(asr24.trim(), FajrInputFormat);
            LocalTime MaghribTime = LocalTime.parse(maghrib24.trim(), FajrInputFormat);
            LocalTime ishaTime = LocalTime.parse(isha24.trim(), FajrInputFormat);

            // Add 12 hours to each prayer time except fajr To avoid time Format ERROR
            fajrTime = fajrTime.plusHours(0);
            zuharTime = zuharTime.plusHours(12);
            asrTime = asrTime.plusHours(12);
            MaghribTime = MaghribTime.plusHours(12);
            ishaTime = ishaTime.plusHours(12);

            // Get the current date and time
            LocalDate currentDate = LocalDate.now();
            LocalTime currentTime = LocalTime.now();
            LocalDateTime currentDateTime = LocalDateTime.of(currentDate, currentTime);

            // Calculate the next prayer index
            int nextPrayerIndex = -1;
            LocalTime[] prayerTimes = {fajrTime, zuharTime, asrTime, MaghribTime, ishaTime};
            String[] prayerNames = {"Fajr", "Zuhar", "Asr", "Maghrib", "Isha"};


            for (int i = 0; i < prayerTimes.length; i++) {
                if (currentDateTime.toLocalTime().compareTo(prayerTimes[i]) <= 0 || i == prayerTimes.length - 1) {
                    nextPrayerIndex = i;
//                    Log.d("NextDayPrayerTimes() ", "Next Prayer: " + prayerNames[nextPrayerIndex] + " " + prayerTimes[i]);
                    break;
                }
            }


            DateTimeFormatter dateFormat = DateTimeFormatter.ofPattern("MM/dd/yyyy"); // Updated date format
//            Log.d("NextDayPrayerTimes() ", "Check Today's Date: " + currentDate.format(dateFormat)); // Format the current date

            if (nextPrayerIndex != -1) {
                LocalTime nextPrayerTime = prayerTimes[nextPrayerIndex];
                LocalDateTime nextPrayerDateTime = LocalDateTime.of(currentDate, nextPrayerTime);

                // Check if the current time is before the next prayer
                if (currentDateTime.isBefore(nextPrayerDateTime)) {

//                    Log.d("My Activity", "IF Block: Time remaining in Millis: " + remainingMillis);

//                    Log.wtf("NextDayPrayerTimes() ", "next prayer 1st part @CalculatTiming: " + prayerNames[nextPrayerIndex]);

                    // ====================================== Update the Timings =========================

                    if (prayerNames[nextPrayerIndex].equals("Fajr")) {

//                        nextIshaCheck = false;

//                        ishaAdded = LocalTime.parse(nextIsha, DateTimeFormatter.ofPattern("H:mm"));
//
////                        nextIsha = formatPrayerTime(ishaAdded);
////                        ishaAdded = LocalTime.parse(nextIsha, FajrInputFormat);


//                                runnable = new Runnable() {
//////                                    @SuppressLint("error")
//                                    @Override
//                                    public void run() {
//                                        handler.postDelayed(this, (1000 * 10 * 6 * 2));

//                                        GetTime();
                        fajr24 = null;
                        zuhar24 = null;
                        asr24 = null;
                        maghrib24 = null;
                        isha24 = null;

                        fajr24 = "";
                        zuhar24 = "";
                        asr24 = "";
                        maghrib24 = "";
                        isha24 = "";

                        isha24 = applyAdjustments(ishaOriginal, ishaAdjustment);
                        maghrib24 = applyAdjustments(maghribOriginal, maghribAdjustment);
                        asr24 = applyAdjustments(asrOriginal, asrAdjustment);
                        zuhar24 = applyAdjustments(zuharOriginal, zuharAdjustment);
                        fajr24 = applyAdjustments(fajrOriginal, fajrAdjustment);

                        dFajr(fajr24);
                        dZuhar(zuhar24);
                        dAsr(asr24);
                        dMaghrib(maghrib24);
                        dIsha(isha24);

                        Log.d("NextDayPrayerTimes() ", "all original loaded");


//                                };
//                                handler.postDelayed(runnable, 1000);


//
//                        // Format the modified Isha time as a String
//                        String formattedIshaTime = formatPrayerTime(ishaAdded);
//                        dIsha(formattedIshaTime);

                    }

                    if (prayerNames[nextPrayerIndex].equals("Zuhar")) {
//                        fajrAdded = LocalTime.parse(nextFajr, DateTimeFormatter.ofPattern("H:mm")).plusMinutes(fajrAdditionMinutes);

                        nextFajrCheck = true;
//                                ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);
//                                scheduler.schedule(() -> {

//                            Log.d("nextFajr in 1st post", "nextFajr in 1st post is: " + nextFajr);
//                            LocalDate nextDay = currentDateTime.toLocalDate().plusDays(1);
//                            LocalTime fajr24Time = LocalTime.parse(nextFajr, FajrInputFormat);
//                            fajr24 = String.valueOf(fajr24Time)

                        runnable = new Runnable() {
                            @Override
                            public void run() {
                                handler.postDelayed(this, (1000 * 10 * 6 * 3));

                                NextFajrTime = LocalTime.parse(nextFajr, FajrInputFormat);
                                fajr24 = formatPrayerTime(NextFajrTime);
                                dFajr(fajr24);
                                Log.d("NextDayPrayerTimes()", "fajr24 = " + fajr24);

                            }
                        };
                        handler.postDelayed(runnable, 1000);


//                            // Update UI with the adjusted prayer times
//                            dFajr(formatPrayerTime(NextFajrTime));
////


                        // Format the modified Fajr time as a String
//                        String formattedFajrTime = formatPrayerTime(fajrAdded);
//                        dFajr(formattedFajrTime);
                        // Shutdown the scheduler
//                            }, 3, TimeUnit.SECONDS);
//                            scheduler.shutdown();

                    }

                    if (prayerNames[nextPrayerIndex].equals("Asr")) {
//                        zuharAdded = LocalTime.parse(nextZuhar, DateTimeFormatter.ofPattern("H:mm")).plusMinutes(zuharAdditionMinutes);
//                                ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);
//
//                                scheduler.schedule(() -> {

////                            // Update Zuhar time with next day's Zuhar time
//                            LocalDate nextDay = currentDateTime.toLocalDate().plusDays(1);
//                            zuhar24= LocalTime.parse(nextZuhar, FajrInputFormat).toString();
                        // Run every often to update the Day Label next to Date
                        runnable = new Runnable() {
                            @Override
                            public void run() {
                                handler.postDelayed(this, (1000 * 10 * 6 * 3));


                                NextZuharTime = LocalTime.parse(nextZuhar, FajrInputFormat);
                                zuhar24 = formatPrayerTime(NextZuharTime);
                                dZuhar(zuhar24);

//                            // Update UI with the adjusted prayer times
//                            dZuhar(formatPrayerTime(NextZuharTime));

                                Log.d("NextDayPrayerTimes() ", "zuhar24 = " + zuhar24);
//                                }, 3, TimeUnit.SECONDS);
//
//                                scheduler.shutdown();


                            }
                        };
                        handler.postDelayed(runnable, 1000);


                    }

                    if (prayerNames[nextPrayerIndex].equals("Maghrib")) {
//                                ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);
//
//                                scheduler.schedule(() -> {

//                            nextAsrCheck = true;
//
//
//                            Log.d("next Prayer Logic Running", "nextAsr in 1st post is running " + nextAsr);
//
////                            // Update Asr time with next day's Asr time
//                            LocalDate nextDay = currentDateTime.toLocalDate().plusDays(1);
//                            asr24 = LocalTime.parse(nextAsr, FajrInputFormat).toString();


                        runnable = new Runnable() {
                            @SuppressLint("SetText")
                            @Override
                            public void run() {
                                handler.postDelayed(this, (1000 * 10 * 6 * 3));

                                NextAsrTime = LocalTime.parse(nextAsr, FajrInputFormat);
                                asr24 = formatPrayerTime(NextAsrTime);
                                dAsr(asr24);
                                Log.d("NextDayPrayerTimes() ", "asr24 = " + asr24);


                            }
                        };
                        handler.postDelayed(runnable, 1000);


//                            // Update UI with the adjusted prayer times
//                            dAsr(formatPrayerTime(NextAsrTime));


//                        String formattedAsrTime = formatPrayerTime(asrAdded);
//                        dZuhar(formattedAsrTime);

                        // Shutdown the scheduler
//                                }, 3, TimeUnit.SECONDS);
//                                scheduler.shutdown();
                    }

                    if (prayerNames[nextPrayerIndex].equals("Isha")) {
//                                ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);
//
//                                scheduler.schedule(() -> {

//                            nextMaghribCheck = true;
//
//
//                            // Update Maghrib time with next day's Maghrib time
//                            LocalDate nextDay = currentDateTime.toLocalDate().plusDays(1);
//                            maghrib24 = LocalTime.parse(nextMaghrib, FajrInputFormat).toString();

                        runnable = new Runnable() {
                            @SuppressLint("SetText")
                            @Override
                            public void run() {
                                handler.postDelayed(this, (1000 * 10 * 6 * 3));

                                NextMaghribTime = LocalTime.parse(nextMaghrib, FajrInputFormat);
                                maghrib24 = formatPrayerTime(NextMaghribTime);
//                                    String maghribText = formatPrayerTime(NextMaghribTime);

                                dMaghrib(maghrib24);
                                Log.d("NextDayPrayerTimes() ", "maghrib24 = " + maghrib24);
                                //


                            }
                        };
                        handler.postDelayed(runnable, 1000);

                        ////                        // Update Isha time with next day's Isha time
//                        NextIshaTime = LocalTime.parse(nextIsha, FajrInputFormat);
//                        isha24 = formatPrayerTime(NextIshaTime);
//                        dIsha(isha24);

//                            // Update UI with the adjusted prayer times
//                            dMaghrib(formatPrayerTime(NextMaghribTime));

//                                }, 3, TimeUnit.SECONDS);
//                                // Shutdown the scheduler
//                                scheduler.shutdown();

                    }

                    LocalTime midnight = LocalTime.MIDNIGHT;
                    Duration durationUntilMidnight = Duration.between(currentTime, midnight);


                    // -- ======================= 2nd POST ======================= ---

                } else { // The else statement
//                            ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);
//                            scheduler.schedule(() -> {
//
////                           // Update Fajr time with next day's Fajr time
//
//
////                        NextFajrTime = LocalTime.parse(nextFajr, FajrInputFormat);
//                        fajr24 = formatPrayerTime(NextFajrTime);
//                        dFajr(fajr24);
//
//
////                        NextZuharTime = LocalTime.parse(nextZuhar, FajrInputFormat);
//                        zuhar24 = formatPrayerTime(NextZuharTime);
//                        dZuhar(zuhar24);
//
//
////                        NextAsrTime = LocalTime.parse(nextAsr, FajrInputFormat);
//                        asr24 = formatPrayerTime(NextAsrTime);
//                        dAsr(asr24);
//
////                        NextMaghribTime = LocalTime.parse(nextMaghrib, FajrInputFormat);
//                        maghrib24 = formatPrayerTime(NextMaghribTime);
//                        dMaghrib(maghrib24);
//

                    // Run every often to update the Day Label next to Date

                    runnable = new Runnable() {
                        @SuppressLint("SetText")
                        @Override
                        public void run() {
                            handler.postDelayed(this, (1000 * 10 * 6 * 3));

                            // Update Isha time with next day's Isha time
                            NextIshaTime = LocalTime.parse(nextIsha, FajrInputFormat);
                            isha24 = formatPrayerTime(NextIshaTime);
//                                    String ishaText = formatPrayerTime(NextIshaTime);
                            dIsha(isha24);
                            Log.d("NextDayPrayerTimes() ", "isha24 = " + isha24);


                        }
                    };
                    handler.postDelayed(runnable, 1000);


//
//
////                         Update UI with the adjusted prayer times
////                        dFajr(fajr24);
////                        dZuhar((zuhar24));
////                        dAsr((asr24));
////                        dMaghrib((maghrib24));
////                        dIsha((isha24));
//                        Log.d("NextDayPrayerTimes() ", "ALL PRAYERS 2nd post");
//
                    // End the scheduler
//                            }, 3, TimeUnit.SECONDS);
//                            scheduler.shutdown();

                }

            }


//            AddMinutes();
        } catch (Exception e) {
            e.printStackTrace();
        }

    }


    // Calculate pryare times etc -------------------------------------
    public void CalculateTimings2ndFeb24WOrking() {
        DateTimeFormatter inputFormat = DateTimeFormatter.ofPattern("HH:mm"); // Assuming the prayer times are in 12-hour format
        DateTimeFormatter out24Hours = DateTimeFormatter.ofPattern("HH:mm"); // Format to 24-hour format
        DateTimeFormatter FajrinputFormat = DateTimeFormatter.ofPattern("H:mm"); // Assuming the prayer times are in 12-hour format
        ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);

        try {



            LocalTime fajrTime = LocalTime.parse(fajr24, FajrinputFormat);
            LocalTime zuharTime = LocalTime.parse(zuhar24.trim(), FajrinputFormat);
            LocalTime asrTime = LocalTime.parse(asr24.trim(), FajrinputFormat);
            LocalTime MaghribTime = LocalTime.parse(maghrib24.trim(), FajrinputFormat);
            LocalTime ishaTime = LocalTime.parse(isha24.trim(), FajrinputFormat);

            // Add 12 hours to each prayer time except fajr To avoid time Format ERROR
            fajrTime = fajrTime.plusHours(0);
            zuharTime = zuharTime.plusHours(12);
            asrTime = asrTime.plusHours(12);
            MaghribTime = MaghribTime.plusHours(12);
            ishaTime = ishaTime.plusHours(12);

            // Get the current date and time
            LocalDate currentDate = LocalDate.now();
            LocalTime currentTime = LocalTime.now();
            LocalDateTime currentDateTime = LocalDateTime.of(currentDate, currentTime);
            TextView[] boxBackgrounds = {BoxFajr, BoxZuhar, BoxAsr, BoxMaghrib, BoxIsha};

            // Calculate the next prayer index
            int nextPrayerIndex = -1;
            LocalTime[] prayerTimes = {fajrTime, zuharTime, asrTime, MaghribTime, ishaTime};
            String[] prayerNames = {"Fajr", "Zuhar", "Asr", "Maghrib", "Isha"};


            for (int i = 0; i < prayerTimes.length; i++) {
                if (currentDateTime.toLocalTime().compareTo(prayerTimes[i]) <= 0 || i == prayerTimes.length - 1) {
                    nextPrayerIndex = i;
                    Log.d("My Activity", "Next Prayer: " + prayerNames[nextPrayerIndex] + " " + prayerTimes[i]);
                    break;
                }
            }


            DateTimeFormatter dateFormat = DateTimeFormatter.ofPattern("MM/dd/yyyy"); // Updated date format
            Log.d("My Activity", "Check Today's Date: " + currentDate.format(dateFormat)); // Format the current date

            if (nextPrayerIndex != -1) {
                LocalTime nextPrayerTime = prayerTimes[nextPrayerIndex];
                LocalDateTime nextPrayerDateTime = LocalDateTime.of(currentDate, nextPrayerTime);

                // Check if the current time is before the next prayer
                if (currentDateTime.isBefore(nextPrayerDateTime)) {


                    // Remaining time until the next prayer
                    Duration remainingTime = Duration.between(currentDateTime, nextPrayerDateTime);

                    // Convert remaining time to milliseconds
                    long remainingMillis = remainingTime.toMillis();
//                    Log.d("My Activity", "IF Block: Time remaining in Millis: " + remainingMillis);

                    Countdowntime(remainingMillis);
                    countdowntxt.setText(countdowndt);
                    Namaz.setText(prayerNames[nextPrayerIndex]);
                    Log.wtf("My Activity", "next prayer 1st part @CalculatTiming: " + prayerNames[nextPrayerIndex]);

                    // Set the background for the corresponding prayer
                    clearBackground();
                    boxBackgrounds[nextPrayerIndex].setBackgroundResource(R.drawable.textview_outline);

                    // ========================== ANIMATION ===============================
                    startFadeInOutAnimation(boxBackgrounds, nextPrayerIndex);

                    NextDayPrayerTimes();

                    // ====================================== Update the Timings =========================
//                    AddMinutes();


                    if (prayerNames[nextPrayerIndex].equals("Fajr")){

                        nextIshaCheck = false;

//                        ishaAdded = LocalTime.parse(nextIsha, DateTimeFormatter.ofPattern("H:mm"));
//
////                        nextIsha = formatPrayerTime(ishaAdded);
////                        ishaAdded = LocalTime.parse(nextIsha, FajrInputFormat);
                        Log.d("My Activity", "1st post for equals(\"Fajr\") Fajr logic");
//
//                        // Format the modified Isha time as a String
//                        String formattedIshaTime = formatPrayerTime(ishaAdded);
//                        dIsha(formattedIshaTime);

                    }

                    if (prayerNames[nextPrayerIndex].equals("Zuhar")) {
//                        fajrAdded = LocalTime.parse(nextFajr, DateTimeFormatter.ofPattern("H:mm")).plusMinutes(fajrAdditionMinutes);

                        nextFajrCheck = true;

                        scheduler.schedule(() -> {


                        fajrAdded = LocalTime.parse(nextFajr, DateTimeFormatter.ofPattern("H:mm"));
                        fajr24 = nextFajr;

                        Log.d("nextFajr in 1st post", "nextFajr in 1st post is: " + fajrAdded);
                        }, 55, TimeUnit.SECONDS);

                        // Format the modified Fajr time as a String
//                        String formattedFajrTime = formatPrayerTime(fajrAdded);
//                        dFajr(formattedFajrTime);
                        // Shutdown the scheduler
                        scheduler.shutdown();

                    }

                    if (prayerNames[nextPrayerIndex].equals("Asr")) {
//                        zuharAdded = LocalTime.parse(nextZuhar, DateTimeFormatter.ofPattern("H:mm")).plusMinutes(zuharAdditionMinutes);
                        scheduler.schedule(() -> {

                        nextZuharCheck = true;
//                        LocalTime baseZuharTime = LocalTime.parse(nextZuhar, DateTimeFormatter.ofPattern("H:mm"));
//                        zuharAdded = baseZuharTime.plusMinutes(zuharAdditionMinutes);
                        fajrAdded = LocalTime.parse(nextFajr, DateTimeFormatter.ofPattern("H:mm"));
                        fajr24 = nextFajr;

                        zuharAdded = LocalTime.parse(nextZuhar, DateTimeFormatter.ofPattern("H:mm"));
                        zuhar24 = nextZuhar;
                        Log.d("nextZuhar in 1st post", "nextZuhar in 1st post " + zuharAdded);
                    }, 55, TimeUnit.SECONDS);

                        // Format the modified Zuhr time as a String
//                        String formattedZuhrTime = formatPrayerTime(zuharAdded);
//                        dZuhar(formattedZuhrTime);
                        // Shutdown the scheduler
                        scheduler.shutdown();


                    }

                    if (prayerNames[nextPrayerIndex].equals("Maghrib")) {
                        scheduler.schedule(() -> {

                        nextAsrCheck = true;
//                        asrAdded = LocalTime.parse(nextAsr, DateTimeFormatter.ofPattern("H:mm")).plusMinutes(asrAdditionMinutes);

//                        LocalTime baseZuharTime = LocalTime.parse(nextAsr, DateTimeFormatter.ofPattern("H:mm"));
//                        asrAdded = baseZuharTime.plusMinutes(asrAdditionMinutes);
                        fajrAdded = LocalTime.parse(nextFajr, DateTimeFormatter.ofPattern("H:mm"));
                        fajr24 = nextFajr;

                        zuharAdded = LocalTime.parse(nextZuhar, DateTimeFormatter.ofPattern("H:mm"));
                        zuhar24 = nextZuhar;

                        asrAdded = LocalTime.parse(nextAsr, DateTimeFormatter.ofPattern("H:mm"));
                        asr24 = nextAsr;

                        Log.d("next Prayer Logic Running", "nextAsr in 1st post is running " + asrAdded);
                    }, 55, TimeUnit.SECONDS);

//                        String formattedAsrTime = formatPrayerTime(asrAdded);
//                        dZuhar(formattedAsrTime);

                        // Shutdown the scheduler
                        scheduler.shutdown();

                    }

                    if (prayerNames[nextPrayerIndex].equals("Isha")) {

                        scheduler.schedule(() -> {

                        nextMaghribCheck = true;

//                        maghribAdded = LocalTime.parse(nextMaghrib, DateTimeFormatter.ofPattern("H:mm")).plusMinutes(maghribAdditionMinutes);

//                        LocalTime basMaghribrTime = LocalTime.parse(nextMaghrib, DateTimeFormatter.ofPattern("H:mm"));
//                        maghribAdded = basMaghribrTime.plusMinutes(maghribAdditionMinutes);

                            fajrAdded = LocalTime.parse(nextFajr, DateTimeFormatter.ofPattern("H:mm"));
                            fajr24 = nextFajr;

                            zuharAdded = LocalTime.parse(nextZuhar, DateTimeFormatter.ofPattern("H:mm"));
                            zuhar24 = nextZuhar;

                            asrAdded = LocalTime.parse(nextAsr, DateTimeFormatter.ofPattern("H:mm"));
                            asr24 = nextAsr;

                            maghribAdded = LocalTime.parse(nextMaghrib, DateTimeFormatter.ofPattern("H:mm"));
                            String formattedMaghribTime = formatPrayerTime(maghribAdded);

                            maghrib24 = nextMaghrib;

//                        maghrib24 = nextMaghrib;
                        Log.d("nextMaghrib in 1st post", "nextMaghrib in 1st post " + maghribAdded);
                        }, 182, TimeUnit.SECONDS);
                        // Shutdown the scheduler
                        scheduler.shutdown();

                    }
//                    else {
//
////
//
//                        LocalTime currentIshaTime = LocalTime.of(ishaAdded.getHour(), ishaAdded.getMinute());
//                        if (currentDateTime.toLocalTime().isAfter(currentIshaTime) && currentDateTime.toLocalTime().isBefore(LocalTime.MIDNIGHT.minusMinutes(59))) {
//
//                            scheduler.schedule(() -> {
//
//                                fajrAdded = LocalTime.parse(nextFajr, DateTimeFormatter.ofPattern("H:mm"));
//                                fajr24 = nextFajr;
//
//                                zuharAdded = LocalTime.parse(nextZuhar, DateTimeFormatter.ofPattern("H:mm"));
//                                zuhar24 = nextZuhar;
//
//                                asrAdded = LocalTime.parse(nextAsr, DateTimeFormatter.ofPattern("H:mm"));
//                                asr24 = nextAsr;
//
//                                maghribAdded = LocalTime.parse(nextMaghrib, DateTimeFormatter.ofPattern("H:mm"));
//                                String formattedMaghribTime = formatPrayerTime(maghribAdded);
//
//                                maghrib24 = nextMaghrib;
//
//                                ishaAdded = LocalTime.parse(nextIsha, DateTimeFormatter.ofPattern("H:mm"));
//                                //nextIsha = formatPrayerTime(ishaAdded);
//                                ishaAdded = LocalTime.parse(nextIsha, DateTimeFormatter.ofPattern("H:mm"));
//                                Log.d("My Activity", "nextIsha in 1st post - (currentDateTime.isAfter(currentIshaDateTime) -  " + ishaAdded);
//                            }, 55, TimeUnit.SECONDS);
//
//                            // Format the modified Isha time as a String
////                        String formattedIshaTime = formatPrayerTime(ishaAdded);
////                        dIsha(formattedIshaTime);
//
//                        }
//                    }


                    LocalTime midnight = LocalTime.MIDNIGHT;
                    Duration durationUntilMidnight = Duration.between(currentTime, midnight);



                } else { // The else statement



                    // Calculate the next prayer's datetime of the following day
                    LocalDateTime nextDayDateTime = currentDateTime.plusDays(1);
                    LocalDateTime nextPrayerNextDayDateTime = LocalDateTime.of(nextDayDateTime.toLocalDate(), prayerTimes[0]);

                    // Remaining time until the next prayer of the following day
                    Duration remainingTime = Duration.between(currentDateTime, nextPrayerNextDayDateTime);

                    // Convert remaining time to milliseconds
                    long remainingMillis = remainingTime.toMillis();

//                    Log.d("My Activity", "Else block: Time remaining in Millis: " + remainingMillis);

                    Countdowntime(remainingMillis);
                    countdowntxt.setText(countdowndt);



                    // Calculate the time until midnight (24:00)
                    LocalTime midnight = LocalTime.MIDNIGHT;
                    Duration durationUntilMidnight = Duration.between(currentTime, midnight);

                    // Schedule the task 5 minutes before midnight
//                    ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);
                    scheduler.schedule(() -> {
                        // Your code to run 5 minutes before midnight
                        nextFajrCheck = false;
                        nextZuharCheck = false;
                        nextAsrCheck = false;
                        nextMaghribCheck = false;
                        nextIshaCheck = false;
//                        fajr24 = nextFajr;
//                        zuhar24 = nextZuhar;
//                        asr24 = nextAsr;
//                        maghrib24 = nextMaghrib;
                        isha24 = nextIsha;

                        // Shutdown the scheduler
                        scheduler.shutdown();
                    }, durationUntilMidnight.toMinutes() - 5, TimeUnit.MINUTES);


                    nextFajrCheck = true;
                    nextZuharCheck = true;
                    nextAsrCheck = true;
                    nextMaghribCheck = true;

                    ishaAdded = LocalTime.parse(nextIsha, DateTimeFormatter.ofPattern("H:mm"));
                    nextIshaCheck = true;
                    isha24 = nextIsha;


                    fajrAdded = LocalTime.parse(nextFajr, DateTimeFormatter.ofPattern("H:mm"));
                    fajr24 = nextFajr;

                    zuharAdded = LocalTime.parse(nextZuhar, DateTimeFormatter.ofPattern("H:mm"));
                    zuhar24 = nextZuhar;

                    asrAdded = LocalTime.parse(nextAsr, DateTimeFormatter.ofPattern("H:mm"));
                    asr24 = nextAsr;

                    maghribAdded = LocalTime.parse(nextMaghrib, DateTimeFormatter.ofPattern("H:mm"));
                    String formattedMaghribTime = formatPrayerTime(maghribAdded);
                    maghrib24 = nextMaghrib;


                    Log.d("-------", "Else statement nextIsha all Prayers are assigned next");


                    // Set UI for next day prayer times.
//                    NextDayPrayerTimes();

                    // Set the background for the corresponding prayer
                    clearBackground();
                    BoxFajr.setBackgroundResource(R.drawable.textview_outline);

                    // Set the initial visibility of the view to invisible
                    BoxFajr.setVisibility(View.INVISIBLE);

                    // **************** Animation ****************


// Create an AlphaAnimation for the fade in and out effect
                    AlphaAnimation fadeInOutAnimation = new AlphaAnimation(0f, 10f);
                    fadeInOutAnimation.setDuration(2000); // Duration for each fade in/out animation
                    fadeInOutAnimation.setFillAfter(true);
                    fadeInOutAnimation.setRepeatMode(Animation.REVERSE); // Reverse the animation
                    fadeInOutAnimation.setRepeatCount(Animation.INFINITE); // Repeat the animation infinitely
                    fadeInOutAnimation.setInterpolator(new AccelerateDecelerateInterpolator());

// Schedule the animation to start after a delay
                    Handler handler = new Handler();
                    handler.postDelayed(new Runnable() {
                        @Override
                        public void run() {
                            // Make the view visible and start the animation
                            BoxFajr.setVisibility(View.VISIBLE);
                            BoxFajr.startAnimation(fadeInOutAnimation);
                        }
                    }, 1200); // Delay in milliseconds before starting the animation

                    Log.wtf("My Activity", "next prayer 2nd Part @CalculateTime: " + prayerNames[nextPrayerIndex]);



                }

            }
            AddMinutes();

        } catch (DateTimeParseException e) {
            e.printStackTrace();
            // Handle parsing errors
        }
    }


    public void startFadeInOutAnimation(View[] boxBackgrounds, int nextPrayerIndex) {

        long currentTimer = System.currentTimeMillis();

        if (currentTimer - lastPrayerTimeUpdate < PRAYER_TIME_UPDATE_INTERVAL) {
            // If less than 1 second has passed since the last update, do nothing
            return;
        }

        lastPrayerTimeUpdate = currentTimer;

        // Set the initial visibility of the view to invisible
        boxBackgrounds[nextPrayerIndex].setVisibility(View.INVISIBLE);

        // Create an AlphaAnimation for the fade in and out effect
        AlphaAnimation fadeInOutAnimation = new AlphaAnimation(0f, 10f);
        fadeInOutAnimation.setDuration(2500); // Duration for each fade in/out animation
        fadeInOutAnimation.setFillAfter(true);
        fadeInOutAnimation.setRepeatMode(Animation.REVERSE); // Reverse the animation
        fadeInOutAnimation.setRepeatCount(Animation.INFINITE); // Repeat the animation infinitely
        fadeInOutAnimation.setInterpolator(new AccelerateDecelerateInterpolator());

        // Schedule the animation to start after a delay
        Handler handler = new Handler();
        handler.postDelayed(new Runnable() {
            @Override
            public void run() {
                // Make the view visible and start the animation
                boxBackgrounds[nextPrayerIndex].setVisibility(View.VISIBLE);
                boxBackgrounds[nextPrayerIndex].startAnimation(fadeInOutAnimation);
            }
        }, 2000); // Delay in milliseconds before starting the animation
    }

    public void startFadeInOutAnimationORIGINAL_25January2024(View[] boxBackgrounds, int nextPrayerIndex) {
        // Set the initial visibility of the view to invisible
        boxBackgrounds[nextPrayerIndex].setVisibility(View.INVISIBLE);

        // Create an AlphaAnimation for the fade in and out effect
        AlphaAnimation fadeInOutAnimation = new AlphaAnimation(0f, 3f);
        fadeInOutAnimation.setDuration(2000); // Duration for each fade in/out animation
        fadeInOutAnimation.setFillAfter(true);
        fadeInOutAnimation.setRepeatMode(Animation.REVERSE); // Reverse the animation
        fadeInOutAnimation.setRepeatCount(Animation.INFINITE); // Repeat the animation infinitely
        fadeInOutAnimation.setInterpolator(new AccelerateDecelerateInterpolator());

        // Schedule the animation to start after a delay
        Handler handler = new Handler();
        handler.postDelayed(new Runnable() {
            @Override
            public void run() {
                // Make the view visible and start the animation
                boxBackgrounds[nextPrayerIndex].setVisibility(View.VISIBLE);
                boxBackgrounds[nextPrayerIndex].startAnimation(fadeInOutAnimation);
            }
        }, 2000); // Delay in milliseconds before starting the animation
    }



    private void runCodeOnce() {
        // Check if the code has already been executed
        if (!isCodeExecuted) {
            try {
                GetTime();
                // Your code to run only once
                LocalTime fajrTime = LocalTime.parse(fajr24, DateTimeFormatter.ofPattern("H:mm"));
                LocalTime zuharTime = LocalTime.parse(zuhar24, DateTimeFormatter.ofPattern("H:mm"));
                LocalTime asrTime = LocalTime.parse(asr24, DateTimeFormatter.ofPattern("H:mm"));
                LocalTime maghribTime = LocalTime.parse(maghrib24, DateTimeFormatter.ofPattern("H:mm"));
                LocalTime ishaTime = LocalTime.parse(isha24, DateTimeFormatter.ofPattern("H:mm"));
                fajrAdded = fajrTime;
                zuharAdded = zuharTime;
                asrAdded = asrTime;
                maghribAdded = maghribTime;
                ishaAdded = ishaTime;

                dFajr(fajr24);
                dZuhar(zuhar24);
                dAsr(asr24);
                dMaghrib(maghrib24);
                dIsha(isha24);

        Log.d("MainActivity", " ----=== This code runs only once! ===----");

                // Set the flag to true to indicate that the code has been executed
                isCodeExecuted = true;
            } catch (DateTimeParseException e) {
                e.printStackTrace();
                // Handle the exception (e.g., log it, provide a default value, etc.)
            }
        } else {
            // Code to handle subsequent calls (optional)
            Log.d("MainActivity", "Code has already been executed. Skipping.");
        }
    }


    public void NextDayPrayerTimes7March2024Working() {
        // Run every often to update the Day Label next to Date

        long currentTimer = System.currentTimeMillis();

        if (currentTimer - lastPrayerTimeUpdate < PRAYER_TIME_UPDATE_INTERVAL) {
            // If less than 1 second has passed since the last update, do nothing
            return;
        }

        lastPrayerTimeUpdate = currentTimer;

        try {


            DateTimeFormatter FajrInputFormat = DateTimeFormatter.ofPattern("H:mm"); // Assuming the prayer times are in 12-hour format


            LocalTime fajrTime = LocalTime.parse(fajr24, FajrInputFormat);
            LocalTime zuharTime = LocalTime.parse(zuhar24.trim(), FajrInputFormat);
            LocalTime asrTime = LocalTime.parse(asr24.trim(), FajrInputFormat);
            LocalTime MaghribTime = LocalTime.parse(maghrib24.trim(), FajrInputFormat);
            LocalTime ishaTime = LocalTime.parse(isha24.trim(), FajrInputFormat);

            // Add 12 hours to each prayer time except fajr To avoid time Format ERROR
            fajrTime = fajrTime.plusHours(0);
            zuharTime = zuharTime.plusHours(12);
            asrTime = asrTime.plusHours(12);
            MaghribTime = MaghribTime.plusHours(12);
            ishaTime = ishaTime.plusHours(12);

            // Get the current date and time
            LocalDate currentDate = LocalDate.now();
            LocalTime currentTime = LocalTime.now();
            LocalDateTime currentDateTime = LocalDateTime.of(currentDate, currentTime);

            // Calculate the next prayer index
            int nextPrayerIndex = -1;
            LocalTime[] prayerTimes = {fajrTime, zuharTime, asrTime, MaghribTime, ishaTime};
            String[] prayerNames = {"Fajr", "Zuhar", "Asr", "Maghrib", "Isha"};


            for (int i = 0; i < prayerTimes.length; i++) {
                if (currentDateTime.toLocalTime().compareTo(prayerTimes[i]) <= 0 || i == prayerTimes.length - 1) {
                    nextPrayerIndex = i;
//                    Log.d("NextDayPrayerTimes() ", "Next Prayer: " + prayerNames[nextPrayerIndex] + " " + prayerTimes[i]);
                    break;
                }
            }


            DateTimeFormatter dateFormat = DateTimeFormatter.ofPattern("MM/dd/yyyy"); // Updated date format
//            Log.d("NextDayPrayerTimes() ", "Check Today's Date: " + currentDate.format(dateFormat)); // Format the current date

            if (nextPrayerIndex != -1) {
                LocalTime nextPrayerTime = prayerTimes[nextPrayerIndex];
                LocalDateTime nextPrayerDateTime = LocalDateTime.of(currentDate, nextPrayerTime);

                // Check if the current time is before the next prayer
                if (currentDateTime.isBefore(nextPrayerDateTime)) {

//                    Log.d("My Activity", "IF Block: Time remaining in Millis: " + remainingMillis);

//                    Log.wtf("NextDayPrayerTimes() ", "next prayer 1st part @CalculatTiming: " + prayerNames[nextPrayerIndex]);

                    // ====================================== Update the Timings =========================

                    if (prayerNames[nextPrayerIndex].equals("Fajr")) {


//                        // Apply adjustments made by the user to the current day's prayer times
                        fajr24 = applyAdjustments(fajrOriginal, fajrAdjustment);
                        zuhar24 = applyAdjustments(zuharOriginal, zuharAdjustment);
                        asr24 = applyAdjustments(asrOriginal, asrAdjustment);
                        maghrib24 = applyAdjustments(maghribOriginal, maghribAdjustment);
                        isha24 = applyAdjustments(ishaOriginal, ishaAdjustment);

                        // Store the next day's prayer times with adjustments applied
                        nextFajr = applyAdjustments(nextDayFajr, fajrAdjustment);
                        nextZuhar = applyAdjustments(nextDayZuhar, zuharAdjustment);
                        nextAsr = applyAdjustments(nextDayAsr, asrAdjustment);
                        nextMaghrib = applyAdjustments(nextDayMaghrib, maghribAdjustment);
                        nextIsha = applyAdjustments(nextDayIsha, ishaAdjustment);
                        dFajr(fajr24);
                        dZuhar(zuhar24);
                        dAsr(asr24);
                        dMaghrib(maghrib24);
                        dIsha(isha24);


                        Log.d("NextDayPrayerTimes() ", "all original loaded");


                    }

                    if (prayerNames[nextPrayerIndex].equals("Zuhar")) {
//                        fajrAdded = LocalTime.parse(nextFajr, DateTimeFormatter.ofPattern("H:mm")).plusMinutes(fajrAdditionMinutes);

//                        nextFajrCheck = true;

                        runnable = new Runnable() {
                            @Override
                            public void run() {
                                handler.postDelayed(this, (1000 * 10 * 6 * 3));
//                            handler.postDelayed(this, (1000 * 3));
//                                NextFajrTime = LocalTime.parse(nextFajr, FajrInputFormat);
//                                fajr24 = formatPrayerTime(NextFajrTime);
//                                nextFajr24 = LocalTime.parse(nextFajr, DateTimeFormatter.ofPattern("H:mm"));
//                                nextFajr = nextFajr24.format(DateTimeFormatter.ofPattern("H:mm"));
                                fajr24 = applyAdjustments(nextDayFajr, fajrAdjustment);

                                nextFajr = applyAdjustments(nextDayFajr, fajrAdjustment);


                                dFajr(nextFajr);
                                Log.d("NextDayPrayerTimes()", "nextFajr = " + nextFajr);

                                dZuhar(zuhar24);
                                dAsr(asr24);
                                dMaghrib(maghrib24);
                                dIsha(isha24);

                            }
                        };
                        handler.postDelayed(runnable, 1000);


                    } else if (prayerNames[nextPrayerIndex].equals("Asr")) {

                        runnable = new Runnable() {
                            @Override
                            public void run() {
                                handler.postDelayed(this, (1000 * 10 * 6 * 3));
//                                handler.postDelayed(this, (1000 * 3));


//                                nextZuhar24 = LocalTime.parse(nextZuhar, DateTimeFormatter.ofPattern("H:mm"));
//                                nextZuhar = nextZuhar24.format(DateTimeFormatter.ofPattern("H:mm"));
                                fajr24 = applyAdjustments(nextDayFajr, fajrAdjustment);
                                nextFajr = applyAdjustments(nextDayFajr, fajrAdjustment);
                                dFajr(nextFajr);

                                zuhar24 = applyAdjustments(nextDayZuhar, zuharAdjustment);
                                nextZuhar = applyAdjustments(nextDayZuhar, zuharAdjustment);
                                dZuhar(nextZuhar);

                                dAsr(asr24);
                                dMaghrib(maghrib24);
                                dIsha(isha24);
                                Log.d("NextDayPrayerTimes() ", "nextzuhar = " + nextZuhar);

                            }
                        };
                        handler.postDelayed(runnable, 1000);


                    } else if (prayerNames[nextPrayerIndex].equals("Maghrib")) {


                        runnable = new Runnable() {
                            @SuppressLint("SetText")
                            @Override
                            public void run() {
                                handler.postDelayed(this, (1000 * 10 * 6 * 3));
//                                handler.postDelayed(this, (1000 * 3));

//                                nextAsr24 = LocalTime.parse(nextAsr, DateTimeFormatter.ofPattern("H:mm"));
//                                nextAsr = nextAsr24.format(DateTimeFormatter.ofPattern("H:mm"));
                                fajr24 = applyAdjustments(nextDayFajr, fajrAdjustment);
                                nextFajr = applyAdjustments(nextDayFajr, fajrAdjustment);
                                dFajr(nextFajr);

                                zuhar24 = applyAdjustments(nextDayZuhar, zuharAdjustment);
                                nextZuhar = applyAdjustments(nextDayZuhar, zuharAdjustment);
                                dZuhar(nextZuhar);

                                asr24 = applyAdjustments(nextDayAsr, asrAdjustment);
                                nextAsr = applyAdjustments(nextDayAsr, asrAdjustment);
                                dAsr(nextAsr);

                                dMaghrib(maghrib24);
                                dIsha(isha24);

                                Log.d("NextDayPrayerTimes() ", "nextasr = " + nextAsr);


                            }
                        };
                        handler.postDelayed(runnable, 1000);


                    } else if (prayerNames[nextPrayerIndex].equals("Isha")) {


                        runnable = new Runnable() {
                            @SuppressLint("SetText")
                            @Override
                            public void run() {
                                handler.postDelayed(this, (1000 * 10 * 6 * 3));
//                                handler.postDelayed(this, (1000 * 3));

//                                nextMaghrib24 = LocalTime.parse(nextMaghrib, DateTimeFormatter.ofPattern("H:mm"));
//                                nextMaghrib = nextMaghrib24.format(DateTimeFormatter.ofPattern("H:mm"));

                                fajr24 = applyAdjustments(nextDayFajr, fajrAdjustment);
                                nextFajr = applyAdjustments(nextDayFajr, fajrAdjustment);
                                dFajr(nextFajr);

                                zuhar24 = applyAdjustments(nextDayZuhar, zuharAdjustment);
                                nextZuhar = applyAdjustments(nextDayZuhar, zuharAdjustment);
                                dZuhar(nextZuhar);

                                asr24 = applyAdjustments(nextDayAsr, asrAdjustment);
                                nextAsr = applyAdjustments(nextDayAsr, asrAdjustment);
                                dAsr(nextAsr);

                                maghrib24 = applyAdjustments(maghribOriginal, maghribAdjustment);
                                nextMaghrib = applyAdjustments(nextDayMaghrib, maghribAdjustment);
                                dMaghrib(nextMaghrib);

                                dIsha(isha24);

                                Log.d("NextDayPrayerTimes() ", "nextMaghrib = " + nextMaghrib);



                            }
                        };
                        handler.postDelayed(runnable, 1000);



                    }

                    LocalTime midnight = LocalTime.MIDNIGHT;
                    Duration durationUntilMidnight = Duration.between(currentTime, midnight);


                    // -- ======================= 2nd POST ======================= ---

                } else {


                    runnable = new Runnable() {
                        @SuppressLint("SetText")
                        @Override
                        public void run() {
                            handler.postDelayed(this, (1000 * 10 * 6 * 3));
//                            handler.postDelayed(this, (1000 * 3));


                            fajr24 = applyAdjustments(nextDayFajr, fajrAdjustment);
                            nextFajr = applyAdjustments(nextDayFajr, fajrAdjustment);
                            dFajr(nextFajr);

                            zuhar24 = applyAdjustments(nextDayZuhar, zuharAdjustment);
                            nextZuhar = applyAdjustments(nextDayZuhar, zuharAdjustment);
                            dZuhar(nextZuhar);

                            asr24 = applyAdjustments(nextDayAsr, asrAdjustment);
                            nextAsr = applyAdjustments(nextDayAsr, asrAdjustment);
                            dAsr(nextAsr);

                            maghrib24 = applyAdjustments(nextDayMaghrib, maghribAdjustment);
                            nextMaghrib = applyAdjustments(nextDayMaghrib, maghribAdjustment);
                            dMaghrib(nextMaghrib);

//                            nextIsha24 = LocalTime.parse(nextIsha, DateTimeFormatter.ofPattern("H:mm"));
//                            nextIsha = nextIsha24.format(DateTimeFormatter.ofPattern("H:mm"));

                            isha24 = applyAdjustments(nextDayIsha, ishaAdjustment);
                            nextIsha = applyAdjustments(nextDayIsha, ishaAdjustment);
                            dIsha(nextIsha);

                            Log.d("NextDayPrayerTimes() ", "nextisha = " + nextIsha);


                        }
                    };
                    handler.postDelayed(runnable, 1000);


                }

            }


//            AddMinutes();
        } catch (Exception e) {
            e.printStackTrace();
        }

    }
    public void NextDayPrayerTimes() {
        long currentTimer = System.currentTimeMillis();

        // Check if enough time has passed since the last update
        if (currentTimer - lastPrayerTimeUpdate < PRAYER_TIME_UPDATE_INTERVAL) {
            // If less than 1 second has passed since the last update, do nothing
            Log.d("NextDayPrayerTimes()", "Not enough time has passed since the last update.");
            return;
        }

        lastPrayerTimeUpdate = currentTimer;

        try {
            DateTimeFormatter FajrInputFormat = DateTimeFormatter.ofPattern("H:mm");

            LocalTime fajrTime = LocalTime.parse(fajr24, FajrInputFormat);
            LocalTime zuharTime = LocalTime.parse(zuhar24.trim(), FajrInputFormat);
            LocalTime asrTime = LocalTime.parse(asr24.trim(), FajrInputFormat);
            LocalTime maghribTime = LocalTime.parse(maghrib24.trim(), FajrInputFormat);
            LocalTime ishaTime = LocalTime.parse(isha24.trim(), FajrInputFormat);

            // Add 12 hours to each prayer time except Fajr to avoid time format error
            fajrTime = fajrTime.plusHours(0);
            zuharTime = zuharTime.plusHours(12);
            asrTime = asrTime.plusHours(12);
            maghribTime = maghribTime.plusHours(12);
            ishaTime = ishaTime.plusHours(12);

            // Get the current date and time
            LocalDate currentDate = LocalDate.now();
            LocalTime currentTime = LocalTime.now();
            LocalDateTime currentDateTime = LocalDateTime.of(currentDate, currentTime);

            // Log current date and time
            Log.d("NextDayPrayerTimes()", "Current Date and Time: " + currentDateTime);

            // Check if the current time is after any of the prayer times
            if (currentDateTime.toLocalTime().isAfter(fajrTime)) {
                dFajr(applyAdjustments(nextDayFajr, fajrAdjustment));
                Log.d("NextDayPrayerTimes()", "Fajr time has passed. Updated Fajr time.");
            }
            if (currentDateTime.toLocalTime().isAfter(zuharTime)) {
                dZuhar(applyAdjustments(nextDayZuhar, zuharAdjustment));
                Log.d("NextDayPrayerTimes()", "Zuhar time has passed. Updated Zuhar time.");
            }
            if (currentDateTime.toLocalTime().isAfter(asrTime)) {
                dAsr(applyAdjustments(nextDayAsr, asrAdjustment));
                Log.d("NextDayPrayerTimes()", "Asr time has passed. Updated Asr time.");
            }
            if (currentDateTime.toLocalTime().isAfter(maghribTime)) {
                dMaghrib(applyAdjustments(nextDayMaghrib, maghribAdjustment));
                Log.d("NextDayPrayerTimes()", "Maghrib time has passed. Updated Maghrib time.");
            }
            if (currentDateTime.toLocalTime().isAfter(ishaTime)) {
                // For Isha, automatically assign next day's prayers
                fajr24 = applyAdjustments(nextDayFajr, fajrAdjustment);
                zuhar24 = applyAdjustments(nextDayZuhar, zuharAdjustment);
                asr24 = applyAdjustments(nextDayAsr, asrAdjustment);
                maghrib24 = applyAdjustments(nextDayMaghrib, maghribAdjustment);
                isha24 = applyAdjustments(nextDayIsha, ishaAdjustment);
                dFajr(fajr24);
                dZuhar(zuhar24);
                dAsr(asr24);
                dMaghrib(maghrib24);
                dIsha(isha24);
                Log.d("NextDayPrayerTimes()", "Isha time has passed. Updated all prayer times for the next day.");
            }
        } catch (Exception e) {
            e.printStackTrace();
            Log.e("NextDayPrayerTimes()", "An error occurred: " + e.getMessage());
        }
    }

    public void CalculateTimings() {

        try {


            DateTimeFormatter inputFormat = DateTimeFormatter.ofPattern("HH:mm"); // Assuming the prayer times are in 12-hour format
            DateTimeFormatter out24Hours = DateTimeFormatter.ofPattern("HH:mm"); // Format to 24-hour format
            DateTimeFormatter FajrInputFormat = DateTimeFormatter.ofPattern("H:mm"); // Assuming the prayer times are in 12-hour format
            ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);

            LocalTime fajrTime = LocalTime.parse(fajr24, FajrInputFormat);
            LocalTime zuharTime = LocalTime.parse(zuhar24.trim(), FajrInputFormat);
            LocalTime asrTime = LocalTime.parse(asr24.trim(), FajrInputFormat);
            LocalTime MaghribTime = LocalTime.parse(maghrib24.trim(), FajrInputFormat);
            LocalTime ishaTime = LocalTime.parse(isha24.trim(), FajrInputFormat);

            // Add 12 hours to each prayer time except fajr To avoid time Format ERROR
            fajrTime = fajrTime.plusHours(0);
            zuharTime = zuharTime.plusHours(12);
            asrTime = asrTime.plusHours(12);
            MaghribTime = MaghribTime.plusHours(12);
            ishaTime = ishaTime.plusHours(12);

            // Get the current date and time
            LocalDate currentDate = LocalDate.now();
            LocalTime currentTime = LocalTime.now();
            LocalDateTime currentDateTime = LocalDateTime.of(currentDate, currentTime);
            TextView[] boxBackgrounds = {BoxFajr, BoxZuhar, BoxAsr, BoxMaghrib, BoxIsha};

            // Calculate the next prayer index
            int nextPrayerIndex = -1;
            LocalTime[] prayerTimes = {fajrTime, zuharTime, asrTime, MaghribTime, ishaTime};
            String[] prayerNames = {"Fajr", "Zuhar", "Asr", "Maghrib", "Isha"};


            for (int i = 0; i < prayerTimes.length; i++) {
                if (currentDateTime.toLocalTime().compareTo(prayerTimes[i]) <= 0 || i == prayerTimes.length - 1) {
                    nextPrayerIndex = i;
                    Log.d("CalculateTimings()", "Next Prayer: " + prayerNames[nextPrayerIndex] + " " + prayerTimes[i]);
                    break;
                }
            }

            DateTimeFormatter dateFormat = DateTimeFormatter.ofPattern("MM/dd/yyyy"); // Updated date format
            Log.d("CalculateTimings()", "Check Today's Date: " + currentDate.format(dateFormat)); // Format the current date


            if (nextPrayerIndex != -1) {
                LocalTime nextPrayerTime = prayerTimes[nextPrayerIndex];
                LocalDateTime nextPrayerDateTime = LocalDateTime.of(currentDate, nextPrayerTime);

                // Check if the current time is before the next prayer
                if (currentDateTime.isBefore(nextPrayerDateTime)) {

                    // Remaining time until the next prayer
                    Duration remainingTime = Duration.between(currentDateTime, nextPrayerDateTime);

                    // Convert remaining time to milliseconds
                    long remainingMillis = remainingTime.toMillis();
//                    Log.d("My Activity", "IF Block: Time remaining in Millis: " + remainingMillis);

                    Countdowntime(remainingMillis);
                    countdowntxt.setText(countdowndt);
                    Namaz.setText(prayerNames[nextPrayerIndex]);
                    Log.wtf("CalculateTimings()", "next prayer: " + prayerNames[nextPrayerIndex]);

                    // Set the background for the corresponding prayer
                    clearBackground();
                    boxBackgrounds[nextPrayerIndex].setBackgroundResource(R.drawable.textview_outline);

                    // ========================== ANIMATION ===============================
                    startFadeInOutAnimation(boxBackgrounds, nextPrayerIndex);

                    // Run every often to update the Day Label next to Date
//                    runnable = new Runnable() {
//                        @SuppressLint("SetText")
//                        @Override
//                        public void run() {
//                            handler.postDelayed(this, (5000));

//                        NextDayPrayerTimes();

//
//                        }
//                    };
//                    handler.postDelayed(runnable, 1000);
//
//
//                    SimpleDateFormat SdateFormat = new SimpleDateFormat(DATE_FORMAT);
//
//                    Date Fajrdt = SdateFormat.parse(fajr24);
//                    Date Zuhardt = SdateFormat.parse(zuhar24);
//                    Date Fridaydt = SdateFormat.parse(friday24);
//                    Log.wtf("SimpleDateFormat", "SimpleDateFormat : " + SdateFormat);
//
//                    Date Asrdt = SdateFormat.parse(asr24);
//                    Date Magribdt = SdateFormat.parse(maghrib24);
//                    Date Ishadt = SdateFormat.parse(isha24);
//                    Date Midnightdt = SdateFormat.parse(Midnight);
//                    Date current_date = new Date();
//
//                    // Get the date of the next prayer
//                    Date nextPrayer;
//                    if (current_date.before(Fajrdt)) {
//                        nextPrayer = Fajrdt;
//                    } else if (current_date.before(Zuhardt)) {
//                        nextPrayer = Zuhardt;
//                    } else if (current_date.before(Asrdt)) {
//                        nextPrayer = Asrdt;
//                    } else if (current_date.before(Magribdt)) {
//                        nextPrayer = Magribdt;
//                    } else if (current_date.before(Ishadt)) {
//                        nextPrayer = Ishadt;
//                    } else {
//                        // All prayers for today have already passed, start counting down to Fajr of the next day
//                        nextPrayer = new Date(Fajrdt.getTime() + (1000 * 60 * 60 * 24));
//                    }
//
//
//                    // Update the UI to show the current prayer and the next prayer time
//                    if (current_date.before(Fajrdt)) {
////                        Namaz.setText("Fajr");
////                        nextnamaz.setText("Zuhar");
//                    } else if (current_date.before(Zuhardt)) {
////                        Namaz.setText("Zuhar");
////                        nextnamaz.setText("Asr");
//                        dFajr(nextFajr);
//                    } else if (current_date.before(Asrdt)) {
////                        Namaz.setText("Asr");
////                        nextnamaz.setText("Magrib");
//                        dZuhar(nextZuhar);
//                    } else if (current_date.before(Magribdt)) {
////                        Namaz.setText("Maghrib");
////                        nextnamaz.setText("Isha");
//                        dAsr(nextAsr);
//                    } else if (current_date.before(Ishadt)) {
////                        Namaz.setText("Isha");
////                        nextnamaz.setText("Fajr");
//                        dMaghrib(nextMaghrib);
//                    } else {
////                        Namaz.setText("Fajr");
////                        nextnamaz.setText("Zuhar");
//                        dIsha(nextIsha);
//                    }

                    // ====================================== Update the Timings =========================
//                    AddMinutes();


                } else {

                    // If Isha time is passed
//                    Log.wtf("My Activity", "UpdatedPRayertimes called");

                // Calculate the next prayer's datetime of the following day
                LocalDateTime nextDayDateTime = currentDateTime.plusDays(1);
                LocalDateTime nextPrayerNextDayDateTime = LocalDateTime.of(nextDayDateTime.toLocalDate(), prayerTimes[0]);

                // Remaining time until the next prayer of the following day
                Duration remainingTime = Duration.between(currentDateTime, nextPrayerNextDayDateTime);

                // Convert remaining time to milliseconds
                long remainingMillis = remainingTime.toMillis();

//                    Log.d("My Activity", "Else block: Time remaining in Millis: " + remainingMillis);

                Countdowntime(remainingMillis);
                countdowntxt.setText(countdowndt);

                Namaz.setText(prayerNames[0]);

                    // Run every often to update the Day Label next to Date
//                    runnable = new Runnable() {
//                        @SuppressLint("SetText")
//                        @Override
//                        public void run() {
//                            handler.postDelayed(this, (5000));

//                            NextDayPrayerTimes();

//                        }
//                    };
//                    handler.postDelayed(runnable, 1000);
                // Set the background for the corresponding prayer - call before to clear the old
                clearBackground();

                BoxFajr.setBackgroundResource(R.drawable.textview_outline);

                // Set the initial visibility of the view to invisible
                BoxFajr.setVisibility(View.INVISIBLE);

//                    updateFlipClockDisplay(remainingMillis);

//                    // call the updateFlip function
//                    runOnUiThread(new Runnable() {
//                        @Override
//                        public void run() {
//                        }
//                    });

                // **************** Animation ****************


// Create an AlphaAnimation for the fade in and out effect
                AlphaAnimation fadeInOutAnimation = new AlphaAnimation(0f, 10f);
                fadeInOutAnimation.setDuration(2500); // Duration for each fade in/out animation
                fadeInOutAnimation.setFillAfter(true);
                fadeInOutAnimation.setRepeatMode(Animation.REVERSE); // Reverse the animation
                fadeInOutAnimation.setRepeatCount(Animation.INFINITE); // Repeat the animation infinitely
                fadeInOutAnimation.setInterpolator(new AccelerateDecelerateInterpolator());

                // Schedule the animation to start after a delay
                Handler handler = new Handler();
                handler.postDelayed(new Runnable() {
                    @Override
                    public void run() {
                        // Make the view visible and start the animation
                        BoxFajr.setVisibility(View.VISIBLE);
                        BoxFajr.startAnimation(fadeInOutAnimation);
                    }
                }, 2000); // Delay in milliseconds before starting the animation

                Log.wtf("CalculateTimings()", "next prayer: " + prayerNames[nextPrayerIndex]);



//                    dFajr(fajr24);
//                    dZuhar(zuhar24);
//                    dAsr(asr24);
//                    dMaghrib(maghrib24);
//                    dIsha(isha24);


            }

        }

    } catch (DateTimeParseException e) {
        e.printStackTrace();
        // Handle parsing errors
    } catch (Exception d) {
            d.printStackTrace();
        }

}

    // --------------------------------------------------- GET TIME )) ---------------------------


    // Gettime logic 7 February 2024
    public void GetTimeWorkingBackup14March2024(String... filePath) {

        long currentTimer = System.currentTimeMillis();

        if (currentTimer - lastPrayerTimeUpdate < PRAYER_TIME_UPDATE_INTERVAL) {
            // If less than 1 second has passed since the last update, do nothing
            return;
        }

        lastPrayerTimeUpdate = currentTimer;

        try {

            if (filePath.length > 0) {
                // A file path was provided, use it
                path = filePath[0];
            } else {
                // No file path provided, use the default
//                path = "timings.xls";
//                path = "test.xls";
            }
                AssetManager am = getAssets();
                InputStream is = am.open(path);
                Workbook wb = Workbook.getWorkbook(is);

                Sheet sheet = wb.getSheet(0);
                int numColumns = sheet.getColumns();
                int numRows = sheet.getRows();
                int dateColumnIndex = 0;
                int fajrColumnIndex = 1;
                int zuharColumnIndex = 2;
                int asrColumnIndex = 3;
                int MaghribColumnIndex = 4;
                int ishaColumnIndex = 5;

                // Match the date format with the Excel date format to load the data
                String currentDateString = DateFormat.format("MM/dd/yyyy", new Date()).toString();

                List<String[]> data = new ArrayList<>();

                // Load all the data into a list
                for (int row = 0; row < numRows; row++) {
                    String[] rowData = new String[numColumns];
                    for (int col = 0; col < numColumns; col++) {
                        Cell cell = sheet.getCell(col, row);
                        rowData[col] = cell.getContents();
                    }
                    data.add(rowData);
                }

                // Find the row with the current date
                int currentRow = -1;
                String currentDate = "";
                if (currentDateString.length() >= 10) {
                    currentDate = currentDateString.substring(0, 10); // Extract date part
                }
                for (int row = 0; row < data.size(); row++) {
                    String[] rowData = data.get(row);
                    String cellValue = rowData[dateColumnIndex];
                    String cellDate = "";
                    if (cellValue.length() >= 10) {
                        // Extract date part from cell value with different format
                        SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
                        Date cellDateObj = dateFormat.parse(cellValue);
                        SimpleDateFormat outputFormat = new SimpleDateFormat("MM/dd/yyyy");
                        cellDate = outputFormat.format(cellDateObj);
                    }
                    if (cellDate.equals(currentDate)) {
                        currentRow = row;
                        Log.d("GetTime()", "Today's Date Matched: " + cellValue);

                        break;
                    }
                }

                // Process the prayer times
                if (currentRow != -1) {
                    // Current date found in the data
                    CharSequence currentdate = DateFormat.format("MM/dd/yyyy HH:mm:ss", d.getTime());
                    Log.d("My Activity", "System Date & Time: " + currentdate);

                    String[] currentRowData = data.get(currentRow);
                    String fajrTime = currentRowData[fajrColumnIndex].trim();
                    String zuharTime = currentRowData[zuharColumnIndex].trim();
                    String asrTime = currentRowData[asrColumnIndex].trim();
                    String MaghribTime = currentRowData[MaghribColumnIndex].trim();
                    String ishaTime = currentRowData[ishaColumnIndex].trim();

                    // Get the prayer times for the next day
                    int nextDayRow = (currentRow + 1) % data.size();
                    String[] nextDayRowData = data.get(nextDayRow);
                    String nextDayFajrTime = nextDayRowData[fajrColumnIndex].trim();
                    String nextDayZuharTime = nextDayRowData[zuharColumnIndex].trim();
                    String nextDayAsrTime = nextDayRowData[asrColumnIndex].trim();
                    String nextDayMaghribTime = nextDayRowData[MaghribColumnIndex].trim();
                    String nextDayIshaTime = nextDayRowData[ishaColumnIndex].trim();


//                // Run every often to update the Day Label next to Date
//                runnable = new Runnable() {
//                    @SuppressLint("SetText")
//                    @Override
//                    public void run() {
//                        handler.postDelayed(this, (2000));


                    fajrOriginal = fajrTime.trim().toString();
                    zuharOriginal = zuharTime.trim().toString();
                    asrOriginal = asrTime.trim().toString();
                    maghribOriginal = MaghribTime.trim().toString();
                    ishaOriginal = ishaTime.trim().toString();

                    nextDayFajr = nextDayFajrTime.trim().toString();
                    nextDayZuhar = nextDayZuharTime.trim().toString();
                    nextDayAsr = nextDayAsrTime.trim().toString();
                    nextDayMaghrib = nextDayMaghribTime.trim().toString();
                    nextDayIsha = nextDayIshaTime.trim().toString();


                    // Apply adjustments made by the user to the current day's prayer times
                    fajr24 = applyAdjustments(fajrOriginal, fajrAdjustment);
                    zuhar24 = applyAdjustments(zuharOriginal, zuharAdjustment);
                    asr24 = applyAdjustments(asrOriginal, asrAdjustment);
                    maghrib24 = applyAdjustments(maghribOriginal, maghribAdjustment);
                    isha24 = applyAdjustments(ishaOriginal, ishaAdjustment);

                    // Store the next day's prayer times with adjustments applied
                    nextFajr = applyAdjustments(nextDayFajr, fajrAdjustment);
                    nextZuhar = applyAdjustments(nextDayZuhar, zuharAdjustment);
                    nextAsr = applyAdjustments(nextDayAsr, asrAdjustment);
                    nextMaghrib = applyAdjustments(nextDayMaghrib, maghribAdjustment);
                    nextIsha = applyAdjustments(nextDayIsha, ishaAdjustment);


//                    }
//                };
//                handler.postDelayed(runnable, 1000);


                    Log.d("--- GetTime() ---", "... GetTime() Prayers Loaded successfully...");


                } else {


                // Calculate the day of the year
//                Calendar calendar = Calendar.getInstance();
//                int dayOfYear = calendar.get(Calendar.DAY_OF_YEAR);
//
//                // Adjust prayer times based on the day of the year
//                // You can implement your logic here to adjust the prayer times based on the day of the year
//                // For example, you can have a different set of default times for different periods of the year
//
//                if (dayOfYear >= 1 && dayOfYear <= 90) { // Adjust times for the first quarter of the year
//                    fajr24 = "6:00";
//                    zuhar24 = "13:00";
//                    asr24 = "15:00";
//                    isha24 = "19:00";
//                } else if (dayOfYear > 90 && dayOfYear <= 180) { // Adjust times for the second quarter of the year
//                    fajr24 = "5:30";
//                    zuhar24 = "13:30";
//                    asr24 = "16:00";
//                    isha24 = "21:00";
//                } else if (dayOfYear > 180 && dayOfYear <= 270) { // Adjust times for the third quarter of the year
//                    fajr24 = "5:00";
//                    zuhar24 = "14:00";
//                    asr24 = "18:30";
//                    isha24 = "22:00";
//                } else { // Adjust times for the fourth quarter of the year
//                    fajr24 = "4:00";
//                    zuhar24 = "14:00";
//                    asr24 = "19:00";
//                    isha24 = "23:00";
//                }



                // No matching date found in the data, assign values from arrays
                int dayOfYear = Calendar.getInstance().get(Calendar.DAY_OF_YEAR);


                String[] fajrTimesForYear = {
                        "7:00", "7:00", "7:00", "7:00", "7:00", "7:00", "7:00", "7:00", "7:00", "7:00",
                        "7:00", "7:00", "7:00", "7:00", "7:00", "7:00", "7:00", "7:00", "7:00", "7:00",
                        "7:00", "7:00", "7:00", "7:00", "7:00", "7:00", "7:00", "7:00", "7:00", "7:00",
                        "7:00", "7:00", "7:00", "6:45", "6:45", "6:45", "6:45", "6:45", "6:45", "6:45",
                        "6:45", "6:45", "6:45", "6:45", "6:45", "6:45", "6:45", "6:30", "6:30", "6:30",
                        "6:30", "6:30", "6:30", "6:15", "6:15", "6:15", "6:15", "6:15", "6:15", "6:15",
                        "6:15", "6:00", "6:00", "6:00", "6:00", "6:00", "6:00", "6:00", "5:45", "5:45",
                        "5:45", "5:45", "5:45", "5:45", "5:45", "5:30", "5:30", "5:30", "5:30", "5:30",
                        "5:30", "5:30", "5:10", "5:10", "06:00", "06:00", "06:00", "06:00", "06:00", "05:45",
                        "05:45", "05:45", "05:45", "05:45", "05:45", "05:45", "05:30", "05:30", "05:30",
                        "05:30", "05:30", "05:30", "05:30", "05:15", "05:15", "05:15", "05:15", "05:15",
                        "05:15", "05:15", "05:00", "05:00", "05:00", "05:00", "05:00", "05:00", "05:00",
                        "04:45", "04:45", "04:45", "04:45", "04:45", "04:45", "04:45", "04:30", "04:30",
                        "04:30", "04:30", "04:30", "04:30", "04:30", "04:15", "04:15", "04:15", "04:15",
                        "04:15", "04:15", "04:15", "04:00", "04:00", "04:00", "04:00", "04:00", "04:00",
                        "04:00", "04:00", "04:00", "04:00", "04:00", "04:00", "04:00",
                        "04:00", "04:00", "04:00", "04:00", "04:00", "04:00", "04:00", "04:00", "04:00",
                        "04:00", "04:00", "04:00", "04:00", "04:00", "04:00", "04:00", "04:00", "04:00",
                        "04:00", "04:00", "04:00", "04:00", "04:00", "04:00", "04:00", "04:00", "04:00",
                        "04:00", "04:15", "04:15", "04:15", "04:15", "04:15", "04:15", "04:15", "04:15",
                        "04:15", "04:15", "04:15", "04:15", "04:15", "04:15", "04:15", "04:15", "04:15",
                        "04:15", "04:15", "04:15", "04:15", "04:30", "04:30", "04:30", "04:30", "04:30",
                        "04:30", "04:30", "04:30", "04:30", "04:30", "04:30", "04:30", "04:30", "04:30",
                        "05:00", "05:00", "05:00", "05:00", "05:00", "05:00", "05:00", "05:00", "05:00",
                        "05:00", "05:00", "05:00", "05:00", "05:00", "05:15", "05:15", "05:15", "05:15",
                        "05:15", "05:15", "05:15", "05:15", "05:30", "05:30", "05:30", "05:30", "05:30",
                        "05:30",
                        "05:45", "05:45", "05:45", "05:45", "05:45", "05:45", "05:45", "06:00", "06:00",
                        "06:00", "06:00", "06:00", "06:00", "06:00", "06:00", "06:00", "06:00", "06:00",
                        "06:00", "06:00", "06:15", "06:15", "06:15", "06:15", "06:15", "06:15", "06:15",
                        "06:30", "06:30", "06:30", "06:30", "06:30", "06:30", "06:30", "06:45", "06:45",
                        "06:45", "06:45", "06:45", "06:45", "06:45", "06:45", "06:45", "06:45", "06:45",
                        "06:45", "06:45", "06:45", "07:00", "07:00", "07:00", "07:00", "07:00", "07:00",
                        "07:00", "07:15", "07:15", "06:15", "06:15", "06:15", "06:15", "06:15", "06:15",
                        "06:15", "06:15", "06:15", "06:15", "06:15", "06:15", "06:15", "06:30", "06:30",
                        "06:30", "06:30", "06:30", "06:30", "06:30", "06:30", "06:30", "06:30", "06:30",
                        "06:30", "06:30", "06:30", "06:45", "06:45", "06:45", "06:45", "06:45", "06:45",
                        "06:45", "07:00", "07:00", "07:00", "07:00", "07:00", "07:00", "07:00", "07:00",
                        "07:00", "07:00", "07:00", "07:00", "07:00", "07:00", "07:15", "07:15", "07:15",
                        "07:15", "07:15", "07:15", "07:15", "07:15", "07:15", "07:15", "07:15", "07:15",
                        "07:15", "07:15", "07:15", "07:15", "07:15"
                };

                String[] zuharTimesForYear = {
                        "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00",
                        "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00",
                        "13:00", "13:00", "13:00", "13:00", "13:00", "13:15", "13:15", "13:15", "13:15", "13:15",
                        "13:15", "13:15", "13:15", "13:15", "13:15", "13:15", "13:15", "13:15", "13:15", "13:15",
                        "13:15", "13:15", "13:15", "13:15", "13:15", "13:15", "13:15", "13:15", "13:15", "13:15",
                        "13:15", "13:15", "13:15", "13:15", "13:15", "13:15", "13:15", "13:15", "13:45", "13:45",
                        "13:45", "13:45", "13:45", "13:45", "13:45", "13:45", "13:45", "13:45", "13:45", "13:45",
                        "13:45", "13:45", "13:45", "13:45", "13:45", "13:45", "13:45", "13:45", "13:45", "13:45",
                        "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00",
                        "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00",
                        "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00",
                        "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00",
                        "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00",
                        "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00",
                        "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00",
                        "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00",
                        "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00",
                        "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00",
                        "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00",
                        "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00",
                        "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00",
                        "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00",
                        "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00",
                        "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00",
                        "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00",
                        "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00",
                        "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00",
                        "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00",
                        "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00",
                        "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00",
                        "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00",
                        "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00",
                        "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00",
                        "14:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00",
                        "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00",
                        "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00",
                        "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00",
                        "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00",
                        "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00",
                        "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00",
                        "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00",
                        "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00",
                        "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00",
                        "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00",
                        "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00",
                        "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00",
                        "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00"
                };

                String[] asrTimesForYear = {
                        "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00",
                        "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00",
                        "15:30", "15:30", "15:30", "15:30", "15:30", "15:30", "15:30", "15:30", "15:30", "15:30",
                        "15:30", "15:30", "15:30", "15:30", "15:30", "15:30", "15:30", "15:30", "15:30", "15:30",
                        "15:30", "15:30", "15:30", "15:30", "15:30", "15:30", "15:30", "15:30", "15:30", "15:30",
                        "15:30", "16:00", "16:00", "16:00", "16:00", "16:00", "16:00", "16:00", "16:00", "16:00",
                        "16:00", "16:00", "16:00", "16:00", "16:00", "16:30", "16:00", "16:30", "16:30", "16:30",
                        "16:30", "16:30", "16:30", "16:30", "16:30", "16:30", "16:30", "16:30", "16:30", "17:00",
                        "17:00", "17:00", "17:00", "17:00", "17:00", "17:00", "17:00", "17:00", "18:00", "18:00",
                        "18:00", "18:00", "18:00", "18:00", "18:00", "18:00", "18:00", "18:00", "18:00", "18:00",
                        "18:00", "18:00", "18:00", "18:00", "18:00", "18:00", "18:00", "18:00", "18:00", "18:00",
                        "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "18:30",
                        "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "18:30",
                        "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "18:30",
                        "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "18:30",
                        "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "19:00",
                        "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00",
                        "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00",
                        "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00",
                        "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00",
                        "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00",
                        "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00",
                        "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00",
                        "19:00", "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "18:30",
                        "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "18:30",
                        "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "18:00", "18:00",
                        "18:00", "18:00", "18:00", "18:00", "18:00", "18:00", "18:00", "18:00", "18:00", "18:00",
                        "18:00", "18:00", "18:00", "17:30", "17:30", "17:30", "17:30", "17:30", "17:30", "17:30",
                        "17:30", "17:30", "17:30", "17:30", "17:30", "17:30", "17:30", "17:30", "17:30", "17:30",
                        "17:30", "17:30", "17:30", "17:30", "17:00", "17:00", "17:00", "17:00", "17:00", "17:00",
                        "17:00", "17:00", "17:00", "17:00", "17:00", "17:00", "17:00", "17:00", "16:30", "16:30",
                        "15:30", "15:30", "15:30", "15:30", "15:30", "15:00", "15:00", "15:00", "15:00", "15:00",
                        "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00",
                        "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00",
                        "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00",
                        "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00",
                        "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00",
                        "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00",
                        "15:00", "15:00"
                };

                String[] maghribTimesForYear = {
                        "16:33", "16:34", "16:35", "16:36", "16:37", "16:38", "16:39", "16:41", "16:42", "16:43",
                        "16:45", "16:46", "16:48", "16:49", "16:51", "16:52", "16:54", "16:56", "16:57", "16:59",
                        "17:01", "17:02", "17:04", "17:06", "17:08", "17:10", "17:11", "17:13", "17:15", "17:17",
                        "17:19", "17:21", "17:23", "17:24", "17:26", "17:28", "17:30", "17:32", "17:34", "17:36",
                        "17:38", "17:40", "17:42", "17:44", "17:46", "17:48", "17:49", "17:51", "17:53", "17:55",
                        "17:57", "17:59", "18:01", "18:03", "18:05", "18:07", "18:09", "18:10", "18:12", "18:14",
                        "18:16", "18:18", "18:20", "18:22", "18:23", "18:25", "18:27", "18:29", "18:31", "18:33",
                        "18:34", "18:36", "18:38", "18:40", "18:42", "18:43", "18:45", "18:47", "18:49", "18:50",
                        "18:52", "18:54", "18:56", "18:57", "19:59", "20:01", "20:03", "20:04", "20:06", "20:08",
                        "20:10", "20:11", "20:13", "20:15", "20:17", "20:18", "20:20", "20:22", "20:24", "20:25",
                        "20:27", "20:29", "20:31", "20:32", "20:34", "20:36", "20:38", "20:39", "20:41", "20:43",
                        "20:45", "20:46", "20:48", "20:50", "20:52", "20:53", "20:55", "20:57", "20:59", "21:00",
                        "21:02", "21:04", "21:06", "21:07", "21:09", "21:11", "21:12", "21:14", "21:16", "21:18",
                        "21:19", "21:21", "21:23", "21:24", "21:26", "21:27", "21:29", "21:31", "21:32", "21:34",
                        "21:35", "21:37", "21:38", "21:40", "21:41", "21:43", "21:44", "21:45", "21:47", "21:48",
                        "21:49", "21:50", "21:52", "21:53", "21:54", "21:55", "21:56", "21:57", "21:58", "21:59",
                        "22:00", "22:00", "22:01", "22:02", "22:03", "22:03", "22:04", "22:04", "22:05", "22:05",
                        "22:05", "22:06", "22:06", "22:06", "22:06", "22:06", "22:06", "22:06", "22:06", "22:06",
                        "22:06", "22:06",
                        "22:05", "22:05", "22:05", "22:04", "22:04", "22:03", "22:03", "22:02", "22:01", "22:00",
                        "22:00", "21:59", "21:58", "21:57", "21:56", "21:55", "21:54", "21:53", "21:51", "21:50",
                        "21:49", "21:48", "21:46", "21:45", "21:44", "21:42", "21:41", "21:39", "21:38", "21:36",
                        "21:34", "21:33", "21:31", "21:29", "21:27", "21:26", "21:24", "21:22", "21:08", "21:18",
                        "21:16", "21:14", "21:12", "21:11", "21:08", "21:06", "21:04", "21:02", "21:00", "20:58",
                        "20:56", "20:54", "20:52", "20:50", "20:47", "20:45", "20:43", "20:41", "20:39", "20:36",
                        "20:34", "20:32", "20:29", "20:27", "20:25", "20:23", "20:20", "20:18", "20:16", "20:13",
                        "20:11", "20:08", "20:06", "20:04", "20:01", "19:59", "19:56", "19:54", "19:52", "19:49",
                        "19:47", "19:44", "19:42", "19:40", "19:37", "19:35", "19:32", "19:30", "19:28", "19:25",
                        "19:23", "19:20", "19:18", "19:16", "19:13", "19:11", "19:08", "19:06", "19:04", "19:01",
                        "18:59", "18:57", "18:54", "18:52", "18:50", "18:48", "18:45", "18:43", "18:41", "18:39",
                        "18:36", "18:34", "18:32", "18:30", "18:28", "18:26", "18:24", "18:21", "18:19", "18:17",
                        "17:15", "17:13", "17:12", "17:10", "17:08", "17:06", "17:04", "17:02", "17:00", "16:59",
                        "16:57", "16:55", "16:54", "16:52", "16:50", "16:49", "16:47", "16:46", "16:44", "16:43",
                        "16:42", "16:40", "16:39", "16:38", "16:37", "16:35", "16:34", "16:33", "16:32", "16:31",
                        "16:30", "16:30", "16:29", "16:28", "16:27", "16:27", "16:26", "16:26", "16:25", "16:25",
                        "16:24", "16:24", "16:24", "16:23", "16:23", "16:23", "16:23", "16:23", "16:23", "16:23",
                        "16:24", "16:24", "16:24", "16:25", "16:25", "16:25", "16:26", "16:27", "16:27", "16:28",
                        "16:29", "16:30", "16:30", "16:31"
                };

                String[] ishaTimesForYear = {
                        "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00",
                        "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00",
                        "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00",
                        "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00",
                        "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "22:45", "22:45",
                        "22:45", "22:45", "22:45", "22:45", "22:45", "22:30", "22:30", "22:30", "22:30", "22:30",
                        "22:30", "22:30", "22:15", "22:15", "22:15", "22:15", "22:15", "22:15", "22:15", "22:00",
                        "22:00", "22:00", "22:00", "22:00", "22:00", "22:00", "21:30", "21:30", "21:30", "21:30",
                        "21:30", "21:30", "21:30", "21:15", "21:15", "21:15", "21:15", "21:15", "21:15", "21:15",
                        "21:00", "21:00", "21:00", "21:00", "21:00", "21:00", "21:00", "20:45", "20:45", "20:45",
                        "20:45", "20:45", "20:45", "20:45", "20:30", "20:30", "20:30", "20:30", "20:30", "20:30",
                        "20:30", "20:30", "20:30", "20:30", "20:30", "20:30", "20:30", "20:30", "20:30", "19:30",
                        "19:30", "19:30", "19:30", "19:30", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00",
                        "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00",
                        "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00",
                        "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00",
                        "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00",
                        "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00",
                        "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00",
                        "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00",
                        "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00",
                        "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00",
                        "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "22:45", "22:45",
                        "22:45", "22:45", "22:45", "22:45", "22:45", "22:30", "22:30", "22:30", "22:30", "22:30",
                        "22:30", "22:30", "22:15", "22:15", "22:15", "22:15", "22:15", "22:15", "22:15", "22:00",
                        "22:00", "22:00", "22:00", "22:00", "22:00", "22:00", "21:30", "21:30", "21:30", "21:30",
                        "21:30", "21:30", "21:30", "21:15", "21:15", "21:15", "21:15", "21:15", "21:15", "21:15",
                        "21:00", "21:00", "21:00", "21:00", "21:00", "21:00", "21:00", "20:45", "20:45", "20:45",
                        "20:45", "20:45", "20:45", "20:45", "20:30", "20:30", "20:30", "20:30", "20:30", "20:30",
                        "20:30", "20:30", "20:30", "20:30", "20:30", "20:30", "20:30", "20:30", "20:30", "19:30",
                        "19:30", "19:30", "19:30", "19:30", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00",
                        "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00",
                        "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00",
                        "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00",
                        "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00",
                        "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00"
                };


                // Ensure dayOfYear is within the bounds of the array indices
                if (dayOfYear >= 0 && dayOfYear < fajrTimesForYear.length) {
                    fajr24 = fajrTimesForYear[dayOfYear].trim().toString();
                    zuhar24 = zuharTimesForYear[dayOfYear].trim().toString();
                    asr24 = asrTimesForYear[dayOfYear].trim().toString();
                    maghrib24 = maghribTimesForYear[dayOfYear].trim().toString();
                    isha24 = ishaTimesForYear[dayOfYear].trim().toString();

                    // Assign next day's prayer times to the following day's prayer times from the array
                    nextDayFajr = fajrTimesForYear[(dayOfYear + 1) % fajrTimesForYear.length].trim().toString();
                    nextDayZuhar = zuharTimesForYear[(dayOfYear + 1) % zuharTimesForYear.length].trim().toString();
                    nextDayAsr = asrTimesForYear[(dayOfYear + 1) % asrTimesForYear.length].trim().toString();
                    nextDayMaghrib = maghribTimesForYear[(dayOfYear + 1) % maghribTimesForYear.length].trim().toString();
                    nextDayIsha = ishaTimesForYear[(dayOfYear + 1) % ishaTimesForYear.length].trim().toString();
                    Log.d("--- GetTime() ---", "... GetTime() Prayers loaded from arrays successfully...");
                } else {

                    if (dayOfYear >= 1 && dayOfYear <= 90) { // Adjust times for the first quarter of the year
                        fajr24 = "6:00";
                        zuhar24 = "13:00";
                        asr24 = "15:00";
                        maghrib24 = "17:00";
                        isha24 = "19:00";
                    } else if (dayOfYear > 90 && dayOfYear <= 180) { // Adjust times for the second quarter of the year
                        fajr24 = "5:30";
                        zuhar24 = "13:30";
                        asr24 = "16:00";
                        maghrib24 = "19:00";
                        isha24 = "21:00";
                    } else if (dayOfYear > 180 && dayOfYear <= 270) { // Adjust times for the third quarter of the year
                        fajr24 = "5:00";
                        zuhar24 = "14:00";
                        asr24 = "18:30";
                        maghrib24 = "21:00";
                        isha24 = "22:00";
                    } else { // Adjust times for the fourth quarter of the year
                        fajr24 = "4:00";
                        zuhar24 = "14:00";
                        asr24 = "19:00";
                        maghrib24 = "22:00";
                        isha24 = "23:00";
                    }
                }


//                // Get the day of the year
//                // Get the Maghrib time for the current day of the year
//                if (dayOfYear >= 1 && dayOfYear <= maghribTimesForYear.length) {
//                    maghrib24 = maghribTimesForYear[dayOfYear - 1]; // Adjust for 0-based index
//                } else {
//
//                    maghrib24 = "4:31";
//                    // Handle the case if the day is out of range
//                    Log.e("GetTime()", "Day of year is out of range");
//                }

                Log.d("*** Error ***", " **** No matching date found in the data ***");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void GetTime(String... filePath) {

            long currentTimer = System.currentTimeMillis();

            if (currentTimer - lastPrayerTimeUpdate < PRAYER_TIME_UPDATE_INTERVAL) {
                // If less than 1 second has passed since the last update, do nothing
                return;
            }

            lastPrayerTimeUpdate = currentTimer;

            try {

                if (filePath.length > 0) {
                    // A file path was provided, use it
                    path = filePath[0];
                } else {
                    // No file path provided, use the default
                    path = "timings.xls";
//                path = "test.xls";
                }


                AssetManager am = getAssets();
                InputStream is = am.open(path);
                Workbook wb = Workbook.getWorkbook(is);


                Sheet sheet = wb.getSheet(0);
                int numColumns = sheet.getColumns();
                int numRows = sheet.getRows();
                int dateColumnIndex = 0;
                int fajrColumnIndex = 1;
                int zuharColumnIndex = 2;
                int asrColumnIndex = 3;
                int MaghribColumnIndex = 4;
                int ishaColumnIndex = 5;

                // Match the date format with the Excel date format to load the data
                String currentDateString = DateFormat.format("MM/dd/yyyy", new Date()).toString();
                // Declare and initialize the 2D array to hold the data
                String[][] data = new String[numRows][numColumns];

                // Load all the data into the array
                for (int row = 0; row < numRows; row++) {
                    for (int col = 0; col < numColumns; col++) {
                        Cell cell = sheet.getCell(col, row);
                        data[row][col] = cell.getContents();
                    }
                }

                // Find the row with the current date
                int currentRow = -1;
                String currentDate = "";
                if (currentDateString.length() >= 10) {
                    currentDate = currentDateString.substring(0, 10); // Extract date part
                }
                for (int row = 0; row < numRows; row++) {
                    String cellValue = data[row][dateColumnIndex];
                    String cellDate = "";
                    if (cellValue.length() >= 10) {
                        // Extract date part from cell value with different format
                        SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
                        Date cellDateObj = dateFormat.parse(cellValue);
                        SimpleDateFormat outputFormat = new SimpleDateFormat("MM/dd/yyyy");
                        cellDate = outputFormat.format(cellDateObj);
                    }
                    Log.d("My Activity", "Cell value: " + cellValue);
                    Log.d("My Activity", "Cell date: " + cellDate);
                    if (cellDate.equals(currentDate)) {
                        currentRow = row;
                        Log.d("My Activity", "Today's Date Matched: " + cellValue);

                        break;
                    }
                }

                if (currentRow != -1) {
                    // Current date found in the data
                    CharSequence currentdate = DateFormat.format("MM/dd/yyyy HH:mm:ss", new Date());
                    Log.wtf("My Activity", "System Date & Time: " + currentdate);

                    String[] currentRowData = data[currentRow];
                    String fajrTime = currentRowData[fajrColumnIndex].trim();
                    String zuharTime = currentRowData[zuharColumnIndex].trim();
                    String asrTime = currentRowData[asrColumnIndex].trim();
                    String MaghribTime = currentRowData[MaghribColumnIndex].trim();
                    String ishaTime = currentRowData[ishaColumnIndex].trim();

                    // Get the prayer times for the next day
                    int nextDayRow = (currentRow + 1) % numRows;
                    String[] nextDayRowData = data[nextDayRow];
                    String nextDayFajrTime = nextDayRowData[fajrColumnIndex].trim();
                    String nextDayZuharTime = nextDayRowData[zuharColumnIndex].trim();
                    String nextDayAsrTime = nextDayRowData[asrColumnIndex].trim();
                    String nextDayMaghribTime = nextDayRowData[MaghribColumnIndex].trim();
                    String nextDayIshaTime = nextDayRowData[ishaColumnIndex].trim();

                    fajrOriginal = fajrTime;
                    zuharOriginal = zuharTime;
                    asrOriginal = asrTime;
                    maghribOriginal = MaghribTime;
                    ishaOriginal = ishaTime;

                    nextDayFajr = nextDayFajrTime;
                    nextDayZuhar = nextDayZuharTime;
                    nextDayAsr = nextDayAsrTime;
                    nextDayMaghrib = nextDayMaghribTime;
                    nextDayIsha = nextDayIshaTime;

                    // Apply adjustments made by the user to the current day's prayer times
                    fajr24 = applyAdjustments(fajrOriginal, fajrAdjustment);
                    zuhar24 = applyAdjustments(zuharOriginal, zuharAdjustment);
                    asr24 = applyAdjustments(asrOriginal, asrAdjustment);
                    maghrib24 = applyAdjustments(maghribOriginal, maghribAdjustment);
                    isha24 = applyAdjustments(ishaOriginal, ishaAdjustment);

                    // Store the next day's prayer times with adjustments applied
                    nextFajr = applyAdjustments(nextDayFajr, fajrAdjustment);
                    nextZuhar = applyAdjustments(nextDayZuhar, zuharAdjustment);
                    nextAsr = applyAdjustments(nextDayAsr, asrAdjustment);
                    nextMaghrib = applyAdjustments(nextDayMaghrib, maghribAdjustment);
                    nextIsha = applyAdjustments(nextDayIsha, ishaAdjustment);

                    Log.d("--- GetTime() ---", "... GetTime() Prayers Loaded successfully...");
                }


                else {


                    // Calculate the day of the year
//                Calendar calendar = Calendar.getInstance();
//                int dayOfYear = calendar.get(Calendar.DAY_OF_YEAR);
//
//                // Adjust prayer times based on the day of the year
//                // You can implement your logic here to adjust the prayer times based on the day of the year
//                // For example, you can have a different set of default times for different periods of the year
//
//                if (dayOfYear >= 1 && dayOfYear <= 90) { // Adjust times for the first quarter of the year
//                    fajr24 = "6:00";
//                    zuhar24 = "13:00";
//                    asr24 = "15:00";
//                    isha24 = "19:00";
//                } else if (dayOfYear > 90 && dayOfYear <= 180) { // Adjust times for the second quarter of the year
//                    fajr24 = "5:30";
//                    zuhar24 = "13:30";
//                    asr24 = "16:00";
//                    isha24 = "21:00";
//                } else if (dayOfYear > 180 && dayOfYear <= 270) { // Adjust times for the third quarter of the year
//                    fajr24 = "5:00";
//                    zuhar24 = "14:00";
//                    asr24 = "18:30";
//                    isha24 = "22:00";
//                } else { // Adjust times for the fourth quarter of the year
//                    fajr24 = "4:00";
//                    zuhar24 = "14:00";
//                    asr24 = "19:00";
//                    isha24 = "23:00";
//                }


                    // No matching date found in the data, assign values from arrays
                    int dayOfYear = Calendar.getInstance().get(Calendar.DAY_OF_YEAR);


                    String[] fajrTimesForYear = {
                            "7:00", "7:00", "7:00", "7:00", "7:00", "7:00", "7:00", "7:00", "7:00", "7:00",
                            "7:00", "7:00", "7:00", "7:00", "7:00", "7:00", "7:00", "7:00", "7:00", "7:00",
                            "7:00", "7:00", "7:00", "7:00", "7:00", "7:00", "7:00", "7:00", "7:00", "7:00",
                            "7:00", "7:00", "7:00", "6:45", "6:45", "6:45", "6:45", "6:45", "6:45", "6:45",
                            "6:45", "6:45", "6:45", "6:45", "6:45", "6:45", "6:45", "6:30", "6:30", "6:30",
                            "6:30", "6:30", "6:30", "6:15", "6:15", "6:15", "6:15", "6:15", "6:15", "6:15",
                            "6:15", "6:00", "6:00", "6:00", "6:00", "6:00", "6:00", "6:00", "5:45", "5:45",
                            "5:45", "5:45", "5:45", "5:45", "5:45", "5:30", "5:30", "5:30", "5:30", "5:30",
                            "5:30", "5:30", "5:10", "5:10", "06:00", "06:00", "06:00", "06:00", "06:00", "05:45",
                            "05:45", "05:45", "05:45", "05:45", "05:45", "05:45", "05:30", "05:30", "05:30",
                            "05:30", "05:30", "05:30", "05:30", "05:15", "05:15", "05:15", "05:15", "05:15",
                            "05:15", "05:15", "05:00", "05:00", "05:00", "05:00", "05:00", "05:00", "05:00",
                            "04:45", "04:45", "04:45", "04:45", "04:45", "04:45", "04:45", "04:30", "04:30",
                            "04:30", "04:30", "04:30", "04:30", "04:30", "04:15", "04:15", "04:15", "04:15",
                            "04:15", "04:15", "04:15", "04:00", "04:00", "04:00", "04:00", "04:00", "04:00",
                            "04:00", "04:00", "04:00", "04:00", "04:00", "04:00", "04:00",
                            "04:00", "04:00", "04:00", "04:00", "04:00", "04:00", "04:00", "04:00", "04:00",
                            "04:00", "04:00", "04:00", "04:00", "04:00", "04:00", "04:00", "04:00", "04:00",
                            "04:00", "04:00", "04:00", "04:00", "04:00", "04:00", "04:00", "04:00", "04:00",
                            "04:00", "04:15", "04:15", "04:15", "04:15", "04:15", "04:15", "04:15", "04:15",
                            "04:15", "04:15", "04:15", "04:15", "04:15", "04:15", "04:15", "04:15", "04:15",
                            "04:15", "04:15", "04:15", "04:15", "04:30", "04:30", "04:30", "04:30", "04:30",
                            "04:30", "04:30", "04:30", "04:30", "04:30", "04:30", "04:30", "04:30", "04:30",
                            "05:00", "05:00", "05:00", "05:00", "05:00", "05:00", "05:00", "05:00", "05:00",
                            "05:00", "05:00", "05:00", "05:00", "05:00", "05:15", "05:15", "05:15", "05:15",
                            "05:15", "05:15", "05:15", "05:15", "05:30", "05:30", "05:30", "05:30", "05:30",
                            "05:30",
                            "05:45", "05:45", "05:45", "05:45", "05:45", "05:45", "05:45", "06:00", "06:00",
                            "06:00", "06:00", "06:00", "06:00", "06:00", "06:00", "06:00", "06:00", "06:00",
                            "06:00", "06:00", "06:15", "06:15", "06:15", "06:15", "06:15", "06:15", "06:15",
                            "06:30", "06:30", "06:30", "06:30", "06:30", "06:30", "06:30", "06:45", "06:45",
                            "06:45", "06:45", "06:45", "06:45", "06:45", "06:45", "06:45", "06:45", "06:45",
                            "06:45", "06:45", "06:45", "07:00", "07:00", "07:00", "07:00", "07:00", "07:00",
                            "07:00", "07:15", "07:15", "06:15", "06:15", "06:15", "06:15", "06:15", "06:15",
                            "06:15", "06:15", "06:15", "06:15", "06:15", "06:15", "06:15", "06:30", "06:30",
                            "06:30", "06:30", "06:30", "06:30", "06:30", "06:30", "06:30", "06:30", "06:30",
                            "06:30", "06:30", "06:30", "06:45", "06:45", "06:45", "06:45", "06:45", "06:45",
                            "06:45", "07:00", "07:00", "07:00", "07:00", "07:00", "07:00", "07:00", "07:00",
                            "07:00", "07:00", "07:00", "07:00", "07:00", "07:00", "07:15", "07:15", "07:15",
                            "07:15", "07:15", "07:15", "07:15", "07:15", "07:15", "07:15", "07:15", "07:15",
                            "07:15", "07:15", "07:15", "07:15", "07:15"
                    };

                    String[] zuharTimesForYear = {
                            "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00",
                            "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00",
                            "13:00", "13:00", "13:00", "13:00", "13:00", "13:15", "13:15", "13:15", "13:15", "13:15",
                            "13:15", "13:15", "13:15", "13:15", "13:15", "13:15", "13:15", "13:15", "13:15", "13:15",
                            "13:15", "13:15", "13:15", "13:15", "13:15", "13:15", "13:15", "13:15", "13:15", "13:15",
                            "13:15", "13:15", "13:15", "13:15", "13:15", "13:15", "13:15", "13:15", "13:45", "13:45",
                            "13:45", "13:45", "13:45", "13:45", "13:45", "13:45", "13:45", "13:45", "13:45", "13:45",
                            "13:45", "13:45", "13:45", "13:45", "13:45", "13:45", "13:45", "13:45", "13:45", "13:45",
                            "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00",
                            "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00",
                            "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00",
                            "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00",
                            "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00",
                            "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00",
                            "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00",
                            "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00",
                            "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00",
                            "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00",
                            "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00",
                            "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00",
                            "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00",
                            "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00",
                            "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00",
                            "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00",
                            "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00",
                            "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00",
                            "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00",
                            "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00",
                            "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00",
                            "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00",
                            "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00",
                            "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00",
                            "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00", "14:00",
                            "14:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00",
                            "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00",
                            "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00",
                            "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00",
                            "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00",
                            "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00",
                            "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00",
                            "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00",
                            "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00",
                            "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00",
                            "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00",
                            "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00",
                            "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00",
                            "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00", "13:00"
                    };

                    String[] asrTimesForYear = {
                            "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00",
                            "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00",
                            "15:30", "15:30", "15:30", "15:30", "15:30", "15:30", "15:30", "15:30", "15:30", "15:30",
                            "15:30", "15:30", "15:30", "15:30", "15:30", "15:30", "15:30", "15:30", "15:30", "15:30",
                            "15:30", "15:30", "15:30", "15:30", "15:30", "15:30", "15:30", "15:30", "15:30", "15:30",
                            "15:30", "16:00", "16:00", "16:00", "16:00", "16:00", "16:00", "16:00", "16:00", "16:00",
                            "16:00", "16:00", "16:00", "16:00", "16:00", "16:30", "16:00", "16:30", "16:30", "16:30",
                            "16:30", "16:30", "16:30", "16:30", "16:30", "16:30", "16:30", "16:30", "16:30", "17:00",
                            "17:00", "17:00", "17:00", "17:00", "17:00", "17:00", "17:00", "17:00", "18:00", "18:00",
                            "18:00", "18:00", "18:00", "18:00", "18:00", "18:00", "18:00", "18:00", "18:00", "18:00",
                            "18:00", "18:00", "18:00", "18:00", "18:00", "18:00", "18:00", "18:00", "18:00", "18:00",
                            "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "18:30",
                            "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "18:30",
                            "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "18:30",
                            "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "18:30",
                            "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "19:00",
                            "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00",
                            "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00",
                            "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00",
                            "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00",
                            "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00",
                            "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00",
                            "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00",
                            "19:00", "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "18:30",
                            "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "18:30",
                            "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "18:30", "18:00", "18:00",
                            "18:00", "18:00", "18:00", "18:00", "18:00", "18:00", "18:00", "18:00", "18:00", "18:00",
                            "18:00", "18:00", "18:00", "17:30", "17:30", "17:30", "17:30", "17:30", "17:30", "17:30",
                            "17:30", "17:30", "17:30", "17:30", "17:30", "17:30", "17:30", "17:30", "17:30", "17:30",
                            "17:30", "17:30", "17:30", "17:30", "17:00", "17:00", "17:00", "17:00", "17:00", "17:00",
                            "17:00", "17:00", "17:00", "17:00", "17:00", "17:00", "17:00", "17:00", "16:30", "16:30",
                            "15:30", "15:30", "15:30", "15:30", "15:30", "15:00", "15:00", "15:00", "15:00", "15:00",
                            "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00",
                            "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00",
                            "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00",
                            "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00",
                            "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00",
                            "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00", "15:00",
                            "15:00", "15:00"
                    };

                    String[] maghribTimesForYear = {
                            "16:33", "16:34", "16:35", "16:36", "16:37", "16:38", "16:39", "16:41", "16:42", "16:43",
                            "16:45", "16:46", "16:48", "16:49", "16:51", "16:52", "16:54", "16:56", "16:57", "16:59",
                            "17:01", "17:02", "17:04", "17:06", "17:08", "17:10", "17:11", "17:13", "17:15", "17:17",
                            "17:19", "17:21", "17:23", "17:24", "17:26", "17:28", "17:30", "17:32", "17:34", "17:36",
                            "17:38", "17:40", "17:42", "17:44", "17:46", "17:48", "17:49", "17:51", "17:53", "17:55",
                            "17:57", "17:59", "18:01", "18:03", "18:05", "18:07", "18:09", "18:10", "18:12", "18:14",
                            "18:16", "18:18", "18:20", "18:22", "18:23", "18:25", "18:27", "18:29", "18:31", "18:33",
                            "18:34", "18:36", "18:38", "18:40", "18:42", "18:43", "18:45", "18:47", "18:49", "18:50",
                            "18:52", "18:54", "18:56", "18:57", "19:59", "20:01", "20:03", "20:04", "20:06", "20:08",
                            "20:10", "20:11", "20:13", "20:15", "20:17", "20:18", "20:20", "20:22", "20:24", "20:25",
                            "20:27", "20:29", "20:31", "20:32", "20:34", "20:36", "20:38", "20:39", "20:41", "20:43",
                            "20:45", "20:46", "20:48", "20:50", "20:52", "20:53", "20:55", "20:57", "20:59", "21:00",
                            "21:02", "21:04", "21:06", "21:07", "21:09", "21:11", "21:12", "21:14", "21:16", "21:18",
                            "21:19", "21:21", "21:23", "21:24", "21:26", "21:27", "21:29", "21:31", "21:32", "21:34",
                            "21:35", "21:37", "21:38", "21:40", "21:41", "21:43", "21:44", "21:45", "21:47", "21:48",
                            "21:49", "21:50", "21:52", "21:53", "21:54", "21:55", "21:56", "21:57", "21:58", "21:59",
                            "22:00", "22:00", "22:01", "22:02", "22:03", "22:03", "22:04", "22:04", "22:05", "22:05",
                            "22:05", "22:06", "22:06", "22:06", "22:06", "22:06", "22:06", "22:06", "22:06", "22:06",
                            "22:06", "22:06",
                            "22:05", "22:05", "22:05", "22:04", "22:04", "22:03", "22:03", "22:02", "22:01", "22:00",
                            "22:00", "21:59", "21:58", "21:57", "21:56", "21:55", "21:54", "21:53", "21:51", "21:50",
                            "21:49", "21:48", "21:46", "21:45", "21:44", "21:42", "21:41", "21:39", "21:38", "21:36",
                            "21:34", "21:33", "21:31", "21:29", "21:27", "21:26", "21:24", "21:22", "21:08", "21:18",
                            "21:16", "21:14", "21:12", "21:11", "21:08", "21:06", "21:04", "21:02", "21:00", "20:58",
                            "20:56", "20:54", "20:52", "20:50", "20:47", "20:45", "20:43", "20:41", "20:39", "20:36",
                            "20:34", "20:32", "20:29", "20:27", "20:25", "20:23", "20:20", "20:18", "20:16", "20:13",
                            "20:11", "20:08", "20:06", "20:04", "20:01", "19:59", "19:56", "19:54", "19:52", "19:49",
                            "19:47", "19:44", "19:42", "19:40", "19:37", "19:35", "19:32", "19:30", "19:28", "19:25",
                            "19:23", "19:20", "19:18", "19:16", "19:13", "19:11", "19:08", "19:06", "19:04", "19:01",
                            "18:59", "18:57", "18:54", "18:52", "18:50", "18:48", "18:45", "18:43", "18:41", "18:39",
                            "18:36", "18:34", "18:32", "18:30", "18:28", "18:26", "18:24", "18:21", "18:19", "18:17",
                            "17:15", "17:13", "17:12", "17:10", "17:08", "17:06", "17:04", "17:02", "17:00", "16:59",
                            "16:57", "16:55", "16:54", "16:52", "16:50", "16:49", "16:47", "16:46", "16:44", "16:43",
                            "16:42", "16:40", "16:39", "16:38", "16:37", "16:35", "16:34", "16:33", "16:32", "16:31",
                            "16:30", "16:30", "16:29", "16:28", "16:27", "16:27", "16:26", "16:26", "16:25", "16:25",
                            "16:24", "16:24", "16:24", "16:23", "16:23", "16:23", "16:23", "16:23", "16:23", "16:23",
                            "16:24", "16:24", "16:24", "16:25", "16:25", "16:25", "16:26", "16:27", "16:27", "16:28",
                            "16:29", "16:30", "16:30", "16:31"
                    };

                    String[] ishaTimesForYear = {
                            "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00",
                            "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00",
                            "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00",
                            "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00",
                            "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "22:45", "22:45",
                            "22:45", "22:45", "22:45", "22:45", "22:45", "22:30", "22:30", "22:30", "22:30", "22:30",
                            "22:30", "22:30", "22:15", "22:15", "22:15", "22:15", "22:15", "22:15", "22:15", "22:00",
                            "22:00", "22:00", "22:00", "22:00", "22:00", "22:00", "21:30", "21:30", "21:30", "21:30",
                            "21:30", "21:30", "21:30", "21:15", "21:15", "21:15", "21:15", "21:15", "21:15", "21:15",
                            "21:00", "21:00", "21:00", "21:00", "21:00", "21:00", "21:00", "20:45", "20:45", "20:45",
                            "20:45", "20:45", "20:45", "20:45", "20:30", "20:30", "20:30", "20:30", "20:30", "20:30",
                            "20:30", "20:30", "20:30", "20:30", "20:30", "20:30", "20:30", "20:30", "20:30", "19:30",
                            "19:30", "19:30", "19:30", "19:30", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00",
                            "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00",
                            "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00",
                            "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00",
                            "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00",
                            "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00",
                            "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00",
                            "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00",
                            "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00",
                            "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00",
                            "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "23:00", "22:45", "22:45",
                            "22:45", "22:45", "22:45", "22:45", "22:45", "22:30", "22:30", "22:30", "22:30", "22:30",
                            "22:30", "22:30", "22:15", "22:15", "22:15", "22:15", "22:15", "22:15", "22:15", "22:00",
                            "22:00", "22:00", "22:00", "22:00", "22:00", "22:00", "21:30", "21:30", "21:30", "21:30",
                            "21:30", "21:30", "21:30", "21:15", "21:15", "21:15", "21:15", "21:15", "21:15", "21:15",
                            "21:00", "21:00", "21:00", "21:00", "21:00", "21:00", "21:00", "20:45", "20:45", "20:45",
                            "20:45", "20:45", "20:45", "20:45", "20:30", "20:30", "20:30", "20:30", "20:30", "20:30",
                            "20:30", "20:30", "20:30", "20:30", "20:30", "20:30", "20:30", "20:30", "20:30", "19:30",
                            "19:30", "19:30", "19:30", "19:30", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00",
                            "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00",
                            "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00",
                            "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00",
                            "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00",
                            "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00", "19:00"
                    };


                    // Ensure dayOfYear is within the bounds of the array indices
                    if (dayOfYear >= 0 && dayOfYear < fajrTimesForYear.length) {
                        fajr24 = fajrTimesForYear[dayOfYear].trim().toString();
                        zuhar24 = zuharTimesForYear[dayOfYear].trim().toString();
                        asr24 = asrTimesForYear[dayOfYear].trim().toString();
                        maghrib24 = maghribTimesForYear[dayOfYear].trim().toString();
                        isha24 = ishaTimesForYear[dayOfYear].trim().toString();

                        // Assign next day's prayer times to the following day's prayer times from the array
                        nextDayFajr = fajrTimesForYear[(dayOfYear + 1) % fajrTimesForYear.length].trim().toString();
                        nextDayZuhar = zuharTimesForYear[(dayOfYear + 1) % zuharTimesForYear.length].trim().toString();
                        nextDayAsr = asrTimesForYear[(dayOfYear + 1) % asrTimesForYear.length].trim().toString();
                        nextDayMaghrib = maghribTimesForYear[(dayOfYear + 1) % maghribTimesForYear.length].trim().toString();
                        nextDayIsha = ishaTimesForYear[(dayOfYear + 1) % ishaTimesForYear.length].trim().toString();
                        Log.d("--- GetTime() ---", "... GetTime() Prayers loaded from arrays successfully...");
                    } else {

                        if (dayOfYear >= 1 && dayOfYear <= 90) { // Adjust times for the first quarter of the year
                            fajr24 = "6:00";
                            zuhar24 = "13:00";
                            asr24 = "15:00";
                            maghrib24 = "17:00";
                            isha24 = "19:00";
                        } else if (dayOfYear > 90 && dayOfYear <= 180) { // Adjust times for the second quarter of the year
                            fajr24 = "5:30";
                            zuhar24 = "13:30";
                            asr24 = "16:00";
                            maghrib24 = "19:00";
                            isha24 = "21:00";
                        } else if (dayOfYear > 180 && dayOfYear <= 270) { // Adjust times for the third quarter of the year
                            fajr24 = "5:00";
                            zuhar24 = "14:00";
                            asr24 = "18:30";
                            maghrib24 = "21:00";
                            isha24 = "22:00";
                        } else { // Adjust times for the fourth quarter of the year
                            fajr24 = "4:00";
                            zuhar24 = "14:00";
                            asr24 = "19:00";
                            maghrib24 = "22:00";
                            isha24 = "23:00";
                        }
                    }


//                // Get the day of the year
//                // Get the Maghrib time for the current day of the year
//                if (dayOfYear >= 1 && dayOfYear <= maghribTimesForYear.length) {
//                    maghrib24 = maghribTimesForYear[dayOfYear - 1]; // Adjust for 0-based index
//                } else {
//
//                    maghrib24 = "4:31";
//                    // Handle the case if the day is out of range
//                    Log.e("GetTime()", "Day of year is out of range");
//                }

                    Log.d("*** Error ***", " **** No matching date found in the data ***");
                }
            } catch (BiffException e) {
                throw new RuntimeException(e);
            } catch (IOException e) {
                throw new RuntimeException(e);
            } catch (ParseException e) {
                throw new RuntimeException(e);
            }
        }




            public void AddMinutes() {
        try {
            { ///////////////////////////// coments


//                NextDayPrayerTimes();
                // Check if fajrAdded has been modified
//            if (isFajrAddMinutesPressed) {
//                    // Calculate the modified Fajr time by adding user modifications
//                    LocalTime baseFajrTime = LocalTime.parse(fajrOriginal, DateTimeFormatter.ofPattern("H:mm"));
//                    fajrAdded = baseFajrTime.plusMinutes(fajrAdditionMinutes);
//                    String formattedFajrTime = formatPrayerTime(fajrAdded);
//                    fajr24 = (formattedFajrTime.trim());
//
//                } else {
//
//                // FajrAdded hasn't been modified, use the default fajr24 value
//                    fajrAdded = LocalTime.parse(fajr24, DateTimeFormatter.ofPattern("H:mm"));
//
//            }
//
//            if (isZuharAddMinutesPressed) {
//                // Calculate the modified Zuhar time by adding user modifications
//                LocalTime baseZuharTime = LocalTime.parse(zuharOriginal, DateTimeFormatter.ofPattern("H:mm"));
//                zuharAdded = baseZuharTime.plusMinutes(zuharAdditionMinutes);
//                zuhar24 = formatPrayerTime(zuharAdded).trim();
//            } else {
//                zuharAdded = LocalTime.parse(zuharOriginal, DateTimeFormatter.ofPattern("H:mm"));
//                zuhar24 = (zuharOriginal.trim());
//            }
//
//            if (isAsrAddMinutesPressed) {
//                // Calculate the modified Asr time by adding user modifications
//                LocalTime baseAsrTime = LocalTime.parse(asr24, DateTimeFormatter.ofPattern("H:mm"));
//                asrAdded = baseAsrTime.plusMinutes(asrAdditionMinutes);
//            } else {
//                asrAdded = LocalTime.parse(asr24, DateTimeFormatter.ofPattern("H:mm"));
//            }
//
//            if (isMaghribAddMinutesPressed) {
//                // Calculate the modified Maghrib time by adding user modifications
//                LocalTime baseMaghribTime = LocalTime.parse(maghrib24, DateTimeFormatter.ofPattern("H:mm"));
//                maghribAdded = baseMaghribTime.plusMinutes(maghribAdditionMinutes);
//            } else {
//                maghribAdded = LocalTime.parse(maghrib24, DateTimeFormatter.ofPattern("H:mm"));
//            }
//            if (isIshaAddMinutesPressed) {
//                // Calculate the modified Isha time by adding user modifications
//                LocalTime baseIshaTime = LocalTime.parse(isha24, DateTimeFormatter.ofPattern("H:mm"));
//                ishaAdded = baseIshaTime.plusMinutes(ishaAdditionMinutes);
//            } else {
//                ishaAdded = LocalTime.parse(isha24, DateTimeFormatter.ofPattern("H:mm"));
//            }


//
//// Check if Fajr time modification button is pressed
//            if (isFajrAddMinutesPressed) {
//                // Check if the next Fajr time is the one to be considered
//                if (nextFajrCheck) {
//                    // Check if user wants to add 0 minutes, indicating no modification
//                    if (fajrAdditionMinutes == 0) {
//                        // Your code to execute after 30 seconds
//                        fajrAdded = LocalTime.parse(nextFajr, DateTimeFormatter.ofPattern("H:mm"));
//                    } else {
//                        // Calculate modified Fajr time by adding user modifications
//                        LocalTime baseFajrTime = LocalTime.parse(nextFajr, DateTimeFormatter.ofPattern("H:mm"));
//                        fajrAdded = baseFajrTime.plusMinutes(fajrAdditionMinutes);
//                    }
//                } else {
//                    // Calculate modified Fajr time by adding user modifications
//                    LocalTime baseFajrTime = LocalTime.parse(fajr24, DateTimeFormatter.ofPattern("H:mm"));
//                    fajrAdded = baseFajrTime.plusMinutes(fajrAdditionMinutes);
//                }
//            } else {
//
//                // FajrAdded hasn't been modified, use the default fajr24 value
//                fajrAdded = LocalTime.parse(fajr24, DateTimeFormatter.ofPattern("H:mm"));
//
//                // Check if the next Fajr time is the one to be considered
//                if (nextFajrCheck) {
//                    // Check if user wants to add 0 minutes, indicating no modification
//                    if (fajrAdditionMinutes == 0) {
//                        // Your code to execute after 30 seconds
//                        fajrAdded = LocalTime.parse(nextFajr, DateTimeFormatter.ofPattern("H:mm"));
//                    } else {
//                        // Calculate modified Fajr time by adding user modifications
//                        LocalTime baseFajrTime = LocalTime.parse(nextFajr, DateTimeFormatter.ofPattern("H:mm"));
//                        fajrAdded = baseFajrTime.plusMinutes(fajrAdditionMinutes);
//                    }
//                }
//
//            }
//// Check if Zuhar time modification button is pressed
//            if (isZuharAddMinutesPressed) {
//                // Check if the next Zuhar time is the one to be considered
//                if (nextZuharCheck) {
//                    // Check if user wants to add 0 minutes, indicating no modification
//                    if (zuharAdditionMinutes == 0) {
//                        // Your code to execute after 30 seconds
//                        zuharAdded = LocalTime.parse(nextZuhar, DateTimeFormatter.ofPattern("H:mm"));
//                    } else {
//                        // Calculate modified Zuhar time by adding user modifications
//                        LocalTime baseZuharTime = LocalTime.parse(nextZuhar, DateTimeFormatter.ofPattern("H:mm"));
//                        zuharAdded = baseZuharTime.plusMinutes(zuharAdditionMinutes);
//                    }
//                } else {
//                    // Calculate modified Zuhar time by adding user modifications
//                    LocalTime baseZuharTime = LocalTime.parse(zuhar24, DateTimeFormatter.ofPattern("H:mm"));
//                    zuharAdded = baseZuharTime.plusMinutes(zuharAdditionMinutes);
//                }
//            } else {
//
//                // ZuharAdded hasn't been modified, use the default zuhar24 value
//                zuharAdded = LocalTime.parse(zuhar24, DateTimeFormatter.ofPattern("H:mm"));
//
//                // Check if the next Zuhar time is the one to be considered
//                if (nextZuharCheck) {
//                    // Check if user wants to add 0 minutes, indicating no modification
//                    if (zuharAdditionMinutes == 0) {
//                        // Your code to execute after 30 seconds
//                        zuharAdded = LocalTime.parse(nextZuhar, DateTimeFormatter.ofPattern("H:mm"));
//                    } else {
//                        // Calculate modified Zuhar time by adding user modifications
//                        LocalTime baseZuharTime = LocalTime.parse(nextZuhar, DateTimeFormatter.ofPattern("H:mm"));
//                        zuharAdded = baseZuharTime.plusMinutes(zuharAdditionMinutes);
//                    }
//                }
//
//            }
//
//            // Check if Asr time modification button is pressed
//            if (isAsrAddMinutesPressed) {
//
//                // Check if the next Asr time is the one to be considered
//                if (nextAsrCheck) {
//                    // Check if user wants to add 0 minutes, indicating no modification
//                    if (asrAdditionMinutes == 0) {
//                        // Your code to execute after 30 seconds
//                        asrAdded = LocalTime.parse(nextAsr, DateTimeFormatter.ofPattern("H:mm"));
//                    } else {
//                        // Calculate modified Asr time by adding user modifications
//                        LocalTime baseAsrTime = LocalTime.parse(nextAsr, DateTimeFormatter.ofPattern("H:mm"));
//                        asrAdded = baseAsrTime.plusMinutes(asrAdditionMinutes);
//                    }
//                } else {
//                    // Calculate modified Asr time by adding user modifications
//                    LocalTime baseAsrTime = LocalTime.parse(asr24, DateTimeFormatter.ofPattern("H:mm"));
//                    asrAdded = baseAsrTime.plusMinutes(asrAdditionMinutes);
//                }
//            } else {
//                // AsrAdded hasn't been modified, use the default asr24 value
//                asrAdded = LocalTime.parse(asr24, DateTimeFormatter.ofPattern("H:mm"));
//
//                // Check if the next Asr time is the one to be considered
//                if (nextAsrCheck) {
//                    // Check if user wants to add 0 minutes, indicating no modification
//                    if (asrAdditionMinutes == 0) {
//                        // Your code to execute after 30 seconds
//                        asrAdded = LocalTime.parse(nextAsr, DateTimeFormatter.ofPattern("H:mm"));
//                    } else {
//                        // Calculate modified Asr time by adding user modifications
//                        LocalTime baseAsrTime = LocalTime.parse(nextAsr, DateTimeFormatter.ofPattern("H:mm"));
//                        asrAdded = baseAsrTime.plusMinutes(asrAdditionMinutes);
//                    }
//                }
//
//            }
//
//// Check if Maghrib time modification button is pressed
//            if (isMaghribAddMinutesPressed) {
//                // Check if the next Maghrib time is the one to be considered
//                if (nextMaghribCheck) {
//                    // Check if user wants to add 0 minutes, indicating no modification
//                    if (maghribAdditionMinutes == 0) {
//                        // Your code to execute after 30 seconds
//                        maghribAdded = LocalTime.parse(nextMaghrib, DateTimeFormatter.ofPattern("H:mm"));
//                    } else {
//                        // Calculate modified Maghrib time by adding user modifications
//                        LocalTime baseMaghribTime = LocalTime.parse(nextMaghrib, DateTimeFormatter.ofPattern("H:mm"));
//                        maghribAdded = baseMaghribTime.plusMinutes(maghribAdditionMinutes);
//                    }
//                } else {
//                    // Calculate modified Maghrib time by adding user modifications
//                    LocalTime baseMaghribTime = LocalTime.parse(maghrib24, DateTimeFormatter.ofPattern("H:mm"));
//                    maghribAdded = baseMaghribTime.plusMinutes(maghribAdditionMinutes);
//                }
//            } else {
//                // MaghribAdded hasn't been modified, use the default maghrib24 value
//                maghribAdded = LocalTime.parse(maghrib24, DateTimeFormatter.ofPattern("H:mm"));
//
//                // Check if the next Maghrib time is the one to be considered
//                if (nextMaghribCheck) {
//                    // Check if user wants to add 0 minutes, indicating no modification
//                    if (maghribAdditionMinutes == 0) {
//                        // Your code to execute after 30 seconds
//                        maghribAdded = LocalTime.parse(nextMaghrib, DateTimeFormatter.ofPattern("H:mm"));
//                    } else {
//                        // Calculate modified Maghrib time by adding user modifications
//                        LocalTime baseMaghribTime = LocalTime.parse(nextMaghrib, DateTimeFormatter.ofPattern("H:mm"));
//                        maghribAdded = baseMaghribTime.plusMinutes(maghribAdditionMinutes);
//                    }
//                }
//
//            }
//
//            // Check if IshaAdded has been modified
//            if (isIshaAddMinutesPressed) {
//                if (nextIshaCheck) {
//                    if (ishaAdditionMinutes == 0 ) {
//                        // Your code to execute after 30 seconds
//                        ishaAdded = LocalTime.parse(nextIsha, DateTimeFormatter.ofPattern("H:mm"));
//
//                    } else {
//                        LocalTime baseIshaTime = LocalTime.parse(nextIsha, DateTimeFormatter.ofPattern("H:mm"));
//                        ishaAdded = baseIshaTime.plusMinutes(ishaAdditionMinutes);
//                    }
//                }
//                else {
//                    // Calculate the modified Isha time by adding user modifications
//                    LocalTime baseIshaTime = LocalTime.parse(isha24, DateTimeFormatter.ofPattern("H:mm"));
//                    ishaAdded = baseIshaTime.plusMinutes(ishaAdditionMinutes);
//                }
//
//
//            } else {
//                // IshaAdded hasn't been modified, use the default isha24 value
//                ishaAdded = LocalTime.parse(isha24, DateTimeFormatter.ofPattern("H:mm"));
//
//                if (nextIshaCheck) {
//                    if (ishaAdditionMinutes == 0 ) {
//                        // Your code to execute after 30 seconds
//                        ishaAdded = LocalTime.parse(nextIsha, DateTimeFormatter.ofPattern("H:mm"));
//
//                    } else {
//                        LocalTime baseIshaTime = LocalTime.parse(nextIsha, DateTimeFormatter.ofPattern("H:mm"));
//                        ishaAdded = baseIshaTime.plusMinutes(ishaAdditionMinutes);
//
//                    }
//                }
//
//            }
            }


//            if (currentDateTime.isAfter(asrAddedDateTimePlus12Hours) && currentTime.isBefore(LocalTime.MIDNIGHT.minusSeconds(1))) {
//            final Semaphore semaphore = new Semaphore(1);
//            final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);


//            if (semaphore.tryAcquire()) {
//                scheduler.schedule(() -> {
//                    try {

//                        String formattedFajrTime = formatPrayerTime(fajrAdded);
            //                dFajr(formattedFajrTime);

            dFajr(fajr24.trim());
            Log.d("AddMinutes()", "fajr24 = " + fajr24.trim());



//                        String formattedZuhrTime = formatPrayerTime(zuharAdded);
            //                dZuhar(formattedZuhrTime);
            dZuhar(zuhar24.trim());
            Log.d("AddMinutes()", "zuhar24 = " + zuhar24.trim());


//                        String formattedAsrTime = formatPrayerTime(asrAdded);
            //              dAsr(formattedAsrTime);
            dAsr(asr24.trim());
            Log.d("AddMinutes()", "asr24 = " + asr24.trim());

//                        String formattedMaghribTime = formatPrayerTime(maghribAdded);
            //              dMaghrib(formattedMaghribTime);
            //              dMaghrib(formattedMaghribTime);
            dMaghrib(maghrib24.trim());
            Log.d("AddMinutes()", "maghrib24 = " + maghrib24.trim());


            // Format the modified Isha time as a String
//                        String formattedIshaTime = formatPrayerTime(ishaAdded);
            //                dIsha(String.valueOf(formattedIshaTime));
            dIsha(isha24.trim());
            Log.d("AddMinutes()", "isha24 = " + isha24.trim());
//                    } finally {
//                        semaphore.release();
//                    }
//                }, 5, TimeUnit.SECONDS);
//            }




        } catch (DateTimeParseException e) {
            e.printStackTrace();
        }
    }








    // Helper method to determine if a prayer time has passed
    private boolean isPrayerTimePassed(int currentHour, int currentMinute, String prayerTime) {
        try {
            // Split the prayer time string into hours and minutes
            String[] timeParts = prayerTime.split(":");
            int prayerHour = Integer.parseInt(timeParts[0].trim()); // Extract hour
            int prayerMinute = Integer.parseInt(timeParts[1].trim()); // Extract minute

            // Log the extracted prayer time
            Log.d("Prayer Time", "Hour: " + prayerHour + ", Minute: " + prayerMinute);

            // Check if the current time is after the prayer time
            if (currentHour > prayerHour || (currentHour == prayerHour && currentMinute > prayerMinute)) {
                return true; // Prayer time has passed
            }
        } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {
            // Handle invalid format or missing parts in the prayer time string
            e.printStackTrace();
        }
        return false; // Prayer time has not passed
    }


    // this is original data pulling and settting method from old code
    private void countDownStart() {
        runnable = new Runnable() {
            @SuppressLint("SetText")
            @Override
            public void run() {
                try {
                    handler.postDelayed(this, 1000);
                    SimpleDateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT);

                    Date Fajrdt = dateFormat.parse(fajr24);
                    Date Zuhardt = dateFormat.parse(zuhar24);
                    Date Fridaydt = dateFormat.parse(friday24);
                    Log.wtf("My Activity", "event_date : " + Fridaydt);

                    Date Asrdt = dateFormat.parse(asr24);
                    Date Magribdt = dateFormat.parse(maghrib24);
                    Date Ishadt = dateFormat.parse(isha24);
                    Date Midnightdt = dateFormat.parse(Midnight);
                    Date current_date = new Date();

                    // Get the date of the next prayer
                    Date nextPrayer;
                    if (current_date.before(Fajrdt)) {
                        nextPrayer = Fajrdt;
                    } else if (current_date.before(Zuhardt)) {
                        nextPrayer = Zuhardt;
                    } else if (current_date.before(Asrdt)) {
                        nextPrayer = Asrdt;
                    } else if (current_date.before(Magribdt)) {
                        nextPrayer = Magribdt;
                    } else if (current_date.before(Ishadt)) {
                        nextPrayer = Ishadt;
                    } else {
                        // All prayers for today have already passed, start counting down to Fajr of the next day
                        nextPrayer = new Date(Fajrdt.getTime() + (1000 * 60 * 60 * 24));
                    }


                    // Update the UI to show the current prayer and the next prayer time
                    if (current_date.before(Fajrdt)) {
                        Namaz.setText("Fajr");
                        nextnamaz.setText("Zuhar");
                    } else if (current_date.before(Zuhardt)) {
                        Namaz.setText("Zuhar");
                        nextnamaz.setText("Asr");
                    } else if (current_date.before(Asrdt)) {
                        Namaz.setText("Asr");
                        nextnamaz.setText("Magrib");
                    } else if (current_date.before(Magribdt)) {
                        Namaz.setText("Maghrib");
                        nextnamaz.setText("Isha");
                    } else if (current_date.before(Ishadt)) {
                        Namaz.setText("Isha");
                        nextnamaz.setText("Fajr");
                    } else {
                        Namaz.setText("Fajr");
                        nextnamaz.setText("Zuhar");
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        };

        handler.postDelayed(runnable, 1000);
    }

    // this is original data pulling and settting method from old code
    private void countDownStartOriginal() {
        runnable = new Runnable() {
            @SuppressLint("SetText")
            @Override
            public void run() {
                try {
                    handler.postDelayed(this, 1000);
                    SimpleDateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT);

                    Date Fajrdt = dateFormat.parse(fajr24);
                    Date Zuhardt = dateFormat.parse(zuhar24);
                    Date Fridaydt = dateFormat.parse(friday24);
                    Log.wtf("My Activity", "event_date : " + Fridaydt);

                    Date Asrdt = dateFormat.parse(asr24);
                    Date Magribdt = dateFormat.parse(maghrib24);
                    Date Ishadt = dateFormat.parse(isha24);
                    Date Midnightdt = dateFormat.parse(Midnight);
                    Date current_date = new Date();

                    // Get the date of the next prayer
                    Date nextPrayer;
                    if (current_date.before(Fajrdt)) {
                        nextPrayer = Fajrdt;
                    } else if (current_date.before(Zuhardt)) {
                        nextPrayer = Zuhardt;
                    } else if (current_date.before(Asrdt)) {
                        nextPrayer = Asrdt;
                    } else if (current_date.before(Magribdt)) {
                        nextPrayer = Magribdt;
                    } else if (current_date.before(Ishadt)) {
                        nextPrayer = Ishadt;
                    } else {
                        // All prayers for today have already passed, start counting down to Fajr of the next day
                        nextPrayer = new Date(Fajrdt.getTime() + (1000 * 60 * 60 * 24));
                    }

                    // Calculate the remaining time until the next prayer
                    long diff = nextPrayer.getTime() - current_date.getTime();
                    long Hours = diff / (60 * 60 * 1000) % 24;
                    long Minutes = diff / (60 * 1000) % 60;
                    long Seconds = diff / 1000 % 60;

                    // Format the remaining time as a string
                    String Hoursst = String.format("%02d", Hours);
                    String Minutesst = String.format("%02d", Minutes);
                    String Secondsst = String.format("%02d", Seconds);

                    countdowndt = Hoursst + ":" + Minutesst + ":" + Secondsst;
                    countdowntxt.setText(countdowndt);

                    // Update the UI to show the current prayer and the next prayer time
                    if (current_date.before(Fajrdt)) {
                        Namaz.setText("Fajr");
                        nextnamaz.setText("Zuhar");
                    } else if (current_date.before(Zuhardt)) {
                        Namaz.setText("Zuhar");
                        nextnamaz.setText("Asr");
                    } else if (current_date.before(Asrdt)) {
                        Namaz.setText("Asr");
                        nextnamaz.setText("Magrib");
                    } else if (current_date.before(Magribdt)) {
                        Namaz.setText("Maghrib");
                        nextnamaz.setText("Isha");
                    } else if (current_date.before(Ishadt)) {
                        Namaz.setText("Isha");
                        nextnamaz.setText("Fajr");
                    } else {
                        Namaz.setText("Fajr");
                        nextnamaz.setText("Zuhar");
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        };

        handler.postDelayed(runnable, 1000);
    }


    public void GetTimeWorking07February2024_GoodLogic(String... filePath) {
        if (filePath.length > 0) {
            // A file path was provided, use it
            path = filePath[0];
        } else {
            // No file path provided, use the default
//                path = "timings.xls";
            path = "test.xls";

        }

        try {

//                fajr24 = "";
//                zuhar24 = "";
//                asr24 = "";
//                maghrib24 = "";
//                isha24 = "";

            AssetManager am = getAssets();
            InputStream is = am.open(path);
            Workbook wb = Workbook.getWorkbook(is);

            Sheet sheet = wb.getSheet(0);
            int numColumns = sheet.getColumns();
            int numRows = sheet.getRows();
            int dateColumnIndex = 0;
            int fajrColumnIndex = 1;
            int zuharColumnIndex = 2;
            int asrColumnIndex = 3;
            int MaghribColumnIndex = 4;
            int ishaColumnIndex = 5;

            // Match the date format with the Excel date format to load the data
            String currentDateString = DateFormat.format("MM/dd/yyyy", new Date()).toString();

            List<String[]> data = new ArrayList<>();

            // Load all the data into a list
            for (int row = 0; row < numRows; row++) {
                String[] rowData = new String[numColumns];
                for (int col = 0; col < numColumns; col++) {
                    Cell cell = sheet.getCell(col, row);
                    rowData[col] = cell.getContents();
                }
                data.add(rowData);
            }

            // Find the row with the current date
            int currentRow = -1;
            String currentDate = "";
            if (currentDateString.length() >= 10) {
                currentDate = currentDateString.substring(0, 10); // Extract date part
            }
            for (int row = 0; row < data.size(); row++) {
                String[] rowData = data.get(row);
                String cellValue = rowData[dateColumnIndex];
                String cellDate = "";
                if (cellValue.length() >= 10) {
                    // Extract date part from cell value with different format
                    SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
                    Date cellDateObj = dateFormat.parse(cellValue);
                    SimpleDateFormat outputFormat = new SimpleDateFormat("MM/dd/yyyy");
                    cellDate = outputFormat.format(cellDateObj);
                }
                if (cellDate.equals(currentDate)) {
                    currentRow = row;
                    Log.d("My Activity", "Today's Date Matched: " + cellValue);

                    break;
                }
            }

            // Process the prayer times
            if (currentRow != -1) {
                // Current date found in the data
                CharSequence currentdate = DateFormat.format("MM/dd/yyyy HH:mm:ss", d.getTime());
                Log.d("My Activity", "System Date & Time: " + currentdate);

                String[] currentRowData = data.get(currentRow);
                String fajrTime = currentRowData[fajrColumnIndex].trim();
                String zuharTime = currentRowData[zuharColumnIndex].trim();
                String asrTime = currentRowData[asrColumnIndex].trim();
                String MaghribTime = currentRowData[MaghribColumnIndex].trim();
                String ishaTime = currentRowData[ishaColumnIndex].trim();

                // Get the prayer times for the next day
                int nextDayRow = (currentRow + 1) % data.size();
                String[] nextDayRowData = data.get(nextDayRow);
                String nextDayFajrTime = nextDayRowData[fajrColumnIndex].trim();
                String nextDayZuharTime = nextDayRowData[zuharColumnIndex].trim();
                String nextDayAsrTime = nextDayRowData[asrColumnIndex].trim();
                String nextDayMaghribTime = nextDayRowData[MaghribColumnIndex].trim();
                String nextDayIshaTime = nextDayRowData[ishaColumnIndex].trim();



//                    fajr24 = fajrTime.trim();
//                    zuhar24 = zuharTime.trim();
//                    asr24 = asrTime.trim();
//                    maghrib24 = MaghribTime.trim();
//                    isha24 = ishaTime.trim();
//    //
                //                dFajr(fajr24);
                //                dZuhar(zuhar24);
                //                dAsr(asr24);
                //                dMaghrib(maghrib24);
                //                dIsha(isha24);


                // Store the next day's prayer times
//                    nextFajr = nextDayFajrTime.trim();
//                    nextZuhar = nextDayZuharTime.trim();
//                    nextAsr = nextDayAsrTime.trim();
//                    nextMaghrib = nextDayMaghribTime.trim();
//                    nextIsha = nextDayIshaTime.trim();

                fajrOriginal = fajrTime.trim();
                zuharOriginal = zuharTime.trim();
                asrOriginal = asrTime.trim();
                maghribOriginal = MaghribTime.trim();
                ishaOriginal = ishaTime.trim();


                // Apply adjustments made by the user to the current day's prayer times
                fajr24 = applyAdjustments(fajrOriginal, fajrAdjustment);
                zuhar24 = applyAdjustments(zuharOriginal, zuharAdjustment);
                asr24 = applyAdjustments(asrOriginal, asrAdjustment);
                maghrib24 = applyAdjustments(maghribOriginal, maghribAdjustment);
                isha24 = applyAdjustments(ishaOriginal, ishaAdjustment);

                // Store the next day's prayer times with adjustments applied
                nextFajr = applyAdjustments(nextDayFajrTime, fajrAdjustment);
                nextZuhar = applyAdjustments(nextDayZuharTime, zuharAdjustment);
                nextAsr = applyAdjustments(nextDayAsrTime, asrAdjustment);
                nextMaghrib = applyAdjustments(nextDayMaghribTime, maghribAdjustment);
                nextIsha = applyAdjustments(nextDayIshaTime, ishaAdjustment);



//                     Initialize or update the PrayerTimeManager with the initial prayer times
//                    Map<String, String> initialPrayerTimes = new HashMap<>();
//                    initialPrayerTimes.put("fajr", fajr24);
//                    initialPrayerTimes.put("zuhar", zuhar24);
//                    initialPrayerTimes.put("asr", asr24);
//                    initialPrayerTimes.put("maghrib", maghrib24);
//                    initialPrayerTimes.put("isha", isha24);

                // Initialize or update the PrayerTimeManager
//                    prayerTimeManager = new PrayerTimeManager(this, initialPrayerTimes);

////                     Apply changes to the prayer times
//                    applyUserModifications(this, "fajr", fajrOriginal);
//                    applyUserModifications(this, "zuhar", zuharOriginal);
//                    applyUserModifications(this, "asr", asrOriginal);
//                    applyUserModifications(this, "maghrib", maghribOriginal);
//                    applyUserModifications(this, "isha", ishaOriginal);
//
//                    // Save the adjusted times to SharedPreferences
//                    savePrayerTime("fajr24", fajr24);
//                    savePrayerTime("zuhar24", zuhar24);
//                    savePrayerTime("asr24", asr24);
//                    savePrayerTime("maghrib24", maghrib24);
//                    savePrayerTime("isha24", isha24);

//                    initializePrayerTimes();






                // Calculate the next prayer time
                //                CalculateTimings();
                Log.d("My Activity", "... GetTime() was called successfully ...");
                //                initializePrayerTimes();


            } else {
                fajr24 = "7:00";
                zuhar24 = "2:00";
                asr24 = "5:00";
                maghrib24 = "7:00";
                isha24  = "9:00";
                Log.d("**** My Activity ****", " **** No matching date found in the data");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void AddMinutes25January2024_WORKING() {
        try {
            // Check if fajrAdded has been modified
            if (isFajrAddMinutesPressed) {
                // Calculate the modified Fajr time by adding user modifications
                LocalTime baseFajrTime = LocalTime.parse(fajr24, DateTimeFormatter.ofPattern("H:mm"));
                fajrAdded = baseFajrTime.plusMinutes(fajrAdditionMinutes);
            } else {
                // FajrAdded hasn't been modified, use the default fajr24 value
                fajrAdded = LocalTime.parse(fajr24, DateTimeFormatter.ofPattern("H:mm"));
            }

            // Check if ZuharAdded has been modified
            if (isZuharAddMinutesPressed) {
                // Calculate the modified Zuhar time by adding user modifications
                LocalTime baseZuharTime = LocalTime.parse(zuhar24, DateTimeFormatter.ofPattern("H:mm"));
                zuharAdded = baseZuharTime.plusMinutes(zuharAdditionMinutes);
            } else {
                // ZuharAdded hasn't been modified, use the default zuhar24 value
                zuharAdded = LocalTime.parse(zuhar24, DateTimeFormatter.ofPattern("H:mm"));

            }

            // Check if AsrAdded has been modified
            if (isAsrAddMinutesPressed) {
                // Calculate the modified Asr time by adding user modifications
                LocalTime baseAsrTime = LocalTime.parse(asr24, DateTimeFormatter.ofPattern("H:mm"));
                asrAdded = baseAsrTime.plusMinutes(asrAdditionMinutes);
            } else {
                // AsrAdded hasn't been modified, use the default asr24 value
                asrAdded = LocalTime.parse(asr24, DateTimeFormatter.ofPattern("H:mm"));

            }

            // Check if MaghribAdded has been modified
            if (isMaghribAddMinutesPressed) {
                // Calculate the modified Maghrib time by adding user modifications
                LocalTime baseMaghribTime = LocalTime.parse(maghrib24, DateTimeFormatter.ofPattern("H:mm"));
                maghribAdded = baseMaghribTime.plusMinutes(maghribAdditionMinutes);
            } else {
                // MaghribAdded hasn't been modified, use the default maghrib24 value
                maghribAdded = LocalTime.parse(maghrib24, DateTimeFormatter.ofPattern("H:mm"));

            }

            // Check if IshaAdded has been modified
            if (isIshaAddMinutesPressed) {
                // Calculate the modified Isha time by adding user modifications
                LocalTime baseIshaTime = LocalTime.parse(isha24, DateTimeFormatter.ofPattern("H:mm"));
                ishaAdded = baseIshaTime.plusMinutes(ishaAdditionMinutes);
            } else {
                // IshaAdded hasn't been modified, use the default isha24 value
                ishaAdded = LocalTime.parse(isha24, DateTimeFormatter.ofPattern("H:mm"));
            }

            //            // Format the modified Fajr time as a String
            //            String formattedFajrTime = fajrAdded.format(DateTimeFormatter.ofPattern("H:mm"));
            //
            //// Call the dFajr() method with the formatted prayer time
            //            dFajr(formattedFajrTime);
            //


            // Format the modified Fajr time as a String
            String formattedFajrTime = formatPrayerTime(fajrAdded);
            dFajr(formattedFajrTime);

            // Format the modified Zuhr time as a String
            String formattedZuhrTime = formatPrayerTime(zuharAdded);
            dZuhar(formattedZuhrTime);

            // Format the modified Asr time as a String
            String formattedAsrTime = formatPrayerTime(asrAdded);
            dAsr(formattedAsrTime);

            // Format the modified Maghrib time as a String
            String formattedMaghribTime = formatPrayerTime(maghribAdded);
            dMaghrib(formattedMaghribTime);

// Format the modified Isha time as a String
            String formattedIshaTime = formatPrayerTime(ishaAdded);
            dIsha(formattedIshaTime);


        } catch (DateTimeParseException e) {
            e.printStackTrace();
        }
    }


    // Method to apply user modifications
//    private void applyUserModifications(Context context, String prayer, String originalTime) {
//        try {
//            DateTimeFormatter inputFormatter = DateTimeFormatter.ofPattern("H:mm");
//            LocalTime prayerTime24 = LocalTime.parse(originalTime, inputFormatter);
//            Map<String, Integer> prayerModifications = getPrayerModifications(context, prayer);
//
//            // Apply modifications
//            if (prayerModifications != null) {
//                for (Map.Entry<String, Integer> entry : prayerModifications.entrySet()) {
//                    prayerTime24 = prayerTime24.plusMinutes(entry.getValue());
//                }
//            }
//
//            // Update the prayer time
//            switch (prayer) {
//                case "fajr":
//                    fajr24 = prayerTime24.format(inputFormatter);
//                    fajrAdded = LocalTime.parse(prayerTime24.format(inputFormatter));
//
//                    Log.d("applyUserModifications", "Updated Fajr Time: " + fajr24);
//                    break;
//                case "zuhar":
//                    zuhar24 = prayerTime24.format(inputFormatter);
//                    zuharAdded = LocalTime.parse(prayerTime24.format(inputFormatter));
//
//                    Log.d("applyUserModifications", "Updated Zuhar Time: " + zuhar24);
//                    break;
//                case "asr":
//                    asr24 = prayerTime24.format(inputFormatter);
//                    asrAdded = LocalTime.parse(prayerTime24.format(inputFormatter));
//
//                    Log.d("applyUserModifications", "Updated Asr Time: " + asr24);
//                    break;
//                case "maghrib":
//                    maghrib24 = prayerTime24.format(inputFormatter);
//                    maghribAdded = LocalTime.parse(prayerTime24.format(inputFormatter));
//
//                    Log.d("applyUserModifications", "Updated Maghrib Time: " + maghrib24);
//                    break;
//                case "isha":
//                    isha24 = prayerTime24.format(inputFormatter);
//                    ishaAdded = LocalTime.parse(prayerTime24.format(inputFormatter));
//
//                    Log.d("applyUserModifications", "Updated Isha Time: " + isha24);
//                    break;
//            }
//
//            AddMinutes();
//
//        } catch (DateTimeParseException e) {
//            e.printStackTrace();
//        }
//    }

    public void setPrayerTimes(String fajrTime, String zuharTime, String asrTime,
        String MaghribTime, String ishaTime) {

        // Store the prayer times for the current day in a data structure, such as an ArrayList or HashMap
        // This would allow you to retrieve the prayer times later on
        prayerTimes.put("fajr", fajrTime);
        prayerTimes.put("zuhar", zuharTime);
        prayerTimes.put("asr", asrTime);
        prayerTimes.put("magreb", MaghribTime);
        prayerTimes.put("isha", ishaTime);
    }

    public void setNextDayPrayerTimes(String nextDayFajrTime, String nextDayZuharTime, String nextDayAsrTime,
                                      String nextDayMaghribTime, String nextDayIshaTime) {
        // Store the prayer times for the next day in a separate data structure, such as another ArrayList or HashMap
        // This would allow you to differentiate between the current and next day's prayer times
        nextDayPrayerTimes.put("fajr", nextDayFajrTime);
        nextDayPrayerTimes.put("zuhar", nextDayZuharTime);
        nextDayPrayerTimes.put("asr", nextDayAsrTime);
        nextDayPrayerTimes.put("magreb", nextDayMaghribTime);
        nextDayPrayerTimes.put("isha", nextDayIshaTime);
    }

    String formatTime(String prayerTimeString) {
        if (prayerTimeString == null || prayerTimeString.isEmpty() || prayerTimeString.equals("")) {
            // Handle empty or null prayer time string
            return ""; // Return an empty string if the prayer time string is empty or null
        } else {
            // Implement the actual prayer time formatting logic here
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("H:mm");
            LocalTime parsedTime = LocalTime.parse(prayerTimeString, formatter);
            return parsedTime.toString(); // Format the parsed time and return the formatted string
        }
    }

    // AddMinutes function

    // Method to format a LocalTime object to a String
    public String formatPrayerTime(LocalTime time) {
        return time.format(DateTimeFormatter.ofPattern("H:mm"));
    }

    private String getPrayerTime(String prayer) {
        switch (prayer) {
            case "Fajr":
                return sharedPreferences.getString("fajr24", fajr24);
            case "Zuhar":
                return sharedPreferences.getString("zuhar24", zuhar24);
            case "Asr":
                return sharedPreferences.getString("asr24", asr24);
            case "Maghrib":
                return sharedPreferences.getString("maghrib24", maghrib24);
            case "Isha":
                return sharedPreferences.getString("isha24", isha24);
            default:
                return "";
        }
    }

    private void setPrayerTime(String prayer, String time) {
        switch (prayer) {
            case "Fajr":
                fajr24 = time;
                break;
            case "Zuhar":
                zuhar24 = time;
                break;
            case "Asr":
                asr24 = time;
                break;
            case "Maghrib":
                maghrib24 = time;
                break;
            case "Isha":
                isha24 = time;
                break;
        }
    }

    private void AddMinutesWorking24January2024() {

//                dFajr(fajr24);
//                dZuhar(zuhar24);
//                dAsr(asr24);
//                dMaghrib(maghrib24);
//                dIsha(isha24);


//
//        String modzuhar = modifiedZuharTime.format(DateTimeFormatter.ofPattern("H:mm"));
//        dZuhar(modzuhar);
//        dAsr(modifiedIshaTime.format(DateTimeFormatter.ofPattern("H:mm")));
//        dMaghrib(modifiedMaghribTime.format(DateTimeFormatter.ofPattern("H:mm")));
//        dIsha(modifiedIshaTime.format(DateTimeFormatter.ofPattern("H:mm")));
//        calculateTotalChanges("Fajr");
//        calculateTotalChanges("Zuhar");
//        calculateTotalChanges("Asr");
//        calculateTotalChanges("Maghrib");
//        calculateTotalChanges("Isha");

        // ================================== ADD Minutes =================================
//        applyUserModifications(this, "fajr", fajr24);
//        applyUserModifications(this, "zuhar", zuhar24);
//        applyUserModifications(this, "asr", asr24);
//        applyUserModifications(this, "maghrib", maghrib24);
//        applyUserModifications(this, "isha", isha24);
//
////                dFajr(adjustedFajrTime);
////                dZuhar(adjustedZuharTime);
////                dAsr(adjustedAsrTime);
////                dMaghrib(adjustedMaghribTime);
////                dIsha(adjustedIshaTime);
//        // Retrieve the adjusted prayer time from SharedPreferences
//        String adjustedFajrTime = getPrayerTime("fajr24");
//        String adjustedZuharTime = getPrayerTime("zuhar24");
//        String adjustedAsrTime = getPrayerTime("asr24");
//        String adjustedMaghribTime = getPrayerTime("maghrib24");
//        String adjustedIshaTime = getPrayerTime("isha24");
//
//        Log.d("Debug", "Before Retrieving adjustedFajrTime");
//         adjustedFajrTime = getPrayerTime("fajr24");
//        Log.d("Debug", "Adjusted Fajr Time: " + adjustedFajrTime);
//        dFajr(adjustedFajrTime);
//
//        dFajr(adjustedFajrTime);
//        dZuhar(adjustedZuharTime);
//        dAsr(adjustedAsrTime);
//        dMaghrib(adjustedMaghribTime);
//        dIsha(adjustedIshaTime);
//
//        Log.d("adjustedFajrTime", " = " + adjustedFajrTime);
//        Log.d("adjustedZuharTime", " = " + adjustedZuharTime);
//        Log.d("adjustedAsrTime", " = " + adjustedAsrTime);
//        Log.d("adjustedMaghribTime", " = " + adjustedMaghribTime);
//        Log.d("adjustedIshaTime", " = " + adjustedIshaTime);


        //
//                String formattedFajrTime, formattedZuharTime, formattedAsrTime, formattedMaghribTime, formattedIshaTime;
//
//
//// Validate the prayer time strings before parsing
//                if (adjustedFajrTime.isEmpty() || adjustedFajrTime.equals("") || adjustedFajrTime == null) {
//                    // Handle empty or null fajr time string
//                    formattedFajrTime = "";
//                } else {
//                    // Parse the fajr time string
//                    formattedFajrTime = formatTime(adjustedFajrTime);
//                }
//
//                if (adjustedZuhrTime.isEmpty() || adjustedZuhrTime.equals("") || adjustedZuhrTime == null) {
//                    // Handle empty or null zuhr time string
//                    formattedZuharTime = "";
//                } else {
//                    // Parse the zuhr time string
//                    formattedZuharTime = formatTime(adjustedZuhrTime);
//                }
//
//                if (adjustedAsrTime.isEmpty() || adjustedAsrTime.equals("") || adjustedAsrTime == null) {
//                    // Handle empty or null asr time string
//                     formattedAsrTime = "";
//                } else {
//                    // Parse the asr time string
//                    formattedAsrTime = formatTime(adjustedAsrTime);
//                }
//
//                if (adjustedMaghribTime.isEmpty() || adjustedMaghribTime.equals("") || adjustedMaghribTime == null) {
//                    // Handle empty or null maghrib time string
//                    formattedMaghribTime = "";
//                } else {
//                    // Parse the maghrib time string
//                    formattedMaghribTime = formatTime(adjustedMaghribTime);
//                }
//
//                if (adjustedIshaTime.isEmpty() || adjustedIshaTime.equals("") || adjustedIshaTime == null) {
//                    // Handle empty or null isha time string
//                    formattedIshaTime = "";
//                } else {
//                    // Parse the isha time string
//                    formattedIshaTime = formatTime(adjustedIshaTime);
//                }
        runOnUiThread(new Runnable() {
            @Override
            public void run() {


                // it will display those times in current time only so fix it.
//                updateUI();

//                String formattedFajrTime = "00:00";
//                String formattedZuharTime = "00:00";
//                String formattedAsrTime = "00:00";
//                String formattedMaghribTime = "00:00";
//                String formattedIshaTime = "00:00";
//
//                // Retrieve adjusted prayer times from SharedPreferences
//                String adjustedFajrTime = getPrayerTime("fajr24");
//                String adjustedZuhrTime = getPrayerTime("zuhar24");
//                String adjustedAsrTime = getPrayerTime("asr24");
//                String adjustedMaghribTime = getPrayerTime("maghrib24");
//                String adjustedIshaTime = getPrayerTime("isha24");
//
//                // Format the adjusted prayer times
//// Parse and format the prayer time strings directly
//                // Format the adjusted prayer times using the formatPrayerTime() method
//                // Create formatter with pattern "HH:mm"
//                // Create formatter with pattern "HH:mm"
//                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("H:mm");
//                // Format each prayer time and store the result
//                formattedFajrTime = formatPrayerTime(adjustedFajrTime, formatter);
//                formattedZuharTime = formatPrayerTime(adjustedZuhrTime, formatter);
//                formattedAsrTime = formatPrayerTime(adjustedAsrTime, formatter);
//                formattedMaghribTime = formatPrayerTime(adjustedMaghribTime, formatter);
//                formattedIshaTime = formatPrayerTime(adjustedIshaTime, formatter);

                // Update the UI with the formatted prayer times
                // Update the corresponding UI elements, such as text views, to display the formatted prayer times
//                dFajr(formattedFajrTime);
//                dZuhar(formattedZuharTime);
//                dAsr(formattedAsrTime);
//                dMaghrib(formattedMaghribTime);
//                dIsha(formattedIshaTime);

//                dFajr(fajr24);
//                dZuhar(zuhar24);
//                dAsr(asr24);
//                dMaghrib(maghrib24);
//                dIsha(isha24);

//                Fajr.setText("");
//                Zuhar.setText("");
//                Asr.setText("");
//                Maghrib.setText("");
//                Isha.setText("");


//                dFajr(String.valueOf(fajrAdded));
//                dZuhar(String.valueOf(addedTime));
//                dAsr(String.valueOf(addedTime));
//                dMaghrib(String.valueOf(addedTime));
//                dIsha(String.valueOf(addedTime));

            }
        });

        try {
//            updateUI();
            if (btnReset) {

//                runCodeOnce();
                fajr24 = fajrOriginal;
                zuhar24 = zuharOriginal;
                asr24 = asrOriginal;
                maghrib24 = maghribOriginal;
                isha24 = ishaOriginal;

                fajrAdded = LocalTime.parse(fajrOriginal);
                zuharAdded = LocalTime.parse(zuharOriginal);
                asrAdded = LocalTime.parse(asrOriginal);
                maghribAdded = LocalTime.parse(maghribOriginal);
                ishaAdded = LocalTime.parse(ishaOriginal);

                fajrAdditionMinutes = 0;
                zuharAdditionMinutes = 0;
                asrAdditionMinutes = 0;
                maghribAdditionMinutes = 0;
                ishaAdditionMinutes = 0;

                nextFajrCheck = false;
                nextZuharCheck = false;
                nextAsrCheck = false;
                nextMaghribCheck = false;
                nextIshaCheck = false;


                dFajr(fajr24);
                dZuhar(zuhar24);
                dAsr(asr24);
                dMaghrib(maghrib24);
                dIsha(isha24);

                btnReset = false;
            } else {

                    // Check if fajrAdded has been modified
                    if (isFajrAddMinutesPressed) {
                        // Calculate the modified Fajr time by adding user modifications
                        LocalTime baseFajrTime = LocalTime.parse(fajr24, DateTimeFormatter.ofPattern("H:mm"));
                        fajrAdded = baseFajrTime.plusMinutes(fajrAdditionMinutes);
                    } else {
                        // FajrAdded hasn't been modified, use the default fajr24 value
                        fajrAdded = LocalTime.parse(fajr24, DateTimeFormatter.ofPattern("H:mm"));
                    }

                    // Check if ZuharAdded has been modified
                    if (isZuharAddMinutesPressed) {
                        // Calculate the modified Zuhar time by adding user modifications
                        LocalTime baseZuharTime = LocalTime.parse(zuhar24, DateTimeFormatter.ofPattern("H:mm"));
                        zuharAdded = baseZuharTime.plusMinutes(zuharAdditionMinutes);
                    } else {
                        // ZuharAdded hasn't been modified, use the default zuhar24 value
                        zuharAdded = LocalTime.parse(zuhar24, DateTimeFormatter.ofPattern("H:mm"));
                    }

                    // Check if AsrAdded has been modified
                    if (isAsrAddMinutesPressed) {
                        // Calculate the modified Asr time by adding user modifications
                        LocalTime baseAsrTime = LocalTime.parse(asr24, DateTimeFormatter.ofPattern("H:mm"));
                        asrAdded = baseAsrTime.plusMinutes(asrAdditionMinutes);
                    } else {
                        // AsrAdded hasn't been modified, use the default asr24 value
                        asrAdded = LocalTime.parse(asr24, DateTimeFormatter.ofPattern("H:mm"));

                    }
    // Check if MaghribAdded has been modified
                    if (isMaghribAddMinutesPressed) {
                        // Calculate the modified Maghrib time by adding user modifications
                        LocalTime baseMaghribTime = LocalTime.parse(maghrib24, DateTimeFormatter.ofPattern("H:mm"));
                        maghribAdded = baseMaghribTime.plusMinutes(maghribAdditionMinutes);
                    } else {
                        // MaghribAdded hasn't been modified, use the default maghrib24 value
                        maghribAdded = LocalTime.parse(maghrib24, DateTimeFormatter.ofPattern("H:mm"));
                    }
    // Check if IshaAdded has been modified
                    if (isIshaAddMinutesPressed) {
                        // Calculate the modified Isha time by adding user modifications
                        LocalTime baseIshaTime = LocalTime.parse(isha24, DateTimeFormatter.ofPattern("H:mm"));
                        ishaAdded = baseIshaTime.plusMinutes(ishaAdditionMinutes);
                    } else {
                        // IshaAdded hasn't been modified, use the default isha24 value
                        ishaAdded = LocalTime.parse(isha24, DateTimeFormatter.ofPattern("H:mm"));
                    }

                    dFajr(String.valueOf(fajrAdded));
                    dZuhar(String.valueOf(zuharAdded));
                    dAsr(String.valueOf(asrAdded));
                    dMaghrib(String.valueOf(maghribAdded));
                    dIsha(String.valueOf(ishaAdded));
                }
        } catch (DateTimeParseException e) {
            e.printStackTrace();
        }
    }


    private void modifyPrayerTime(String prayer, int minutes) {
        try {
            LocalTime prayerTime24 = LocalTime.parse(getPrayerTime(prayer), DateTimeFormatter.ofPattern("H:mm"));
            LocalTime modifiedTime24 = prayerTime24.plusMinutes(minutes);
            setPrayerTime(prayer, modifiedTime24.format(DateTimeFormatter.ofPattern("H:mm")));
        } catch (DateTimeParseException e) {
            e.printStackTrace();
        }
    }


    private void AddMinutes14Jan24() {
        // ================================== ADD Minutes =================================
        // Deduct 5 minutes from Fajr24 time if FajrDeduct button is pressed
//        if (isFajrAddMinutesPressed && !isFajrAddition)

        if (isFajrDeducted) {
            try {
                LocalTime fajrTime24 = LocalTime.parse(fajr24, DateTimeFormatter.ofPattern("H:mm"));
                LocalTime deductedFajrTime24 = fajrTime24.minusMinutes(5);
                fajr24 = deductedFajrTime24.format(DateTimeFormatter.ofPattern("H:mm"));

                // Set the flag to indicate deduction has been made
                isFajrDeducted = false;
                isFajrAddMinutesPressed = false;
            } catch (DateTimeParseException e) {
                e.printStackTrace();
            }
        }

        if (isFajrAddition) {
            try {
                LocalTime fajrTime24 = LocalTime.parse(fajr24, DateTimeFormatter.ofPattern("H:mm"));
                LocalTime addedFajrTime24 = fajrTime24.plusMinutes(5);
                fajr24 = addedFajrTime24.format(DateTimeFormatter.ofPattern("H:mm"));

                // Set the flag to indicate addition has been made
                isFajrAddition = false;
                isFajrAddMinutesPressed = false;
            } catch (DateTimeParseException e) {
                e.printStackTrace();
            }
        }

        if (isZuharDeducted) {
            try {
                LocalTime zuharTime24 = LocalTime.parse(zuhar24, DateTimeFormatter.ofPattern("H:mm"));
                LocalTime deductedZuharTime24 = zuharTime24.minusMinutes(5);
                zuhar24 = deductedZuharTime24.format(DateTimeFormatter.ofPattern("H:mm"));

                // Set the flag to indicate deduction has been made
                isZuharDeducted = false;
                isZuharDeductButtonPressed = false;
            } catch (DateTimeParseException e) {
                e.printStackTrace();
            }
        }

        if (isZuharAddition) {
            try {
                LocalTime zuharTime24 = LocalTime.parse(zuhar24, DateTimeFormatter.ofPattern("H:mm"));
                LocalTime addedZuharTime24 = zuharTime24.plusMinutes(5);
                zuhar24 = addedZuharTime24.format(DateTimeFormatter.ofPattern("H:mm"));

                // Set the flag to indicate addition has been made
                isZuharAddition = false;
                isZuharAddMinutesPressed = false;
            } catch (DateTimeParseException e) {
                e.printStackTrace();
            }
        }

        if (isAsrDeducted) {
            try {
                LocalTime asrTime24 = LocalTime.parse(asr24, DateTimeFormatter.ofPattern("H:mm"));
                LocalTime deductedAsrTime24 = asrTime24.minusMinutes(5);
                asr24 = deductedAsrTime24.format(DateTimeFormatter.ofPattern("H:mm"));

                // Set the flag to indicate deduction has been made
                isAsrDeducted = false;
                isAsrDeductButtonPressed = false;
            } catch (DateTimeParseException e) {
                e.printStackTrace();
            }
        }

        // =========== Asr =============
        if (isAsrDeducted) {
            try {
                LocalTime asrTime24 = LocalTime.parse(asr24, DateTimeFormatter.ofPattern("H:mm"));
                LocalTime deductedAsrTime24 = asrTime24.minusMinutes(5);
                asr24 = deductedAsrTime24.format(DateTimeFormatter.ofPattern("H:mm"));

                // Set the flag to indicate deduction has been made
                isAsrDeducted = false;
                isAsrDeductButtonPressed = false;
            } catch (DateTimeParseException e) {
                e.printStackTrace();
            }
        }

        if (isAsrAddition) {
            try {
                LocalTime asrTime24 = LocalTime.parse(asr24, DateTimeFormatter.ofPattern("H:mm"));
                LocalTime addedAsrTime24 = asrTime24.plusMinutes(5);
                asr24 = addedAsrTime24.format(DateTimeFormatter.ofPattern("H:mm"));

                // Set the flag to indicate addition has been made
                isAsrAddition = false;
                isAsrAddMinutesPressed = false;
            } catch (DateTimeParseException e) {
                e.printStackTrace();
            }
        }

        // ============= Maghrib =================

        if (isMaghribDeducted) {
            try {
                LocalTime maghribTime24 = LocalTime.parse(maghrib24, DateTimeFormatter.ofPattern("H:mm"));
                LocalTime deductedMaghribTime24 = maghribTime24.minusMinutes(1);
                maghrib24 = deductedMaghribTime24.format(DateTimeFormatter.ofPattern("H:mm"));

                // Set the flag to indicate deduction has been made
                isMaghribDeducted = false;
                isMaghribDeductButtonPressed = false;
            } catch (DateTimeParseException e) {
                e.printStackTrace();
            }
        }

        if (isMaghribAddition) {
            try {
                LocalTime maghribTime24 = LocalTime.parse(maghrib24, DateTimeFormatter.ofPattern("H:mm"));
                LocalTime addedMaghribTime24 = maghribTime24.plusMinutes(1);
                maghrib24 = addedMaghribTime24.format(DateTimeFormatter.ofPattern("H:mm"));

                // Set the flag to indicate addition has been made
                isMaghribAddition = false;
                isMaghribAddMinutesPressed = false;
            } catch (DateTimeParseException e) {
                e.printStackTrace();
            }
        }

        // ======================= Isha ============================
        if (isIshaDeducted) {
            try {
                LocalTime ishaTime24 = LocalTime.parse(isha24, DateTimeFormatter.ofPattern("H:mm"));
                LocalTime deductedIshaTime24 = ishaTime24.minusMinutes(5);
                isha24 = deductedIshaTime24.format(DateTimeFormatter.ofPattern("H:mm"));

                // Set the flag to indicate deduction has been made
                isIshaDeducted = false;
                isIshaDeductButtonPressed = false;
            } catch (DateTimeParseException e) {
                e.printStackTrace();
            }
        }

        if (isIshaAddition) {
            try {
                LocalTime ishaTime24 = LocalTime.parse(isha24, DateTimeFormatter.ofPattern("H:mm"));
                LocalTime addedIshaTime24 = ishaTime24.plusMinutes(5);
                isha24 = addedIshaTime24.format(DateTimeFormatter.ofPattern("H:mm"));

                // Set the flag to indicate addition has been made
                isIshaAddition = false;
                isIshaAddMinutesPressed = false;
            } catch (DateTimeParseException e) {
                e.printStackTrace();
            }
        }

        try {
            dFajr(fajr24);
            dZuhar(zuhar24);
            dAsr(asr24);
            dMaghrib(maghrib24);
            dIsha(isha24);

        } catch (DateTimeParseException e) {
            e.printStackTrace();
        }
    }

    public void AddMinutes12Jan24(){

        try {

//            // Use maghribButtonClickCount to perform calculations in this method
//            // For example, add the counter to maghrib24
//            LocalTime maghribTime = LocalTime.parse(maghrib24, DateTimeFormatter.ofPattern("H:mm"));
//            maghribTime = maghribTime.plusMinutes(maghribButtonClickCount * 5);
//
//            // Update maghrib24 and set text
//            maghrib24 = maghribTime.format(DateTimeFormatter.ofPattern("H:mm"));
//            updateMaghribText();
//            // Reset the counter for the next set of button clicks if needed
//            maghribButtonClickCount = 0;

            // Update Zuhr time
//            zuhar24 = zuharAdded.format(DateTimeFormatter.ofPattern("H:mm"));
//            nextZuhar = zuharAdded.format(DateTimeFormatter.ofPattern("H:mm"));
//
//            // Update Asr time
//            asr24 = asrAdded.format(DateTimeFormatter.ofPattern("H:mm"));
//            nextAsr = asrAdded.format(DateTimeFormatter.ofPattern("H:mm"));
//
//            // Update Maghrib time
//            maghrib24 = maghribAdded.format(DateTimeFormatter.ofPattern("H:mm"));
//            nextMaghrib = maghribAdded.format(DateTimeFormatter.ofPattern("H:mm"));
//
//            // Update Isha time
//            isha24 = ishaAdded.format(DateTimeFormatter.ofPattern("H:mm"));
//            nextIsha = ishaAdded.format(DateTimeFormatter.ofPattern("H:mm"));

            dFajr(fajr24);
            dZuhar(zuhar24);
            dAsr(asr24);
            dMaghrib(maghrib24);
            dIsha(isha24);


//                updateFajrText();
//                updateZuharText();
//                updateAsrText();
//                updateMaghribText();
//                updateIshaText();

//            dFajr(adjustedFajrTime);
//            dZuhar(adjustedZuharTime);
//            dAsr(adjustedAsrTime);
//            dMaghrib(adjustedMaghribTime);
//            dIsha(adjustedIshaTime);


//
//            dFajr(fajr24);
//            dZuhar(zuhar24);
//            dAsr(asr24);
//            dMaghrib(maghrib24);
//            dIsha(isha24);

        } catch (DateTimeParseException e) {
            e.printStackTrace();
        }

    }


    // PUll data from exel file
    private void GetTimeTroubled4_January_2024(String... filePath) {

        if (filePath.length > 0 && filePath[0] != null) {
            // A file path was provided, use it
            path = filePath[0];
            Toast.makeText(this, "New File Timings Loaded Successfully.", Toast.LENGTH_LONG).show();

//            fajr24="";
//            zuhar24="";
//            asr24="";
//            maghrib24="";
//            isha24="";
            AddMinutes();


        } else {
            // No file path provided, use the default "timings.xls" file from the assets folder
            path = "timings.xls";
            Toast.makeText(this, "Original Timings Loaded!", Toast.LENGTH_LONG).show();

        }
        {
            try {
                InputStream is;

                if (path.startsWith("timings.xls")) {
                    // Use the default "timings.xls" file from the assets folder
                    AssetManager am = getAssets();
                    is = am.open(path);
                } else {
                    // Use the selected file
                    File file = new File(path);
                    if (file.exists() && file.canRead()) {
                        is = new FileInputStream(file);
                    } else {
                        throw new FileNotFoundException("File not found or cannot be read");
                    }

                }

                Workbook wb = Workbook.getWorkbook(is);


                Sheet sheet = wb.getSheet(0);
                int numColumns = sheet.getColumns();
                int numRows = sheet.getRows();
                int dateColumnIndex = 0;
                int fajrColumnIndex = 1;
                int zuharColumnIndex = 2;
                int asrColumnIndex = 3;
                int MaghribColumnIndex = 4;
                int ishaColumnIndex = 5;

                // Match the date format with the Excel date format to load the data
                String currentDateString = DateFormat.format("MM/dd/yyyy", new Date()).toString();

                List<String[]> data = new ArrayList<>();

                // Load all the data into a list
                for (int row = 0; row < numRows; row++) {
                    String[] rowData = new String[numColumns];
                    for (int col = 0; col < numColumns; col++) {
                        Cell cell = sheet.getCell(col, row);
                        rowData[col] = cell.getContents();
                    }
                    data.add(rowData);
                }

                // Find the row with the current date
                int currentRow = -1;
                String currentDate = "";
                if (currentDateString.length() >= 10) {
                    currentDate = currentDateString.substring(0, 10); // Extract date part
                }
                for (int row = 0; row < data.size(); row++) {
                    String[] rowData = data.get(row);
                    String cellValue = rowData[dateColumnIndex];
                    String cellDate = "";
                    if (cellValue.length() >= 10) {
                        // Extract date part from cell value with different format
                        SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
                        Date cellDateObj = dateFormat.parse(cellValue);
                        SimpleDateFormat outputFormat = new SimpleDateFormat("MM/dd/yyyy");
                        cellDate = outputFormat.format(cellDateObj);
                    }
                    Log.d("My Activity", "Cell value: " + cellValue);
                    Log.d("My Activity", "Cell date: " + cellDate);
                    if (cellDate.equals(currentDate)) {
                        currentRow = row;
                        Log.d("My Activity", "Today's Date Matched: " + cellValue);

                        break;
                    }
                }


                if (currentRow != -1) {
                    // Current date found in the data
                    CharSequence currentdate = DateFormat.format("MM/dd/yyyy HH:mm:ss", d.getTime());
                    Log.wtf("My Activity", "System Date & Time: " + currentdate);

                    String[] currentRowData = data.get(currentRow);
                    String fajrTime = currentRowData[fajrColumnIndex].trim();
                    String zuharTime = currentRowData[zuharColumnIndex].trim();
                    String asrTime = currentRowData[asrColumnIndex].trim();
                    String maghribTime = currentRowData[MaghribColumnIndex].trim();
                    String ishaTime = currentRowData[ishaColumnIndex].trim();

                    // Get the prayer times for the next day
                    int nextDayRow = (currentRow + 1) % data.size();
                    String[] nextDayRowData = data.get(nextDayRow);
                    String nextDayFajrTime = nextDayRowData[fajrColumnIndex].trim();
                    String nextDayZuharTime = nextDayRowData[zuharColumnIndex].trim();
                    String nextDayAsrTime = nextDayRowData[asrColumnIndex].trim();
                    String nextDaymaghribTime = nextDayRowData[MaghribColumnIndex].trim();
                    String nextDayIshaTime = nextDayRowData[ishaColumnIndex].trim();

                    // Example code to handle empty strings and set default values
//                    LocalTime defaultTime = LocalTime.parse("00:00");

                    ////////////////////////////////////////////////////////////////////
                    //////////////////////////////////////////////////////////////////////////////////
                    // Extracted prayer times
                    Map<String, String> initialPrayerTimes = new HashMap<>();
                    initialPrayerTimes.put("fajr24", fajr24);
                    initialPrayerTimes.put("zuhar24", zuhar24);
                    initialPrayerTimes.put("asr24", asr24);
                    initialPrayerTimes.put("maghrib24", maghrib24);
                    initialPrayerTimes.put("isha24", isha24);

                    // Create an instance of PrayerTimeManager with initial prayer times
                    PrayerTimeManager prayerTimeManager = new PrayerTimeManager(this, initialPrayerTimes);

                    // Store the next day's prayer times
                    nextFajr = nextDayFajrTime.trim();
                    nextZuhar = nextDayZuharTime.trim();
                    nextAsr = nextDayAsrTime.trim();
                    nextMaghrib = nextDaymaghribTime.trim();
                    nextIsha = nextDayIshaTime.trim();


                    fajr24 = fajrTime.trim();
                    zuhar24 = zuharTime;
                    asr24 = asrTime;
                    maghrib24 = maghribTime;
                    isha24 = ishaTime;

                    AddMinutes();

                    // Log the file path and extracted prayer times
                    Log.d("YourActivity", "File path: " + filePath);
                    Log.d("YourActivity", "Fajr time: " + fajrTime);
                    Log.d("YourActivity", "Zuhar time: " + zuharTime);
                    Log.d("YourActivity", "Asr time: " + asrTime);
                    Log.d("YourActivity", "Maghrib time: " + maghribTime);
                    Log.d("YourActivity", "Isha time: " + ishaTime);

                    // Update the UI with the prayer times
//                dFajr(fajrTime);
//                dZuhar(zuharTime);
//                dAsr(asrTime);
//                dMaghrib(maghribTime);
//                dIsha(ishaTime);

                    wb.close();
                    is.close();
                } else {
                    // Current date not found in the data
                    Log.wtf("My Activity", "Current Date Did Match in The Excel Data!");
//                    replaceFile();
                    path = "timings.xls";
                }


            } catch (IOException | BiffException e) {
                e.printStackTrace();
                return;
            } catch (ParseException e) {
                throw new RuntimeException(e);
            }
        }
    }



    public void AddMinutesOLD() {
        // ================================== ADD Minutes =================================
        // Deduct 5 minutes from Fajr24 time if FajrDeduct button is pressed
//        if (isFajrAddMinutesPressed && !isFajrAddition)
        try {
            dFajr(fajr24);
            dZuhar(zuhar24);
            dAsr(asr24);
            dMaghrib(maghrib24);
            dIsha(isha24);

        } catch (DateTimeParseException e) {
            e.printStackTrace();
        }


        if (isZuharDeductButtonPressed && !isZuharDeducted) {
            try {
                LocalTime zuharTime24 = LocalTime.parse(zuhar24, DateTimeFormatter.ofPattern("H:mm"));
                LocalTime deductedZuharTime24 = zuharTime24.minusMinutes(5);
                zuhar24 = deductedZuharTime24.format(DateTimeFormatter.ofPattern("H:mm"));

                // Set the flag to indicate deduction has been made
                isZuharDeducted = true;
                isZuharDeductButtonPressed = false;
            } catch (DateTimeParseException e) {
                e.printStackTrace();
            }
        }

        if (isZuharAddMinutesPressed && !isZuharAddition) {
            try {
                LocalTime zuharTime24 = LocalTime.parse(zuhar24, DateTimeFormatter.ofPattern("H:mm"));
                LocalTime addedZuharTime24 = zuharTime24.plusMinutes(5);
                zuhar24 = addedZuharTime24.format(DateTimeFormatter.ofPattern("H:mm"));

                // Set the flag to indicate addition has been made
                isZuharAddition = true;
                isZuharAddMinutesPressed = false;
            } catch (DateTimeParseException e) {
                e.printStackTrace();
            }
        }


        // =========== Asr =============
        if (isAsrDeductButtonPressed && !isAsrDeducted) {
            try {
                LocalTime asrTime24 = LocalTime.parse(asr24, DateTimeFormatter.ofPattern("H:mm"));
                LocalTime deductedAsrTime24 = asrTime24.minusMinutes(5);
                asr24 = deductedAsrTime24.format(DateTimeFormatter.ofPattern("H:mm"));

                // Set the flag to indicate deduction has been made
                isAsrDeducted = true;
                isAsrDeductButtonPressed = false;
            } catch (DateTimeParseException e) {
                e.printStackTrace();
            }
        }

        if (isAsrAddMinutesPressed && !isAsrAddition) {
            try {
                LocalTime asrTime24 = LocalTime.parse(asr24, DateTimeFormatter.ofPattern("H:mm"));
                LocalTime addedAsrTime24 = asrTime24.plusMinutes(5);
                asr24 = addedAsrTime24.format(DateTimeFormatter.ofPattern("H:mm"));

                // Set the flag to indicate addition has been made
                isAsrAddition = true;
                isAsrAddMinutesPressed = false;
            } catch (DateTimeParseException e) {
                e.printStackTrace();
            }
        }

        // ============= Maghrib =================

        if (isMaghribDeductButtonPressed && !isMaghribDeducted) {
            try {
                LocalTime maghribTime24 = LocalTime.parse(maghrib24, DateTimeFormatter.ofPattern("H:mm"));
                LocalTime deductedMaghribTime24 = maghribTime24.minusMinutes(1);
                maghrib24 = deductedMaghribTime24.format(DateTimeFormatter.ofPattern("H:mm"));

                // Set the flag to indicate deduction has been made
                isMaghribDeducted = true;
                isMaghribDeductButtonPressed = false;
            } catch (DateTimeParseException e) {
                e.printStackTrace();
            }
        }

        if (isMaghribAddMinutesPressed && !isMaghribAddition) {
            try {
                LocalTime maghribTime24 = LocalTime.parse(maghrib24, DateTimeFormatter.ofPattern("H:mm"));
                LocalTime addedMaghribTime24 = maghribTime24.plusMinutes(1);
                maghrib24 = addedMaghribTime24.format(DateTimeFormatter.ofPattern("H:mm"));

                // Set the flag to indicate addition has been made
                isMaghribAddition = true;
                isMaghribAddMinutesPressed = false;
            } catch (DateTimeParseException e) {
                e.printStackTrace();
            }
        }

        // ======================= Isha ============================
        if (isIshaDeductButtonPressed && !isIshaDeducted) {
            try {
                LocalTime ishaTime24 = LocalTime.parse(isha24, DateTimeFormatter.ofPattern("H:mm"));
                LocalTime deductedIshaTime24 = ishaTime24.minusMinutes(5);
                isha24 = deductedIshaTime24.format(DateTimeFormatter.ofPattern("H:mm"));

                // Set the flag to indicate deduction has been made
                isIshaDeducted = true;
                isIshaDeductButtonPressed = false;
            } catch (DateTimeParseException e) {
                e.printStackTrace();
            }
        }

        if (isIshaAddMinutesPressed && !isIshaAddition) {
            try {
                LocalTime ishaTime24 = LocalTime.parse(isha24, DateTimeFormatter.ofPattern("H:mm"));
                LocalTime addedIshaTime24 = ishaTime24.plusMinutes(5);
                isha24 = addedIshaTime24.format(DateTimeFormatter.ofPattern("H:mm"));

                // Set the flag to indicate addition has been made
                isIshaAddition = true;
                isIshaAddMinutesPressed = false;
            } catch (DateTimeParseException e) {
                e.printStackTrace();
            }
        }


    }


    public void AddMinutes31Dec2023(ArrayList<String[]> prayerTimes) {
        // Check if the "Adjust Fajr" button is pressed
        if (isFajrAddMinutesPressed) {
            // Deduct 5 minutes from Fajr time
            for (int i = 0; i < prayerTimes.size(); i++) {
                String[] currentTimes = prayerTimes.get(i);
                String fajrTime = currentTimes[0].trim();
                LocalTime fajr = LocalTime.parse(fajrTime, DateTimeFormatter.ofPattern("HH:mm"));
                LocalTime adjustedFajrTime = fajr.minusMinutes(5);
                fajrTime = adjustedFajrTime.format(DateTimeFormatter.ofPattern("HH:mm"));

                // Update the modified prayer times in the ArrayList
                String[] modifiedTimes = new String[]{fajrTime, currentTimes[1], currentTimes[2], currentTimes[3], currentTimes[4]};
                prayerTimes.set(i, modifiedTimes);
            }
        } else if (isFajrAddMinutesPressed) {
            // Add 5 minutes to Fajr time
            for (int i = 0; i < prayerTimes.size(); i++) {
                String[] currentTimes = prayerTimes.get(i);
                String fajrTime = currentTimes[0].trim();
                LocalTime fajr = LocalTime.parse(fajrTime, DateTimeFormatter.ofPattern("HH:mm"));
                LocalTime adjustedFajrTime = fajr.plusMinutes(5);
                fajrTime = adjustedFajrTime.format(DateTimeFormatter.ofPattern("HH:mm"));

                // Update the modified prayer times in the ArrayList
                String[] modifiedTimes = new String[]{fajrTime, currentTimes[1], currentTimes[2], currentTimes[3], currentTimes[4]};
                prayerTimes.set(i, modifiedTimes);
            }
        }

        // Check if the "Adjust Zuhr" button is pressed
        if (isZuharDeductButtonPressed) {
            // Deduct 1 minute from Zuhr time
            for (int i = 0; i < prayerTimes.size(); i++) {
                String[] currentTimes = prayerTimes.get(i);
                String zuhrTime = currentTimes[1].trim();
                LocalTime zuhr = LocalTime.parse(zuhrTime, DateTimeFormatter.ofPattern("HH:mm"));
                LocalTime adjustedZuhrTime = zuhr.minusMinutes(5);
                zuhrTime = adjustedZuhrTime.format(DateTimeFormatter.ofPattern("HH:mm"));

                // Update the modified prayer times in the ArrayList
                String[] modifiedTimes = new String[]{currentTimes[0], zuhrTime, currentTimes[2], currentTimes[3], currentTimes[4]};
                prayerTimes.set(i, modifiedTimes);
            }
        } else if (isZuharAddMinutesPressed) {
            // Add 1 minute to Zuhr time
            for (int i = 0; i < prayerTimes.size(); i++) {
                String[] currentTimes = prayerTimes.get(i);
                String zuhrTime = currentTimes[1].trim();
                LocalTime zuhr = LocalTime.parse(zuhrTime, DateTimeFormatter.ofPattern("HH:mm"));
                LocalTime adjustedZuhrTime = zuhr.plusMinutes(5);
                zuhrTime = adjustedZuhrTime.format(DateTimeFormatter.ofPattern("HH:mm"));

                // Update the modified prayer times in the ArrayList
                String[] modifiedTimes = new String[]{currentTimes[0], zuhrTime, currentTimes[2], currentTimes[3], currentTimes[4]};
                prayerTimes.set(i, modifiedTimes);
            }
        }

        // Asr

        if (isAsrAddMinutesPressed) {
            // Add 5 minutes to Asr time
            for (int i = 0; i < prayerTimes.size(); i++) {
                String[] currentTimes = prayerTimes.get(i);
                String asrTime = currentTimes[2].trim();
                LocalTime asr = LocalTime.parse(asrTime, DateTimeFormatter.ofPattern("HH:mm"));

                LocalTime adjustedAsrTime = asr.plusMinutes(5);
                asrTime = adjustedAsrTime.format(DateTimeFormatter.ofPattern("HH:mm"));

                // Update the modified prayer times in the ArrayList
                String[] modifiedTimes = new String[]{currentTimes[0], currentTimes[1], asrTime, currentTimes[3], currentTimes[4]};
                prayerTimes.set(i, modifiedTimes);
            }
        } else if (isAsrDeductButtonPressed) {
            // Deduct 5 minutes from Asr time
            for (int i = 0; i < prayerTimes.size(); i++) {
                String[] currentTimes = prayerTimes.get(i);
                String asrTime = currentTimes[2].trim();
                LocalTime asr = LocalTime.parse(asrTime, DateTimeFormatter.ofPattern("HH:mm"));

                LocalTime adjustedAsrTime = asr.minusMinutes(5);
                asrTime = adjustedAsrTime.format(DateTimeFormatter.ofPattern("HH:mm"));

                // Update the modified prayer times in the ArrayList
                String[] modifiedTimes = new String[]{currentTimes[0], currentTimes[1], asrTime, currentTimes[3], currentTimes[4]};
                prayerTimes.set(i, modifiedTimes);
            }
        }
        // Maghrib

        if (isMaghribAddMinutesPressed) {
            // Add 5 minutes to Maghrib time
            for (int i = 0; i < prayerTimes.size(); i++) {
                String[] currentTimes = prayerTimes.get(i);
                String maghribTime = currentTimes[3].trim();
                LocalTime maghrib = LocalTime.parse(maghribTime, DateTimeFormatter.ofPattern("HH:mm"));

                LocalTime adjustedMaghribTime = maghrib.plusMinutes(5);
                maghribTime = adjustedMaghribTime.format(DateTimeFormatter.ofPattern("HH:mm"));

                // Update the modified prayer times in the ArrayList
                String[] modifiedTimes = new String[]{currentTimes[0], currentTimes[1], currentTimes[2], maghribTime, currentTimes[4]};
                prayerTimes.set(i, modifiedTimes);
            }
        } else if (isMaghribDeductButtonPressed) {
            // Deduct 5 minutes from Maghrib time
            for (int i = 0; i < prayerTimes.size(); i++) {
                String[] currentTimes = prayerTimes.get(i);
                String maghribTime = currentTimes[3].trim();
                LocalTime maghrib = LocalTime.parse(maghribTime, DateTimeFormatter.ofPattern("HH:mm"));

                LocalTime adjustedMaghribTime = maghrib.minusMinutes(5);
                maghribTime = adjustedMaghribTime.format(DateTimeFormatter.ofPattern("HH:mm"));

                // Update the modified prayer times in the ArrayList
                String[] modifiedTimes = new String[]{currentTimes[0], currentTimes[1], currentTimes[2], maghribTime, currentTimes[4]};
                prayerTimes.set(i, modifiedTimes);
            }
        }

        // Isha
        if (isIshaAddMinutesPressed) {
            // Add 5 minutes to Isha time
            for (int i = 0; i < prayerTimes.size(); i++) {
                String[] currentTimes = prayerTimes.get(i);
                String ishaTime = currentTimes[4].trim();
                LocalTime isha = LocalTime.parse(ishaTime, DateTimeFormatter.ofPattern("HH:mm"));

                LocalTime adjustedIshaTime = isha.plusMinutes(5);
                ishaTime = adjustedIshaTime.format(DateTimeFormatter.ofPattern("HH:mm"));

                // Update the modified prayer times in the ArrayList
                String[] modifiedTimes = new String[]{currentTimes[0], currentTimes[1], currentTimes[2], currentTimes[3], ishaTime};
                prayerTimes.set(i, modifiedTimes);
            }
        } else if (isIshaDeductButtonPressed) {
            // Deduct 5 minutes from Isha time
            for (int i = 0; i < prayerTimes.size(); i++) {
                String[] currentTimes = prayerTimes.get(i);
                String ishaTime = currentTimes[4].trim();
                LocalTime isha = LocalTime.parse(ishaTime, DateTimeFormatter.ofPattern("HH:mm"));

                LocalTime adjustedIshaTime = isha.minusMinutes(5);
                ishaTime = adjustedIshaTime.format(DateTimeFormatter.ofPattern("HH:mm"));

                // Update the modified prayer times in the ArrayList
                String[] modifiedTimes = new String[]{currentTimes[0], currentTimes[1], currentTimes[2], currentTimes[3], ishaTime};
                prayerTimes.set(i, modifiedTimes);
            }
        }

        try {
            dFajr(fajr24);
            dZuhar(zuhar24);
            dAsr(asr24);
            dMaghrib(maghrib24);
            dIsha(isha24);

        } catch (DateTimeParseException e) {
            e.printStackTrace();
        }

        return;


    }



    public void AddMinutesWorking() {
        // ================================== ADD Minutes =================================
        // Deduct 5 minutes from Fajr24 time if FajrDeduct button is pressed
//        if (isFajrAddMinutesPressed && !isFajrAddition)


        if (isZuharDeductButtonPressed && !isZuharDeducted) {
            try {
                LocalTime zuharTime24 = LocalTime.parse(zuhar24, DateTimeFormatter.ofPattern("H:mm"));
                LocalTime deductedZuharTime24 = zuharTime24.minusMinutes(5);
                zuhar24 = deductedZuharTime24.format(DateTimeFormatter.ofPattern("H:mm"));

                // Set the flag to indicate deduction has been made
                isZuharDeducted = true;
                isZuharDeductButtonPressed = false;
            } catch (DateTimeParseException e) {
                e.printStackTrace();
            }
        }

        if (isZuharAddMinutesPressed && !isZuharAddition) {
            try {
                LocalTime zuharTime24 = LocalTime.parse(zuhar24, DateTimeFormatter.ofPattern("H:mm"));
                LocalTime addedZuharTime24 = zuharTime24.plusMinutes(5);
                zuhar24 = addedZuharTime24.format(DateTimeFormatter.ofPattern("H:mm"));

                // Set the flag to indicate addition has been made
                isZuharAddition = true;
                isZuharAddMinutesPressed = false;
            } catch (DateTimeParseException e) {
                e.printStackTrace();
            }
        }


        // =========== Asr =============
        if (isAsrDeductButtonPressed && !isAsrDeducted) {
            try {
                LocalTime asrTime24 = LocalTime.parse(asr24, DateTimeFormatter.ofPattern("H:mm"));
                LocalTime deductedAsrTime24 = asrTime24.minusMinutes(5);
                asr24 = deductedAsrTime24.format(DateTimeFormatter.ofPattern("H:mm"));

                // Set the flag to indicate deduction has been made
                isAsrDeducted = true;
                isAsrDeductButtonPressed = false;
            } catch (DateTimeParseException e) {
                e.printStackTrace();
            }
        }

        if (isAsrAddMinutesPressed && !isAsrAddition) {
            try {
                LocalTime asrTime24 = LocalTime.parse(asr24, DateTimeFormatter.ofPattern("H:mm"));
                LocalTime addedAsrTime24 = asrTime24.plusMinutes(5);
                asr24 = addedAsrTime24.format(DateTimeFormatter.ofPattern("H:mm"));

                // Set the flag to indicate addition has been made
                isAsrAddition = true;
                isAsrAddMinutesPressed = false;
            } catch (DateTimeParseException e) {
                e.printStackTrace();
            }
        }

        // ============= Maghrib =================

        if (isMaghribDeductButtonPressed && !isMaghribDeducted) {
            try {
                LocalTime maghribTime24 = LocalTime.parse(maghrib24, DateTimeFormatter.ofPattern("H:mm"));
                LocalTime deductedMaghribTime24 = maghribTime24.minusMinutes(1);
                maghrib24 = deductedMaghribTime24.format(DateTimeFormatter.ofPattern("H:mm"));

                // Set the flag to indicate deduction has been made
                isMaghribDeducted = true;
                isMaghribDeductButtonPressed = false;
            } catch (DateTimeParseException e) {
                e.printStackTrace();
            }
        }

        if (isMaghribAddMinutesPressed && !isMaghribAddition) {
            try {
                LocalTime maghribTime24 = LocalTime.parse(maghrib24, DateTimeFormatter.ofPattern("H:mm"));
                LocalTime addedMaghribTime24 = maghribTime24.plusMinutes(1);
                maghrib24 = addedMaghribTime24.format(DateTimeFormatter.ofPattern("H:mm"));

                // Set the flag to indicate addition has been made
                isMaghribAddition = true;
                isMaghribAddMinutesPressed = false;
            } catch (DateTimeParseException e) {
                e.printStackTrace();
            }
        }

        // ======================= Isha ============================
        if (isIshaDeductButtonPressed && !isIshaDeducted) {
            try {
                LocalTime ishaTime24 = LocalTime.parse(isha24, DateTimeFormatter.ofPattern("H:mm"));
                LocalTime deductedIshaTime24 = ishaTime24.minusMinutes(5);
                isha24 = deductedIshaTime24.format(DateTimeFormatter.ofPattern("H:mm"));

                // Set the flag to indicate deduction has been made
                isIshaDeducted = true;
                isIshaDeductButtonPressed = false;
            } catch (DateTimeParseException e) {
                e.printStackTrace();
            }
        }

        if (isIshaAddMinutesPressed && !isIshaAddition) {
            try {
                LocalTime ishaTime24 = LocalTime.parse(isha24, DateTimeFormatter.ofPattern("H:mm"));
                LocalTime addedIshaTime24 = ishaTime24.plusMinutes(5);
                isha24 = addedIshaTime24.format(DateTimeFormatter.ofPattern("H:mm"));

                // Set the flag to indicate addition has been made
                isIshaAddition = true;
                isIshaAddMinutesPressed = false;
            } catch (DateTimeParseException e) {
                e.printStackTrace();
            }
        }

        try {
            dFajr(fajr24);
            dZuhar(zuhar24);
            dAsr(asr24);
            dMaghrib(maghrib24);
            dIsha(isha24);

        } catch (DateTimeParseException e) {
            e.printStackTrace();
        }

    }


    private void GetTime31July2023(String... filePath) {
//        if (filePath.length > 0) {
//            // A file path was provided, use it
//            path = filePath[0];
//        } else {
//            // No file path provided, use the default
//            path = "timings.xls";
//        }
//
//        try {
//            AssetManager am = getAssets();
//            InputStream is = am.open(path);
//            Workbook wb = Workbook.getWorkbook(is);

        String path;
        if (filePath.length > 0 && filePath[0] != null) {
            // A file path was provided, use it
            path = filePath[0];
        } else {
            // No file path provided, use the default "timings.xls"
            path = "timings.xls";
        }

        try {
            InputStream is;

//            if (path.startsWith("timings.xls"))
            if (path != null)
            {
                // Use the default "timings.xls" file from the assets folder
                AssetManager am = getAssets();
                is = am.open(path);
            } else {
                // Use the selected file
                File file = new File(path);
                is = new FileInputStream(file);
            }

            Workbook wb = Workbook.getWorkbook(is);


            Sheet sheet = wb.getSheet(0);
            int numColumns = sheet.getColumns();
            int numRows = sheet.getRows();
            int dateColumnIndex = 0;
            int fajrColumnIndex = 1;
            int zuharColumnIndex = 2;
            int asrColumnIndex = 3;
            int MaghribColumnIndex = 4;
            int ishaColumnIndex = 5;

            // Match the date format with the Excel date format to load the data
            String currentDateString = DateFormat.format("MM/dd/yyyy", new Date()).toString();

            List<String[]> data = new ArrayList<>();

            // Load all the data into a list
            for (int row = 0; row < numRows; row++) {
                String[] rowData = new String[numColumns];
                for (int col = 0; col < numColumns; col++) {
                    Cell cell = sheet.getCell(col, row);
                    rowData[col] = cell.getContents();
                }
                data.add(rowData);
            }

            // Find the row with the current date
            int currentRow = -1;
            String currentDate = "";
            if (currentDateString.length() >= 10) {
                currentDate = currentDateString.substring(0, 10); // Extract date part
            }
            for (int row = 0; row < data.size(); row++) {
                String[] rowData = data.get(row);
                String cellValue = rowData[dateColumnIndex];
                String cellDate = "";
                if (cellValue.length() >= 10) {
                    // Extract date part from cell value with different format
                    SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
                    Date cellDateObj = dateFormat.parse(cellValue);
                    SimpleDateFormat outputFormat = new SimpleDateFormat("MM/dd/yyyy");
                    cellDate = outputFormat.format(cellDateObj);
                }
                Log.d("My Activity", "Cell value: " + cellValue);
                Log.d("My Activity", "Cell date: " + cellDate);
                if (cellDate.equals(currentDate)) {
                    currentRow = row;
                    Log.d("My Activity", "Today's Date Matched: " + cellValue);

                    break;
                }
            }


            if (currentRow != -1) {
                // Current date found in the data
                CharSequence currentdate = DateFormat.format("MM/dd/yyyy HH:mm:ss", d.getTime());
                Log.wtf("My Activity", "System Date & Time: " + currentdate);

                String[] currentRowData = data.get(currentRow);
                String fajrTime = currentRowData[fajrColumnIndex].trim();
                String zuharTime = currentRowData[zuharColumnIndex].trim();
                String asrTime = currentRowData[asrColumnIndex].trim();
                String MaghribTime = currentRowData[MaghribColumnIndex].trim();
                String ishaTime = currentRowData[ishaColumnIndex].trim();

                // Get the prayer times for the next day
                int nextDayRow = (currentRow + 1) % data.size();
                String[] nextDayRowData = data.get(nextDayRow);
                String nextDayFajrTime = nextDayRowData[fajrColumnIndex].trim();
                String nextDayZuharTime = nextDayRowData[zuharColumnIndex].trim();
                String nextDayAsrTime = nextDayRowData[asrColumnIndex].trim();
                String nextDayMaghribTime = nextDayRowData[MaghribColumnIndex].trim();
                String nextDayIshaTime = nextDayRowData[ishaColumnIndex].trim();

                ////////////////////////////////////////////////////////////////////
                //////////////////////////////////////////////////////////////////////////////////

                // Store the next day's prayer times
                nextFajr = nextDayFajrTime.trim();
                nextZuhar = nextDayZuharTime.trim();
                nextAsr = nextDayAsrTime.trim();
                nextMaghrib = nextDayMaghribTime.trim();
                nextIsha = nextDayIshaTime.trim();

//                AddMinutes();

                fajr24 = fajrTime.trim();
                zuhar24 = zuharTime;
                asr24 = asrTime;
                maghrib24 = MaghribTime;
                isha24 = ishaTime;

                AddMinutes();



            } else {
                // Current date not found in the data
                Log.wtf("My Activity", "Current Date Did Match in The Excel Data");
                replaceFile();
            }


        } catch (IOException | BiffException e) {
            e.printStackTrace();
            return;
        } catch (ParseException e) {
            throw new RuntimeException(e);
        }
    }

    // Update the flip clock display with the remaining time
    public void updateFlipClockDisplay(long remainingMillis) {
//        hoursView.startFlipClock(remainingMillis);


        long hours = remainingMillis / (60 * 60 * 1000) % 24;
        long minutes = remainingMillis / (60 * 1000) % 60;
        long seconds = remainingMillis / 1000 % 60;

        final long delay = 1000; // Delay between each transition in milliseconds

//        int hour =  (int) hours;
//        int minute = (int) minutes;
//        int second = (int) seconds;
//
//        String hoursString = String.valueOf(hours);
//        hoursView.animateFlip(hoursString);
//        String minutesString = String.valueOf(minutes);
//        String secondsString = String.valueOf(seconds);
//
//        minutesView.animateFlip(minutesString);
//        secondsView.animateFlip(secondsString);

//        String hoursText = String.format("%02d", hours); // Format the hours with leading zero if necessary
//        String minutesText = String.format("%02d", minutes); // Format the minutes with leading zero if necessary
//        String secondsText = String.format("%02d", seconds); // Format the seconds with leading zero if necessary
//        hoursView.animateFlip(hoursText);
//        minutesView.animateFlip(minutesText);
//        secondsView.animateFlip(secondsText);


//// Example usage: animate the flip clock for hours, minutes, and seconds
//        hoursView.animateFlip(hours.toString());
//        minutesView.animateFlip("25");
//        secondsView.animateFlip("42");


////         check if the values passed are working
//        hoursView.animateMillisTransition(hour * 3600 * 1000);
//        minutesView.animateMillisTransition(minute * 60 * 1000);
//        secondsView.animateMillisTransition(second * 1000);
//
//
//        Log.wtf("Checking", "Hours: "+hour + " Minutes: " + minute + " Seconds: " + second);
//        // Animate the transition for hours
//        hoursView.postDelayed(new Runnable() {
//            @Override
//            public void run() {
//                hoursView.animateMillisTransition(hour * 3600 * 1000);
//            }
//        }, delay);
//
//        // Animate the transition for minutes
//        minutesView.postDelayed(new Runnable() {
//            @Override
//            public void run() {
//                minutesView.animateMillisTransition(minute * 60 * 1000);
//            }
//        }, delay * 2); // Double the delay for minutes
//
//        // Animate the transition for seconds
//        secondsView.postDelayed(new Runnable() {
//            @Override
//            public void run() {
//                secondsView.animateMillisTransition(second * 1000);
//            }
//        }, delay * 3); // Triple the delay for seconds
    }





// ======================================= Backups don't touch ========================================


    // Backup of Get Time 10 June 2023 = Working Don't EDIT THIS

                public void CalculateTimingsThrobbing () {
                DateTimeFormatter inputFormat = DateTimeFormatter.ofPattern("HH:mm"); // Assuming the prayer times are in 12-hour format
                DateTimeFormatter outputFormat = DateTimeFormatter.ofPattern("HH:mm"); // Format to 24-hour format
                DateTimeFormatter FajrinputFormat = DateTimeFormatter.ofPattern("H:mm"); // Assuming the prayer times are in 12-hour format

                try {
                    // Convert prayer times to LocalTime objects
                    LocalTime fajrTime = LocalTime.parse(fajr24.trim(), FajrinputFormat);
                    LocalTime zuharTime = LocalTime.parse(zuhar24.trim(), FajrinputFormat);
                    LocalTime asrTime = LocalTime.parse(asr24.trim(), FajrinputFormat);
                    LocalTime MaghribTime = LocalTime.parse(maghrib24.trim(), FajrinputFormat);
                    LocalTime ishaTime = LocalTime.parse(isha24.trim(), FajrinputFormat);

                    // Add 12 hours to each prayer time except fajr To avoid time Format ERROR
                    fajrTime = fajrTime.plusHours(0);
                    zuharTime = zuharTime.plusHours(12);
                    asrTime = asrTime.plusHours(12);
                    MaghribTime = MaghribTime.plusHours(12);
                    ishaTime = ishaTime.plusHours(12);

                    // Get the current date and time
                    LocalDate currentDate = LocalDate.now();
                    LocalTime currentTime = LocalTime.now();
                    LocalDateTime currentDateTime = LocalDateTime.of(currentDate, currentTime);
                    TextView[] boxBackgrounds = {BoxFajr, BoxZuhar, BoxAsr, BoxMaghrib, BoxIsha};

                    // Calculate the next prayer index
                    int nextPrayerIndex = -1;
                    LocalTime[] prayerTimes = {fajrTime, zuharTime, asrTime, MaghribTime, ishaTime};
                    String[] prayerNames = {"Fajr", "Zuhar", "Asr", "Maghrib", "Isha"};


                    for (int i = 0; i < prayerTimes.length; i++) {
                        if (currentDateTime.toLocalTime().compareTo(prayerTimes[i]) <= 0 || i == prayerTimes.length - 1) {
                            nextPrayerIndex = i;
                            Log.d("My Activity", "Next Prayer: " + prayerNames[nextPrayerIndex] + " " + prayerTimes[i]);
                            break;
                        }
                    }

                    DateTimeFormatter dateFormat = DateTimeFormatter.ofPattern("MM/dd/yyyy"); // Updated date format
                    Log.d("My Activity", "Check Today's Date: " + currentDate.format(dateFormat)); // Format the current date

                    if (nextPrayerIndex != -1) {
                        LocalTime nextPrayerTime = prayerTimes[nextPrayerIndex];
                        LocalDateTime nextPrayerDateTime = LocalDateTime.of(currentDate, nextPrayerTime);

                        // Check if the current time is before the next prayer
                        if (currentDateTime.isBefore(nextPrayerDateTime)) {
                            // Remaining time until the next prayer
                            Duration remainingTime = Duration.between(currentDateTime, nextPrayerDateTime);

                            // Convert remaining time to milliseconds
                            long remainingMillis = remainingTime.toMillis();
            //                    Log.d("My Activity", "IF Block: Time remaining in Millis: " + remainingMillis);

                            Countdowntime(remainingMillis);
                            countdowntxt.setText(countdowndt);
                            Namaz.setText(prayerNames[nextPrayerIndex]);
                            Log.wtf("My Activity", "next prayer: " + prayerNames[nextPrayerIndex]);

                            // Set the background for the corresponding prayer
                            clearBackground();
                            boxBackgrounds[nextPrayerIndex].setBackgroundResource(R.drawable.textview_outline);


                            // ========================== ANIMATION ===============================

                            // Set the initial visibility of the view to invisible
                            boxBackgrounds[nextPrayerIndex].setVisibility(View.INVISIBLE);

            // Create an AlphaAnimation for the fade in and out effect
                            AlphaAnimation fadeInOutAnimation = new AlphaAnimation(0f, 3f);
                            fadeInOutAnimation.setDuration(2000); // Duration for each fade in/out animation
                            fadeInOutAnimation.setFillAfter(true);
                            fadeInOutAnimation.setRepeatMode(Animation.REVERSE); // Reverse the animation
                            fadeInOutAnimation.setRepeatCount(Animation.INFINITE); // Repeat the animation infinitely
                            fadeInOutAnimation.setInterpolator(new AccelerateDecelerateInterpolator());

            // Schedule the animation to start after a delay
                            Handler handler = new Handler();
                            int finalNextPrayerIndex = nextPrayerIndex;
                            handler.postDelayed(new Runnable() {
                                @Override
                                public void run() {
                                    // Make the view visible and start the animation
                                    boxBackgrounds[finalNextPrayerIndex].setVisibility(View.VISIBLE);
                                    boxBackgrounds[finalNextPrayerIndex].startAnimation(fadeInOutAnimation);
                                }
                            }, 2000); // Delay in milliseconds before starting the animation


                            // Deduct 5 minutes from Fajr24 time if FajrDeduct button is pressed and deduction is not already made
                            if (isFajrAddMinutesPressed && !isFajrDeducted) {
                                try {
                                    LocalTime fajrTime24 = LocalTime.parse(fajr24, DateTimeFormatter.ofPattern("H:mm"));
                                    LocalTime deductedFajrTime24 = fajrTime24.minusMinutes(5);
                                    fajr24 = deductedFajrTime24.format(DateTimeFormatter.ofPattern("H:mm"));
                                    // Increment the deduction count

                                    // Set the flag to indicate deduction has been made
                                    isFajrDeducted = false;
                                    isFajrAddMinutesPressed = false;
                                } catch (DateTimeParseException e) {
                                    e.printStackTrace();
                                }
                            }

                            if (isFajrAddMinutesPressed && !isFajrAddition) {
                                try {
                                    LocalTime fajrTime24 = LocalTime.parse(fajr24, DateTimeFormatter.ofPattern("H:mm"));
                                    LocalTime addedFajrTime24 = fajrTime24.plusMinutes(5);
                                    fajr24 = addedFajrTime24.format(DateTimeFormatter.ofPattern("H:mm"));

                                    // Increment the addition count


                                    // Set the flag to indicate deduction has been reversed
                                    isFajrAddition = false;
                                    isFajrAddMinutesPressed = false;

                                } catch (DateTimeParseException e) {
                                    e.printStackTrace();
                                }
                            }

                            dFajr(fajr24);
                            dZuhar(zuhar24);
                            dAsr(asr24);
                            dMaghrib(maghrib24);
                            dIsha(isha24);

                        } else {

                            // If Isha time is passed
            //                    Log.wtf("My Activity", "UpdatedPRayertimes called");

                            // Calculate the next prayer's datetime of the following day
                            LocalDateTime nextDayDateTime = currentDateTime.plusDays(1);
                            LocalDateTime nextPrayerNextDayDateTime = LocalDateTime.of(nextDayDateTime.toLocalDate(), prayerTimes[0]);

                            // Remaining time until the next prayer of the following day
                            Duration remainingTime = Duration.between(currentDateTime, nextPrayerNextDayDateTime);

                            // Convert remaining time to milliseconds
                            long remainingMillis = remainingTime.toMillis();

                            //                    Log.d("My Activity", "Else block: Time remaining in Millis: " + remainingMillis);

                            Countdowntime(remainingMillis);
                            countdowntxt.setText(countdowndt);
                            Namaz.setText(prayerNames[0]);
                            NextDayPrayerTimes();

                            // Set the background for the corresponding prayer
                            clearBackground();
                            BoxFajr.setBackgroundResource(R.drawable.textview_outline);

                            // Set the initial visibility of the view to invisible
                            BoxFajr.setVisibility(View.INVISIBLE);

            // Create an AlphaAnimation for the fade in and out effect
                            AlphaAnimation fadeInOutAnimation = new AlphaAnimation(0f, 2f);
                            fadeInOutAnimation.setDuration(2000); // Duration for each fade in/out animation
                            fadeInOutAnimation.setFillAfter(true);
                            fadeInOutAnimation.setRepeatMode(Animation.REVERSE); // Reverse the animation
                            fadeInOutAnimation.setRepeatCount(Animation.INFINITE); // Repeat the animation infinitely
                            fadeInOutAnimation.setInterpolator(new AccelerateDecelerateInterpolator());

            // Schedule the animation to start after a delay
                            Handler handler = new Handler();
                            handler.postDelayed(new Runnable() {
                                @Override
                                public void run() {
                                    // Make the view visible and start the animation
                                    BoxFajr.setVisibility(View.VISIBLE);
                                    BoxFajr.startAnimation(fadeInOutAnimation);
                                }
                            }, 2000); // Delay in milliseconds before starting the animation


                            Log.wtf("My Activity", "next prayer: " + prayerNames[nextPrayerIndex]);

                            dFajr(fajr24);
                            dZuhar(zuhar24);
                            dAsr(asr24);
                            dMaghrib(maghrib24);
                            dIsha(isha24);


                        }

                    }

                } catch (DateTimeParseException e) {
                    e.printStackTrace();
                    // Handle parsing errors
                }
            }


                public void CalculateTimingsWorkingUpdate6June23 () {
                DateTimeFormatter inputFormat = DateTimeFormatter.ofPattern("HH:mm"); // Assuming the prayer times are in 12-hour format
                DateTimeFormatter outputFormat = DateTimeFormatter.ofPattern("HH:mm"); // Format to 24-hour format
                DateTimeFormatter FajrinputFormat = DateTimeFormatter.ofPattern("H:mm"); // Assuming the prayer times are in 12-hour format

                try {
                    // Convert prayer times to LocalTime objects
                    LocalTime fajrTime = LocalTime.parse(fajr24.trim(), FajrinputFormat);
                    LocalTime zuharTime = LocalTime.parse(zuhar24.trim(), FajrinputFormat);
                    LocalTime asrTime = LocalTime.parse(asr24.trim(), FajrinputFormat);
                    LocalTime MaghribTime = LocalTime.parse(maghrib24.trim(), FajrinputFormat);
                    LocalTime ishaTime = LocalTime.parse(isha24.trim(), FajrinputFormat);

                    // Add 12 hours to each prayer time except fajr To avoid time Format ERROR
                    fajrTime = fajrTime.plusHours(0);
                    zuharTime = zuharTime.plusHours(12);
                    asrTime = asrTime.plusHours(12);
                    MaghribTime = MaghribTime.plusHours(12);
                    ishaTime = ishaTime.plusHours(12);

                    // Get the current date and time
                    LocalDate currentDate = LocalDate.now();
                    LocalTime currentTime = LocalTime.now();
                    LocalDateTime currentDateTime = LocalDateTime.of(currentDate, currentTime);
                    TextView[] boxBackgrounds = {BoxFajr, BoxZuhar, BoxAsr, BoxMaghrib, BoxIsha};

                    // Calculate the next prayer index
                    int nextPrayerIndex = -1;
                    LocalTime[] prayerTimes = {fajrTime, zuharTime, asrTime, MaghribTime, ishaTime};
                    String[] prayerNames = {"Fajr", "Zuhar", "Asr", "Maghrib", "Isha"};

                    for (int i = 0; i < prayerTimes.length; i++) {
                        if (currentDateTime.toLocalTime().compareTo(prayerTimes[i]) <= 0 || i == prayerTimes.length - 1) {
                            nextPrayerIndex = i;
                            Log.d("My Activity", "Next Prayer: " + prayerNames[nextPrayerIndex] + " " + prayerTimes[i]);
                            break;
                        }
                    }

                    DateTimeFormatter dateFormat = DateTimeFormatter.ofPattern("MM/dd/yyyy"); // Updated date format
                    Log.d("My Activity", "Check Today's Date: " + currentDate.format(dateFormat)); // Format the current date

                    if (nextPrayerIndex != -1) {
                        LocalTime nextPrayerTime = prayerTimes[nextPrayerIndex];
                        LocalDateTime nextPrayerDateTime = LocalDateTime.of(currentDate, nextPrayerTime);
                        // Check if the current time is before the next prayer
                        if (currentDateTime.isBefore(nextPrayerDateTime)) {
                            // Remaining time until the next prayer
                            Duration remainingTime = Duration.between(currentDateTime, nextPrayerDateTime);

                            // Convert remaining time to milliseconds
                            long remainingMillis = remainingTime.toMillis();
            //                    Log.d("My Activity", "IF Block: Time remaining in Millis: " + remainingMillis);

                            Countdowntime(remainingMillis);
                            countdowntxt.setText(countdowndt);
                            Namaz.setText(prayerNames[nextPrayerIndex]);
                            Log.wtf("My Activity", "next prayer: " + prayerNames[nextPrayerIndex]);

                            // Set the background for the corresponding prayer
                            clearBackground();
                            boxBackgrounds[nextPrayerIndex].setBackgroundResource(R.drawable.textview_outline);


                            dFajr(fajr24);
                            dZuhar(zuhar24);
                            dAsr(asr24);
                            dMaghrib(maghrib24);
                            dIsha(isha24);

                        } else {

                            // If Isha time is passed
            //                    Log.wtf("My Activity", "UpdatedPRayertimes called");

                            // Calculate the next prayer's datetime of the following day
                            LocalDateTime nextDayDateTime = currentDateTime.plusDays(1);
                            LocalDateTime nextPrayerNextDayDateTime = LocalDateTime.of(nextDayDateTime.toLocalDate(), prayerTimes[0]);

                            // Remaining time until the next prayer of the following day
                            Duration remainingTime = Duration.between(currentDateTime, nextPrayerNextDayDateTime);

                            // Convert remaining time to milliseconds
                            long remainingMillis = remainingTime.toMillis();
            //                    Log.d("My Activity", "Else block: Time remaining in Millis: " + remainingMillis);

                            Countdowntime(remainingMillis);
                            countdowntxt.setText(countdowndt);
                            Namaz.setText(prayerNames[0]);
                            NextDayPrayerTimes();

                            // Set the background for the corresponding prayer
                            clearBackground();
                            BoxFajr.setBackgroundResource(R.drawable.textview_outline);


                            Log.wtf("My Activity", "next prayer: " + prayerNames[nextPrayerIndex]);

                            dFajr(fajr24);
                            dZuhar(zuhar24);
                            dAsr(asr24);
                            dMaghrib(maghrib24);
                            dIsha(isha24);


                        }

                    }

                } catch (DateTimeParseException e) {
                    e.printStackTrace();
                    // Handle parsing errors
                }
            }

                private void GetTimeWorkingOriginalBackup (String...filePath){
                if (filePath.length > 0) {
                    // A file path was provided, use it
                    path = filePath[0];
                } else {
                    // No file path provided, use the default
                    path = "timings.xls";
                }

                try {
                    AssetManager am = getAssets();
                    InputStream is = am.open(path);
                    Workbook wb = Workbook.getWorkbook(is);

                    Sheet sheet = wb.getSheet(0);
                    int numColumns = sheet.getColumns();
                    int numRows = sheet.getRows();
                    int dateColumnIndex = 0;
                    int fajrColumnIndex = 1;
                    int zuharColumnIndex = 2;
                    int asrColumnIndex = 3;
                    int MaghribColumnIndex = 4;
                    int ishaColumnIndex = 5;

                    // Match the date format with the Excel date format to load the data
                    String currentDateString = DateFormat.format("MM/dd/yyyy", new Date()).toString();

                    List<String[]> data = new ArrayList<>();

                    // Load all the data into a list
                    for (int row = 0; row < numRows; row++) {
                        String[] rowData = new String[numColumns];
                        for (int col = 0; col < numColumns; col++) {
                            Cell cell = sheet.getCell(col, row);
                            rowData[col] = cell.getContents();
                        }
                        data.add(rowData);
                    }

                    // Find the row with the current date
                    int currentRow = -1;
                    String currentDate = "";
                    if (currentDateString.length() >= 10) {
                        currentDate = currentDateString.substring(0, 10); // Extract date part
                    }
                    for (int row = 0; row < data.size(); row++) {
                        String[] rowData = data.get(row);
                        String cellValue = rowData[dateColumnIndex];
                        String cellDate = "";
                        if (cellValue.length() >= 10) {
                            // Extract date part from cell value with different format
                            SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
                            Date cellDateObj = dateFormat.parse(cellValue);
                            SimpleDateFormat outputFormat = new SimpleDateFormat("MM/dd/yyyy");
                            cellDate = outputFormat.format(cellDateObj);
                        }
                        Log.d("My Activity", "Cell value: " + cellValue);
                        Log.d("My Activity", "Cell date: " + cellDate);
                        if (cellDate.equals(currentDate)) {
                            currentRow = row;
                            Log.d("My Activity", "Today's Date Matched: " + cellValue);

                            break;
                        }
                    }


                    if (currentRow != -1) {
                        // Current date found in the data
                        CharSequence currentdate = DateFormat.format("MM/dd/yyyy HH:mm:ss", d.getTime());
                        Log.wtf("My Activity", "System Date & Time: " + currentdate);

                        String[] currentRowData = data.get(currentRow);
                        String fajrTime = currentRowData[fajrColumnIndex].trim();
                        String zuharTime = currentRowData[zuharColumnIndex].trim();
                        String asrTime = currentRowData[asrColumnIndex].trim();
                        String MaghribTime = currentRowData[MaghribColumnIndex].trim();
                        String ishaTime = currentRowData[ishaColumnIndex].trim();

                        // Get the prayer times for the next day
                        int nextDayRow = (currentRow + 1) % data.size();
                        String[] nextDayRowData = data.get(nextDayRow);
                        String nextDayFajrTime = nextDayRowData[fajrColumnIndex].trim();
                        String nextDayZuharTime = nextDayRowData[zuharColumnIndex].trim();
                        String nextDayAsrTime = nextDayRowData[asrColumnIndex].trim();
                        String nextDayMaghribTime = nextDayRowData[MaghribColumnIndex].trim();
                        String nextDayIshaTime = nextDayRowData[ishaColumnIndex].trim();

                        // Store the next day's prayer times
                        nextFajr = nextDayFajrTime.trim();
                        nextZuhar = nextDayZuharTime.trim();
                        nextAsr = nextDayAsrTime.trim();
                        nextMaghrib = nextDayMaghribTime.trim();
                        nextIsha = nextDayIshaTime.trim();

                        // Update the UI with the prayer times
                        dFajr(fajrTime);
                        dZuhar(zuharTime);
                        dAsr(asrTime);
                        dMaghrib(MaghribTime);
                        dIsha(ishaTime);

                        fajr24 = fajrTime.trim();
                        zuhar24 = zuharTime;
                        asr24 = asrTime;
                        maghrib24 = MaghribTime;
                        isha24 = ishaTime;


                    } else {
                        // Current date not found in the data
                        Log.wtf("My Activity", "Current Date Did Match in The Excel Data");
                        replaceFile();
                    }


                } catch (IOException | BiffException e) {
                    e.printStackTrace();
                    return;
                } catch (ParseException e) {
                    throw new RuntimeException(e);
                }
            }

                public void startUpdatingClockEverySecondOriginalBackup () {
                // Create a countdown timer with a tick interval of 1 second (1000 milliseconds)
                new CountDownTimer(Long.MAX_VALUE, 1000) {
                    public void onTick(long millisUntilFinished) {
                        CalculateTimings(); // Call the method to update the clock every second
                    }

                    public void onFinish() {
                        // Timer finished (not relevant for updating the clock)
                    }
                }.start();
            }

                public void NextDayPrayerTimesWorkingOriginal () {
                // Assuming you have a method to fetch the updated prayer times for the next day
                String[] updatedPrayerTimes = {nextFajr, nextZuhar, nextAsr, nextMaghrib, nextIsha};

                // Check if the fetched prayer times are valid
                if (updatedPrayerTimes != null && updatedPrayerTimes.length == 5) {
                    try {
                        DateTimeFormatter FajrinputFormat = DateTimeFormatter.ofPattern("H:mm"); // Assuming the prayer times are in 12-hour format

                        // Convert the updated prayer times to LocalTime objects
                        LocalTime updatedFajr = LocalTime.parse(updatedPrayerTimes[0], FajrinputFormat);
                        LocalTime updatedZuhar = LocalTime.parse(updatedPrayerTimes[1], FajrinputFormat);
                        LocalTime updatedAsr = LocalTime.parse(updatedPrayerTimes[2], FajrinputFormat);
                        LocalTime updatedMaghrib = LocalTime.parse(updatedPrayerTimes[3], FajrinputFormat);
                        LocalTime updatedIsha = LocalTime.parse(updatedPrayerTimes[4], FajrinputFormat);

                        // Get the current date and time
                        LocalDate currentDate = LocalDate.now();
                        LocalTime currentTime = LocalTime.now();
                        LocalDateTime currentDateTime = LocalDateTime.of(currentDate, currentTime);

                        // Check if it is after the Isha prayer time
                        LocalTime ishaTime = LocalTime.parse(isha24);
                        LocalDateTime ishaDateTime = LocalDateTime.of(currentDate, ishaTime);

                        if (currentDateTime.isAfter(ishaDateTime)) {
                            // Update the prayer times array with the updated values
                            fajr24 = updatedPrayerTimes[0];
                            zuhar24 = updatedPrayerTimes[1];
                            asr24 = updatedPrayerTimes[2];
                            maghrib24 = updatedPrayerTimes[3];
                            isha24 = updatedPrayerTimes[4];

                            dFajr(fajr24);
                            dZuhar(zuhar24);
                            dAsr(asr24);
                            dMaghrib(maghrib24);
                            dIsha(isha24);
                        }
                    } catch (DateTimeParseException e) {
                        e.printStackTrace();
                        // Handle parsing errors if necessary
                    }
                } else {
                    // Handle the case where the fetched prayer times are not valid
                }
            }

                public void CalculateTimingsWorkingOriginal () {
                DateTimeFormatter inputFormat = DateTimeFormatter.ofPattern("HH:mm"); // Assuming the prayer times are in 12-hour format
                DateTimeFormatter outputFormat = DateTimeFormatter.ofPattern("HH:mm"); // Format to 24-hour format
                DateTimeFormatter FajrinputFormat = DateTimeFormatter.ofPattern("H:mm"); // Assuming the prayer times are in 12-hour format

                try {
                    // Convert prayer times to LocalTime objects
                    LocalTime fajrTime = LocalTime.parse(fajr24.trim(), FajrinputFormat);
                    LocalTime zuharTime = LocalTime.parse(zuhar24.trim(), FajrinputFormat);
                    LocalTime asrTime = LocalTime.parse(asr24.trim(), FajrinputFormat);
                    LocalTime MaghribTime = LocalTime.parse(maghrib24.trim(), FajrinputFormat);
                    LocalTime ishaTime = LocalTime.parse(isha24.trim(), FajrinputFormat);

                    // Add 12 hours to each prayer time except fajr
                    fajrTime = fajrTime.plusHours(0);
                    zuharTime = zuharTime.plusHours(12);
                    asrTime = asrTime.plusHours(12);
                    MaghribTime = MaghribTime.plusHours(12);
                    ishaTime = ishaTime.plusHours(12);

                    // Get the current date and time
                    LocalDate currentDate = LocalDate.now();
                    LocalTime currentTime = LocalTime.now();
                    LocalDateTime currentDateTime = LocalDateTime.of(currentDate, currentTime);

                    // Calculate the next prayer index
                    int nextPrayerIndex = -1;
                    LocalTime[] prayerTimes = {fajrTime, zuharTime, asrTime, MaghribTime, ishaTime};
                    String[] prayerNames = {"Fajr", "Zuhar", "Asr", "Maghrib", "Isha"};

                    for (int i = 0; i < prayerTimes.length; i++) {
                        if (currentDateTime.toLocalTime().compareTo(prayerTimes[i]) <= 0 || i == prayerTimes.length - 1) {
                            nextPrayerIndex = i;
                            Log.d("My Activity", "Next Prayer: " + prayerNames[nextPrayerIndex]);
                            break;
                        }
                    }

                    DateTimeFormatter dateFormat = DateTimeFormatter.ofPattern("MM/dd/yyyy"); // Updated date format
                    Log.d("My Activity", "Check Today's Date: " + currentDate.format(dateFormat)); // Format the current date

                    if (nextPrayerIndex != -1) {
                        LocalTime nextPrayerTime = prayerTimes[nextPrayerIndex];
                        LocalDateTime nextPrayerDateTime = LocalDateTime.of(currentDate, nextPrayerTime);
                        // Check if the current time is before the next prayer
                        if (currentDateTime.isBefore(nextPrayerDateTime)) {
                            // Remaining time until the next prayer
                            Duration remainingTime = Duration.between(currentDateTime, nextPrayerDateTime);

                            // Convert remaining time to milliseconds
                            long remainingMillis = remainingTime.toMillis();
            //                    Log.d("My Activity", "IF Block: Time remaining in Millis: " + remainingMillis);

                            Countdowntime(remainingMillis);
                            countdowntxt.setText(countdowndt);
                            Namaz.setText(prayerNames[nextPrayerIndex]);

                            // Set the background for the corresponding prayer
                            clearBackground();
                            TextView[] boxBackgrounds = {BoxFajr, BoxZuhar, BoxAsr, BoxMaghrib, BoxIsha};
                            boxBackgrounds[nextPrayerIndex].setBackgroundResource(R.drawable.textview_outline);
                        } else {

                            // If Isha time is passed
            //                    Log.wtf("My Activity", "UpdatedPRayertimes called");


                            // Calculate the next prayer's datetime of the following day
                            LocalDateTime nextDayDateTime = currentDateTime.plusDays(1);
                            LocalDateTime nextPrayerNextDayDateTime = LocalDateTime.of(nextDayDateTime.toLocalDate(), prayerTimes[0]);

                            // Remaining time until the next prayer of the following day
                            Duration remainingTime = Duration.between(currentDateTime, nextPrayerNextDayDateTime);

                            // Convert remaining time to milliseconds
                            long remainingMillis = remainingTime.toMillis();
            //                    Log.d("My Activity", "Else block: Time remaining in Millis: " + remainingMillis);

                            Countdowntime(remainingMillis);
                            countdowntxt.setText(countdowndt);
                            Namaz.setText(prayerNames[0]);
                            NextDayPrayerTimes();

                            // Set the background for the corresponding prayer
                            clearBackground();
                            BoxFajr.setBackgroundResource(R.drawable.textview_outline);

                        }

                    }

                } catch (DateTimeParseException e) {
                    e.printStackTrace();
                    // Handle parsing errors
                }
            }


                // ********************************************** Code bank **********************************
            //
                // ************************** Button Add Minus Concept ***************************************************

                // ********************* Fajr buttons for increment decrement ******************************
            //    Button btnFajrPlus = findViewById(R.id.btnFajrPlus);
            //    Button btnFajrMinus = findViewById(R.id.btnFajrMinus);
            //
            //
            ////        btnFajrPlus.setVisibility(View.INVISIBLE);
            ////        btnFajrMinus.setVisibility(View.INVISIBLE);
            //
            //
            //        btnFajrPlus.setOnClickListener(new View.OnClickListener() {
            //        @Override
            //        public void onClick(View v) {
            //            // Calculate the addition based on the count
            //            fajrCounter++;
            //            if (fajrCounter >= 0) {
            //                fajrAdd++;
            //            }
            //            if (fajrCounter == 0) {
            //                fajrAdd = 0;
            //            }
            //
            //            handleAddMinutesButtonClick();
            //            Log.wtf("MY ACITVITY", "fajrCounter: " + fajrCounter);
            //        }
            //    });
            //
            //        btnFajrMinus.setOnClickListener(new View.OnClickListener() {
            //        @Override
            //        public void onClick(View v) {
            //            fajrCounter--;
            //            handleMinusMinutesButtonClick();
            //
            //            if (fajrCounter >= 0) {
            //                fajrAdd++;
            //            }
            //            if (fajrCounter == 0) {
            //                fajrAdd = 0;
            //            }
            //
            //            Log.wtf("MY ACITVITY", "fajrCounter: " + fajrCounter);
            //
            //        }
            //    });
            //
            //    private void handleAddMinutesButtonClick() {
            //        // Calculate the addition based on the counter value
            //        isbtnFajrPlusPressed = true;
            //        isFajrAddition = false;
            ////        Log.wtf("MY ACITVITY", "Button fajrCounter - : " + fajrCounter);
            //
            //        // Perform calculations using the fajrCounter
            //        performAdditionCalculations();
            //    }
            //    private void handleMinusMinutesButtonClick() {
            //        // Calculate the deduction based on the counter value
            //        isFajrAddMinutesPressed = true;
            //        isFajrDeducted = false;
            ////        Log.wtf("MY ACITVITY", "Button fajrCounter - : " + fajrCounter);
            //
            //        // Perform calculations using the fajrCounter
            //        performSubtractionCalculations();
            //    }
            //
            //    private void performAdditionCalculations() {
            //        fajrTime24 = LocalTime.parse(fajr24, DateTimeFormatter.ofPattern("H:mm"));
            //        addedFajrTime24 = fajrTime24.plusMinutes(5 );
            //        fajr24 = addedFajrTime24.format(DateTimeFormatter.ofPattern("H:mm"));
            //
            //        nextFajr24 = LocalTime.parse(nextFajr, DateTimeFormatter.ofPattern("H:mm"));
            //        nextFajrTime24 = nextFajr24.plusMinutes(5);
            //        nextFajr = nextFajrTime24.format(DateTimeFormatter.ofPattern("H:mm"));
            //
            //        // Perform any other necessary calculations or operations
            //    }
            //
            //    private void performSubtractionCalculations() {
            //        fajrTime24 = LocalTime.parse(fajr24, DateTimeFormatter.ofPattern("H:mm"));
            ////        deductedFajrTime24 = fajrTime24.minusMinutes(5 * Math.abs(fajrCounter));
            //        deductedFajrTime24 = fajrTime24.minusMinutes(5 );
            //
            //        fajr24 = deductedFajrTime24.format(DateTimeFormatter.ofPattern("H:mm"));
            //
            //        nextFajr24 = LocalTime.parse(nextFajr, DateTimeFormatter.ofPattern("H:mm"));
            //        nextFajrTime24 = nextFajr24.minusMinutes(5);
            //        nextFajr = nextFajrTime24.format(DateTimeFormatter.ofPattern("H:mm"));
            //
            //        // Perform any other necessary calculations or operations
            //    }


                //        // ==================================== Change colours ===============================
            //// Create a Handler
            //        Handler handler = new Handler();
            //
            ////         Object to change the background color
            //        @SuppressLint({"MissingInflatedId", "LocalSuppress"}) View yourView = findViewById(R.id.friday);
            //
            //// Create a Runnable
            //        Runnable runnable = new Runnable() {
            //            @Override
            //            public void run() {
            //                // Get the current time
            //                Calendar calendar = Calendar.getInstance();
            //                int dayOfWeek = calendar.get(Calendar.DAY_OF_WEEK);
            //                int hourOfDay = calendar.get(Calendar.HOUR_OF_DAY);
            //
            //                // Check if it is 2 hours before Zuhar on Friday
            ////                int zuharTime = Integer.parseInt(zuhar24);
            ////                if (hourOfDay >= (zuharTime - 2) && hourOfDay < zuharTime)
            //
            //                // check if it is friday and between 10am and 12pm
            ////                if (dayOfWeek == Calendar.FRIDAY && hourOfDay >= 10 && hourOfDay < 12) {
            //
            //                    {
            //                    // Generate a random color
            //                    Random random = new Random();
            //                    int color = Color.argb(255, random.nextInt(256), random.nextInt(256), random.nextInt(256));
            //
            //                    // Set the background color of your activity or view
            ////                    yourView.setBackgroundColor(color);
            //
            //                    yourView.setBackgroundColor(color);
            //
            //                }
            //
            //                // Schedule the next iteration after 5 seconds
            //                handler.postDelayed(this, 2000); // 5000 milliseconds = 5 seconds
            //            }
            //        };


            //      ===================================================== 4th January 2024 Buttons ================================

            //      --------------------------------------- Buttons new methods ----------------------------------------

            //    // Plus button click listener for Fajr
            //        btnFajrPlus.setOnClickListener(new View.OnClickListener() {
            //        @Override
            //        public void onClick(View v) {
            //            String currentValue = fajr24.toString();
            //
            //            // Parse the value as a LocalTime object with the "H:mm" format
            //            fajrAdded = LocalTime.parse(currentValue, DateTimeFormatter.ofPattern("H:mm"));
            //
            //            // Add 5 minutes
            //            fajrAdded = fajrAdded.plusMinutes(5);
            //
            //            fajr24 = fajrAdded.format(DateTimeFormatter.ofPattern("H:mm"));
            //            nextFajr = fajrAdded.format(DateTimeFormatter.ofPattern("H:mm"));
            //
            //            fajrCounter += 1;
            //
            ////                sharedPreferences = getSharedPreferences("prayerTimesCounters", MODE_PRIVATE);
            ////                SharedPreferences.Editor editor = sharedPreferences.edit();
            ////                editor.putInt("fajrCounter", fajrCounter);
            ////                editor.apply();
            //
            //            // Apply adjustments only once
            //            updateFajrText();
            //        }
            //    });
            //
            //// Minus button click listener for Fajr
            //        btnFajrMinus.setOnClickListener(new View.OnClickListener() {
            //        @Override
            //        public void onClick(View v) {
            //            String currentValue = fajr24.toString();
            //
            //            // Parse the value as a LocalTime object with the "H:mm" format
            //            fajrAdded = LocalTime.parse(currentValue, DateTimeFormatter.ofPattern("H:mm"));
            //
            //            // Add 5 minutes
            //            fajrAdded = fajrAdded.minusMinutes(5);
            //
            //            fajr24 = fajrAdded.format(DateTimeFormatter.ofPattern("H:mm"));
            //            nextFajr = fajrAdded.format(DateTimeFormatter.ofPattern("H:mm"));
            //
            //            fajrCounter -= 1;
            //
            ////                // Store the data
            ////                sharedPreferences = getSharedPreferences("prayerTimesCounters", MODE_PRIVATE);
            ////                SharedPreferences.Editor editor = sharedPreferences.edit();
            ////                editor.putInt("fajrCounter", fajrCounter);
            ////                editor.apply();
            //
            //            // Apply adjustments only once
            //            updateFajrText();
            //        }
            //    });
            //
            //    // ---------------------------------------------------------------------------------------
            //
            //    // Plus button click listener for Zuhar
            //        btnZuharPlus.setOnClickListener(new View.OnClickListener() {
            //        @Override
            //        public void onClick(View v) {
            //            String currentValue = zuhar24.toString();
            //
            //            // Parse the value as a LocalTime object with the "H:mm" format
            //            zuharAdded = LocalTime.parse(currentValue, DateTimeFormatter.ofPattern("H:mm"));
            //
            //            // Add 5 minutes
            //            zuharAdded = zuharAdded.plusMinutes(5);
            //
            //            zuhar24 = zuharAdded.format(DateTimeFormatter.ofPattern("H:mm"));
            //            nextZuhar = zuharAdded.format(DateTimeFormatter.ofPattern("H:mm"));
            //
            //            zuharCounter += 1;
            //
            ////                // Store the data
            ////                sharedPreferences = getSharedPreferences("prayerTimesCounters", MODE_PRIVATE);
            ////                SharedPreferences.Editor editor = sharedPreferences.edit();
            ////                editor.putInt("zuharCounter", zuharCounter);
            ////                editor.apply();
            //
            //            // Apply adjustments only once
            //            updateZuharText();
            //        }
            //    });
            //
            //// Minus button click listener for Zuhar
            //        btnZuharMinus.setOnClickListener(new View.OnClickListener() {
            //        @Override
            //        public void onClick(View v) {
            //            String currentValue = zuhar24.toString();
            //
            //            // Parse the value as a LocalTime object with the "H:mm" format
            //            zuharAdded = LocalTime.parse(currentValue, DateTimeFormatter.ofPattern("H:mm"));
            //
            //            // Add 5 minutes
            //            zuharAdded = zuharAdded.minusMinutes(5);
            //
            //            zuhar24 = zuharAdded.format(DateTimeFormatter.ofPattern("H:mm"));
            //            nextZuhar = zuharAdded.format(DateTimeFormatter.ofPattern("H:mm"));
            //
            //            zuharCounter -= 1;
            //
            ////                // Store the data
            ////                sharedPreferences = getSharedPreferences("prayerTimesCounters", MODE_PRIVATE);
            ////                SharedPreferences.Editor editor = sharedPreferences.edit();
            ////                editor.putInt("zuharCounter", zuharCounter);
            ////                editor.apply();
            //
            //            // Apply adjustments only once
            //            updateZuharText();
            //        }
            //    });
            //
            //    // ------------------------------------------------------------------------------------------------
            //
            //    // Plus button click listener for Asr
            //        btnAsrPlus.setOnClickListener(new View.OnClickListener() {
            //        @Override
            //        public void onClick(View v) {
            //            String currentValue = asr24.toString();
            //
            //            // Parse the value as a LocalTime object with the "H:mm" format
            //            asrAdded = LocalTime.parse(currentValue, DateTimeFormatter.ofPattern("H:mm"));
            //
            //            // Add 5 minutes
            //            asrAdded = asrAdded.plusMinutes(5);
            //
            //            asr24 = asrAdded.format(DateTimeFormatter.ofPattern("H:mm"));
            //            nextAsr = asrAdded.format(DateTimeFormatter.ofPattern("H:mm"));
            //
            //            asrCounter += 1;
            //
            ////                // Store the data
            ////                sharedPreferences = getSharedPreferences("prayerTimesCounters", MODE_PRIVATE);
            ////                SharedPreferences.Editor editor = sharedPreferences.edit();
            ////                editor.putInt("asrCounter", asrCounter);
            ////                editor.apply();
            //
            //            // Apply adjustments only once
            //            updateAsrText();
            //        }
            //    });
            //
            //// Minus button click listener for Asr
            //        btnAsrMinus.setOnClickListener(new View.OnClickListener() {
            //        @Override
            //        public void onClick(View v) {
            //            String currentValue = asr24.toString();
            //
            //            // Parse the value as a LocalTime object with the "H:mm" format
            //            asrAdded = LocalTime.parse(currentValue, DateTimeFormatter.ofPattern("H:mm"));
            //
            //            // Add 5 minutes
            //            asrAdded = asrAdded.minusMinutes(5);
            //
            //            asr24 = asrAdded.format(DateTimeFormatter.ofPattern("H:mm"));
            //            nextAsr = asrAdded.format(DateTimeFormatter.ofPattern("H:mm"));
            //
            //            asrCounter -= 1;
            //
            ////                // Store the data
            ////                sharedPreferences = getSharedPreferences("prayerTimesCounters", MODE_PRIVATE);
            ////                SharedPreferences.Editor editor = sharedPreferences.edit();
            ////                editor.putInt("asrCounter", asrCounter);
            ////                editor.apply();
            //
            //            // Apply adjustments only once
            //            updateAsrText();
            //        }
            //    });
            //
            //    // ------------------------------------------------------------------------------------------------
            //
            //// Plus button click listener for Maghrib
            //        btnMaghribPlus.setOnClickListener(new View.OnClickListener() {
            //        @Override
            //        public void onClick(View v) {
            //            // Handle the plus button click for Maghrib 1 minute (change as needed)
            ////                maghribButtonClickCount += 1; // Change the increment as needed
            //
            //            // 2nd method
            ////                maghribAdded = maghribAdded.plusMinutes(1); // Adjust by 1 minute (change as needed)
            //
            //            // simple add
            ////                maghribCounter += 1;
            ////                updateMaghribText();
            //
            //
            //
            ////                // WORKING
            //////                 Retrieve the counter value
            ////                maghribCounter = getMaghribCounter();
            ////
            //////                 Convert the counter value to minutes
            ////                int minutesToAdd = maghribCounter * 1;
            ////
            //////                 Get the current time in LocalTime
            ////                LocalTime currentTime = LocalTime.now();
            ////
            //
            ////                Maghrib = findViewById(R.id.maghrib);
            //            String currentValue = maghrib24.toString();
            //
            //            // Parse the value as a LocalTime object with the "H:mm" format
            //            maghribAdded = LocalTime.parse(currentValue, DateTimeFormatter.ofPattern("H:mm"));
            //
            //            // Add 5 minutes
            //            maghribAdded = maghribAdded.plusMinutes(1);
            //
            //            maghrib24 = maghribAdded.format(DateTimeFormatter.ofPattern("H:mm"));
            //            nextMaghrib = maghribAdded.format(DateTimeFormatter.ofPattern("H:mm"));
            //
            //
            //            maghribCounter += 1;
            //
            ////                sharedPreferences = getSharedPreferences("prayerTimesCounters", MODE_PRIVATE);
            ////                SharedPreferences.Editor editor = sharedPreferences.edit();
            ////                editor.putInt("maghribCounter", maghribCounter);
            ////                editor.apply();
            //
            //            // Apply adjustments only once
            //            updateMaghribText();
            //        }
            //    });
            //
            //// Minus button click listener for Maghrib
            //        btnMaghribMinus.setOnClickListener(new View.OnClickListener() {
            //        @Override
            //        public void onClick(View v) {
            //            // Handle the minus button click for Maghrib 1 minute (change as needed)
            ////                maghribButtonClickCount -= 1; // Change the decrement as needed
            //
            //            // 2nd method
            ////                maghribAdded = maghribAdded.minusMinutes(1); // Adjust by 1 minute (change as needed)
            //            // Retrieve the counter value
            ////                maghribCounter = getMaghribCounter();
            ////
            ////                // Convert the counter value to minutes
            ////                int minutesToAdd = maghribCounter * 1;
            ////
            ////                // Get the current time in LocalTime
            ////                LocalTime currentTime = LocalTime.now();
            //
            //
            ////                Maghrib = findViewById(R.id.maghrib);
            //            String currentValue = maghrib24.toString();
            //
            //            // Parse the value as a LocalTime object with the "H:mm" format
            //            maghribAdded = LocalTime.parse(currentValue, DateTimeFormatter.ofPattern("H:mm"));
            //
            //            // Add 5 minutes
            //            maghribAdded = maghribAdded.minusMinutes(1);
            //
            //            maghrib24 = maghribAdded.format(DateTimeFormatter.ofPattern("H:mm"));
            //            nextMaghrib = maghribAdded.format(DateTimeFormatter.ofPattern("H:mm"));
            //
            //            maghribCounter -= 1;
            //
            //            // store the data
            ////                SharedPreferences sharedPreferences = getSharedPreferences("prayerTimesCounters", MODE_PRIVATE);
            ////                SharedPreferences.Editor editor = sharedPreferences.edit();
            ////                editor.putInt("maghribCounter", maghribCounter);
            ////                editor.apply();
            //
            //            // Apply adjustments only once
            //            updateMaghribText();
            //        }
            //    });
            //
            //    // ------------------------------------------------------------------------------------------------
            //    // Plus button click listener for Isha
            //        btnIshaPlus.setOnClickListener(new View.OnClickListener() {
            //        @Override
            //        public void onClick(View v) {
            //            String currentValue = isha24.toString();
            //
            //            // Parse the value as a LocalTime object with the "H:mm" format
            //            ishaAdded = LocalTime.parse(currentValue, DateTimeFormatter.ofPattern("H:mm"));
            //
            //            // Add 5 minutes
            //            ishaAdded = ishaAdded.plusMinutes(5);
            //
            //            isha24 = ishaAdded.format(DateTimeFormatter.ofPattern("H:mm"));
            //            nextIsha = ishaAdded.format(DateTimeFormatter.ofPattern("H:mm"));
            //
            //            ishaCounter += 1;
            //
            ////                // Store the data
            ////                sharedPreferences = getSharedPreferences("prayerTimesCounters", MODE_PRIVATE);
            ////                SharedPreferences.Editor editor = sharedPreferences.edit();
            ////                editor.putInt("ishaCounter", ishaCounter);
            ////                editor.apply();
            //
            //            // Apply adjustments only once
            //            updateIshaText();
            //        }
            //    });
            //
            //// Minus button click listener for Isha
            //        btnIshaMinus.setOnClickListener(new View.OnClickListener() {
            //        @Override
            //        public void onClick(View v) {
            //            String currentValue = isha24.toString();
            //
            //            // Parse the value as a LocalTime object with the "H:mm" format
            //            ishaAdded = LocalTime.parse(currentValue, DateTimeFormatter.ofPattern("H:mm"));
            //
            //            // Add 5 minutes
            //            ishaAdded = ishaAdded.minusMinutes(5);
            //
            //            isha24 = ishaAdded.format(DateTimeFormatter.ofPattern("H:mm"));
            //            nextIsha = ishaAdded.format(DateTimeFormatter.ofPattern("H:mm"));
            //
            //            ishaCounter -= 1;
            //
            ////                // Store the data
            ////                sharedPreferences = getSharedPreferences("prayerTimesCounters", MODE_PRIVATE);
            ////                SharedPreferences.Editor editor = sharedPreferences.edit();
            ////                editor.putInt("ishaCounter", ishaCounter);
            ////                editor.apply();
            //
            //            // Apply adjustments only once
            //            updateIshaText();
            //        }
            //    });


            // =============================================== button methods =======================================

                private void updateFajrText () {
                Fajr = findViewById(R.id.fajr);
                if (fajrAdded != null) {
                    try {

                        fajr24 = fajrAdded.format(DateTimeFormatter.ofPattern("H:mm"));
                        nextFajr = fajrAdded.format(DateTimeFormatter.ofPattern("H:mm"));

                        // Update the TextView with the adjusted value
            //                runOnUiThread(new Runnable() {
            //                    @Override
            //                    public void run() {
                        Fajr.setText(fajr24);
            //                    }
            //                });

                    } catch (DateTimeParseException e) {
                        // Handle the parse exception if the current value is not in a valid time format
                        e.printStackTrace();
                    }
                } else {
                    Fajr.setText(fajr24);
                }
            }


                private void updateZuharText () {
                Zuhar = findViewById(R.id.zuhar);
                if (zuharAdded != null) {
                    try {

                        zuhar24 = zuharAdded.format(DateTimeFormatter.ofPattern("H:mm"));
                        nextZuhar = zuharAdded.format(DateTimeFormatter.ofPattern("H:mm"));

                        // Update the TextView with the adjusted value
            //                runOnUiThread(new Runnable() {
            //                    @Override
            //                    public void run() {
                        Zuhar.setText(zuhar24);
            //                    }
            //                });

                    } catch (DateTimeParseException e) {
                        // Handle the parse exception if the current value is not in a valid time format
                        e.printStackTrace();
                    }
                } else {
                    Zuhar.setText(zuhar24);
                }
            }


                private void updateAsrText () {
                Asr = findViewById(R.id.asr);
                if (asrAdded != null) {
                    try {

                        asr24 = asrAdded.format(DateTimeFormatter.ofPattern("H:mm"));
                        nextAsr = asrAdded.format(DateTimeFormatter.ofPattern("H:mm"));

                        // Update the TextView with the adjusted value
            //                runOnUiThread(new Runnable() {
            //                    @Override
            //                    public void run() {
                        Asr.setText(asr24);
            //                    }
            //                });

                    } catch (DateTimeParseException e) {
                        // Handle the parse exception if the current value is not in a valid time format
                        e.printStackTrace();
                    }
                } else {
                    Asr.setText(asr24);
                }
            }

                // Method to handle Maghrib button click
                private void updateMaghribText () {
                // Ensure maghribAdded is not null
            //        if (maghribAdded != null) {


                // Get the shared preferences instance
            //        SharedPreferences sharedPreferences = getSharedPreferences("prayerTimes", MODE_PRIVATE);
            //
            //        // Get the saved maghrib24 from SharedPreferences
            //        savedMaghreb24 = sharedPreferences.getString("maghrib24", null);
            //        maghribAdded = LocalTime.parse(savedMaghreb24);
            ////
            //        // Retrieve the maghribCounter from SharedPreferences
            //        maghribCounter = sharedPreferences.getInt("maghribCounter", 0);
            //

            //
            //        if (btnMaghribPlus.isPressed()) {
            //            maghribAdded = maghribAdded.plusMinutes(1);
            //            maghribCounter++;
            //            maghrib24 = maghribAdded.format(DateTimeFormatter.ofPattern("H:mm"));
            //            nextMaghrib = maghribAdded.format(DateTimeFormatter.ofPattern("H:mm"));
            //            Maghrib = findViewById(R.id.maghrib);
            //            Maghrib.setText(maghrib24);
            //
            //
            //        }
            //
            //        if (btnMaghribMinus.isPressed()) {
            //            maghribAdded = maghribAdded.minusMinutes(1);
            //            maghribCounter--;
            //            maghrib24 = maghribAdded.format(DateTimeFormatter.ofPattern("H:mm"));
            //            nextMaghrib = maghribAdded.format(DateTimeFormatter.ofPattern("H:mm"));
            //            Maghrib = findViewById(R.id.maghrib);
            //            Maghrib.setText(maghrib24);
            //
            //        }
            //
                // Update the saved maghrib24 in SharedPreferences
            //        sharedPreferences.edit().putString("maghribCounter", maghribAdded.toString()).apply();
            //        sharedPreferences.edit().putInt("maghribCounter", maghribCounter).apply();

                // Set the displayed maghrib time to the adjusted maghrib from maghribAdded
            //        maghrib24 = maghribAdded.format(DateTimeFormatter.ofPattern("H:mm"));
            //        nextMaghrib = maghribAdded.format(DateTimeFormatter.ofPattern("H:mm"));


                String currentValue = maghrib24.toString();
                // Load the maghrib24 from SharedPreferences

                Maghrib = findViewById(R.id.maghrib);
                if (maghribAdded != null) {
                    try {

                        maghrib24 = maghribAdded.format(DateTimeFormatter.ofPattern("H:mm"));
                        nextMaghrib = maghribAdded.format(DateTimeFormatter.ofPattern("H:mm"));

                        // Update the TextView with the adjusted value
            //                runOnUiThread(new Runnable() {
            //                    @Override
            //                    public void run() {
            //                Maghrib.setText(maghrib24);


                        Maghrib.setText(maghrib24);

            //                    }
            //                });

                    } catch (DateTimeParseException e) {
                        // Handle the parse exception if the current value is not in a valid time format
                        e.printStackTrace();
                    }
                } else {
                    Maghrib.setText(maghrib24);
                }
            }

                public int getMaghribCounter () {
                SharedPreferences sharedPreferences = getSharedPreferences("prayerTimesCounters", MODE_PRIVATE);
                return sharedPreferences.getInt("maghribCounter", 0);
            }


                private void updateIshaText () {
                Isha = findViewById(R.id.isha);
                if (ishaAdded != null) {
                    try {

                        isha24 = ishaAdded.format(DateTimeFormatter.ofPattern("H:mm"));
                        nextIsha = ishaAdded.format(DateTimeFormatter.ofPattern("H:mm"));

            //                // Update the TextView with the adjusted value
            //                runOnUiThread(new Runnable() {
            //                    @Override
            //                    public void run() {
                        Isha.setText(isha24);
            //                    }
            //                });

                    } catch (DateTimeParseException e) {
                        // Handle the parse exception if the current value is not in a valid time format
                        e.printStackTrace();
                    }
                } else {
                    Isha.setText(isha24);
                }
            }


            //
            //    public class BackgroundTask extends AsyncTask<Void, Void, Void> {
            //
            //        private final MainActivity mainActivity;
            //
            //        public BackgroundTask(MainActivity mainActivity) {
            //            this.mainActivity = mainActivity;
            //        }
            //
            //        @Override
            //        protected Void doInBackground(Void... voids) {
            //            // Execute the methods in the background
            ////            mainActivity.NextDayPrayerTimes();
            //            mainActivity.startUpdatingClockEverySecond();
            //
            //            return null;
            //        }
            //
            //        // You can override onPostExecute if you need to perform any UI-related operations after the background task completes
            //        @Override
            //        protected void onPostExecute(Void aVoid) {
            //            super.onPostExecute(aVoid);
            //
            //            // Example: Perform UI updates or notify the user if needed
            //            // Note: This method runs on the UI thread, so you can safely interact with UI elements here
            //            mainActivity.CalculateTimings();
            //            mainActivity.AddMinutes();
            //            mainActivity.GetTime();
            //
            //        }
            //
            //        // Example method to start the background task
            //        public void startBackgroundTask() {
            //            // Execute the AsyncTask
            //            this.execute();
            //        }
            //    }

}



